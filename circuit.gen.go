// Code generated by circuitgen tool. DO NOT EDIT

package twitchApi

import (
	"context"
	"io"

	"github.com/cep21/circuit/v3"
)

// CircuitWrapperClientWithResponsesCircuitConfig contains configuration for CircuitWrapperClientWithResponsesCircuit. All fields are optional
type CircuitWrapperClientWithResponsesCircuitConfig struct {
	// ShouldSkipError determines whether an error should be skipped and have the circuit
	// track the call as successful. This takes precedence over IsBadRequest
	ShouldSkipError func(error) bool

	// IsBadRequest is an optional bad request checker. It is useful to not count user errors as faults
	IsBadRequest func(error) bool

	// Prefix is prepended to all circuit names
	Prefix string

	// Defaults are used for all created circuits. Per-circuit configs override this
	Defaults circuit.Config

	// CircuitAddBlockedTermWithBodyWithResponse is the configuration used for the AddBlockedTermWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitAddBlockedTermWithBodyWithResponse circuit.Config
	// CircuitAddBlockedTermWithResponse is the configuration used for the AddBlockedTermWithResponse circuit. This overrides values set by Defaults
	CircuitAddBlockedTermWithResponse circuit.Config
	// CircuitAddChannelModeratorWithResponse is the configuration used for the AddChannelModeratorWithResponse circuit. This overrides values set by Defaults
	CircuitAddChannelModeratorWithResponse circuit.Config
	// CircuitAddChannelVipWithResponse is the configuration used for the AddChannelVipWithResponse circuit. This overrides values set by Defaults
	CircuitAddChannelVipWithResponse circuit.Config
	// CircuitAssignGuestStarSlotWithResponse is the configuration used for the AssignGuestStarSlotWithResponse circuit. This overrides values set by Defaults
	CircuitAssignGuestStarSlotWithResponse circuit.Config
	// CircuitBanUserWithBodyWithResponse is the configuration used for the BanUserWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitBanUserWithBodyWithResponse circuit.Config
	// CircuitBanUserWithResponse is the configuration used for the BanUserWithResponse circuit. This overrides values set by Defaults
	CircuitBanUserWithResponse circuit.Config
	// CircuitBlockUserWithResponse is the configuration used for the BlockUserWithResponse circuit. This overrides values set by Defaults
	CircuitBlockUserWithResponse circuit.Config
	// CircuitCancelARaidWithResponse is the configuration used for the CancelARaidWithResponse circuit. This overrides values set by Defaults
	CircuitCancelARaidWithResponse circuit.Config
	// CircuitCheckAutomodStatusWithBodyWithResponse is the configuration used for the CheckAutomodStatusWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCheckAutomodStatusWithBodyWithResponse circuit.Config
	// CircuitCheckAutomodStatusWithResponse is the configuration used for the CheckAutomodStatusWithResponse circuit. This overrides values set by Defaults
	CircuitCheckAutomodStatusWithResponse circuit.Config
	// CircuitCheckUserSubscriptionWithResponse is the configuration used for the CheckUserSubscriptionWithResponse circuit. This overrides values set by Defaults
	CircuitCheckUserSubscriptionWithResponse circuit.Config
	// CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse is the configuration used for the CreateChannelStreamScheduleSegmentWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse circuit.Config
	// CircuitCreateChannelStreamScheduleSegmentWithResponse is the configuration used for the CreateChannelStreamScheduleSegmentWithResponse circuit. This overrides values set by Defaults
	CircuitCreateChannelStreamScheduleSegmentWithResponse circuit.Config
	// CircuitCreateClipWithResponse is the configuration used for the CreateClipWithResponse circuit. This overrides values set by Defaults
	CircuitCreateClipWithResponse circuit.Config
	// CircuitCreateConduitsWithBodyWithResponse is the configuration used for the CreateConduitsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreateConduitsWithBodyWithResponse circuit.Config
	// CircuitCreateConduitsWithResponse is the configuration used for the CreateConduitsWithResponse circuit. This overrides values set by Defaults
	CircuitCreateConduitsWithResponse circuit.Config
	// CircuitCreateCustomRewardsWithBodyWithResponse is the configuration used for the CreateCustomRewardsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreateCustomRewardsWithBodyWithResponse circuit.Config
	// CircuitCreateCustomRewardsWithResponse is the configuration used for the CreateCustomRewardsWithResponse circuit. This overrides values set by Defaults
	CircuitCreateCustomRewardsWithResponse circuit.Config
	// CircuitCreateEventsubSubscriptionWithBodyWithResponse is the configuration used for the CreateEventsubSubscriptionWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreateEventsubSubscriptionWithBodyWithResponse circuit.Config
	// CircuitCreateEventsubSubscriptionWithResponse is the configuration used for the CreateEventsubSubscriptionWithResponse circuit. This overrides values set by Defaults
	CircuitCreateEventsubSubscriptionWithResponse circuit.Config
	// CircuitCreateExtensionSecretWithResponse is the configuration used for the CreateExtensionSecretWithResponse circuit. This overrides values set by Defaults
	CircuitCreateExtensionSecretWithResponse circuit.Config
	// CircuitCreateGuestStarSessionWithResponse is the configuration used for the CreateGuestStarSessionWithResponse circuit. This overrides values set by Defaults
	CircuitCreateGuestStarSessionWithResponse circuit.Config
	// CircuitCreatePollWithBodyWithResponse is the configuration used for the CreatePollWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreatePollWithBodyWithResponse circuit.Config
	// CircuitCreatePollWithResponse is the configuration used for the CreatePollWithResponse circuit. This overrides values set by Defaults
	CircuitCreatePollWithResponse circuit.Config
	// CircuitCreatePredictionWithBodyWithResponse is the configuration used for the CreatePredictionWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreatePredictionWithBodyWithResponse circuit.Config
	// CircuitCreatePredictionWithResponse is the configuration used for the CreatePredictionWithResponse circuit. This overrides values set by Defaults
	CircuitCreatePredictionWithResponse circuit.Config
	// CircuitCreateStreamMarkerWithBodyWithResponse is the configuration used for the CreateStreamMarkerWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitCreateStreamMarkerWithBodyWithResponse circuit.Config
	// CircuitCreateStreamMarkerWithResponse is the configuration used for the CreateStreamMarkerWithResponse circuit. This overrides values set by Defaults
	CircuitCreateStreamMarkerWithResponse circuit.Config
	// CircuitDeleteChannelStreamScheduleSegmentWithResponse is the configuration used for the DeleteChannelStreamScheduleSegmentWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteChannelStreamScheduleSegmentWithResponse circuit.Config
	// CircuitDeleteChatMessagesWithResponse is the configuration used for the DeleteChatMessagesWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteChatMessagesWithResponse circuit.Config
	// CircuitDeleteConduitWithResponse is the configuration used for the DeleteConduitWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteConduitWithResponse circuit.Config
	// CircuitDeleteCustomRewardWithResponse is the configuration used for the DeleteCustomRewardWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteCustomRewardWithResponse circuit.Config
	// CircuitDeleteEventsubSubscriptionWithResponse is the configuration used for the DeleteEventsubSubscriptionWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteEventsubSubscriptionWithResponse circuit.Config
	// CircuitDeleteGuestStarInviteWithResponse is the configuration used for the DeleteGuestStarInviteWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteGuestStarInviteWithResponse circuit.Config
	// CircuitDeleteGuestStarSlotWithResponse is the configuration used for the DeleteGuestStarSlotWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteGuestStarSlotWithResponse circuit.Config
	// CircuitDeleteVideosWithResponse is the configuration used for the DeleteVideosWithResponse circuit. This overrides values set by Defaults
	CircuitDeleteVideosWithResponse circuit.Config
	// CircuitEndGuestStarSessionWithResponse is the configuration used for the EndGuestStarSessionWithResponse circuit. This overrides values set by Defaults
	CircuitEndGuestStarSessionWithResponse circuit.Config
	// CircuitEndPollWithBodyWithResponse is the configuration used for the EndPollWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitEndPollWithBodyWithResponse circuit.Config
	// CircuitEndPollWithResponse is the configuration used for the EndPollWithResponse circuit. This overrides values set by Defaults
	CircuitEndPollWithResponse circuit.Config
	// CircuitEndPredictionWithBodyWithResponse is the configuration used for the EndPredictionWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitEndPredictionWithBodyWithResponse circuit.Config
	// CircuitEndPredictionWithResponse is the configuration used for the EndPredictionWithResponse circuit. This overrides values set by Defaults
	CircuitEndPredictionWithResponse circuit.Config
	// CircuitGetAdScheduleWithResponse is the configuration used for the GetAdScheduleWithResponse circuit. This overrides values set by Defaults
	CircuitGetAdScheduleWithResponse circuit.Config
	// CircuitGetAllStreamTagsWithResponse is the configuration used for the GetAllStreamTagsWithResponse circuit. This overrides values set by Defaults
	CircuitGetAllStreamTagsWithResponse circuit.Config
	// CircuitGetAutomodSettingsWithResponse is the configuration used for the GetAutomodSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitGetAutomodSettingsWithResponse circuit.Config
	// CircuitGetBannedUsersWithResponse is the configuration used for the GetBannedUsersWithResponse circuit. This overrides values set by Defaults
	CircuitGetBannedUsersWithResponse circuit.Config
	// CircuitGetBitsLeaderboardWithResponse is the configuration used for the GetBitsLeaderboardWithResponse circuit. This overrides values set by Defaults
	CircuitGetBitsLeaderboardWithResponse circuit.Config
	// CircuitGetBlockedTermsWithResponse is the configuration used for the GetBlockedTermsWithResponse circuit. This overrides values set by Defaults
	CircuitGetBlockedTermsWithResponse circuit.Config
	// CircuitGetBroadcasterSubscriptionsWithResponse is the configuration used for the GetBroadcasterSubscriptionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetBroadcasterSubscriptionsWithResponse circuit.Config
	// CircuitGetChannelChatBadgesWithResponse is the configuration used for the GetChannelChatBadgesWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelChatBadgesWithResponse circuit.Config
	// CircuitGetChannelEditorsWithResponse is the configuration used for the GetChannelEditorsWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelEditorsWithResponse circuit.Config
	// CircuitGetChannelEmotesWithResponse is the configuration used for the GetChannelEmotesWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelEmotesWithResponse circuit.Config
	// CircuitGetChannelFollowersWithResponse is the configuration used for the GetChannelFollowersWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelFollowersWithResponse circuit.Config
	// CircuitGetChannelGuestStarSettingsWithResponse is the configuration used for the GetChannelGuestStarSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelGuestStarSettingsWithResponse circuit.Config
	// CircuitGetChannelIcalendarWithResponse is the configuration used for the GetChannelIcalendarWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelIcalendarWithResponse circuit.Config
	// CircuitGetChannelInformationWithResponse is the configuration used for the GetChannelInformationWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelInformationWithResponse circuit.Config
	// CircuitGetChannelStreamScheduleWithResponse is the configuration used for the GetChannelStreamScheduleWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelStreamScheduleWithResponse circuit.Config
	// CircuitGetChannelTeamsWithResponse is the configuration used for the GetChannelTeamsWithResponse circuit. This overrides values set by Defaults
	CircuitGetChannelTeamsWithResponse circuit.Config
	// CircuitGetCharityCampaignDonationsWithResponse is the configuration used for the GetCharityCampaignDonationsWithResponse circuit. This overrides values set by Defaults
	CircuitGetCharityCampaignDonationsWithResponse circuit.Config
	// CircuitGetCharityCampaignWithResponse is the configuration used for the GetCharityCampaignWithResponse circuit. This overrides values set by Defaults
	CircuitGetCharityCampaignWithResponse circuit.Config
	// CircuitGetChatSettingsWithResponse is the configuration used for the GetChatSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitGetChatSettingsWithResponse circuit.Config
	// CircuitGetChattersWithResponse is the configuration used for the GetChattersWithResponse circuit. This overrides values set by Defaults
	CircuitGetChattersWithResponse circuit.Config
	// CircuitGetCheermotesWithResponse is the configuration used for the GetCheermotesWithResponse circuit. This overrides values set by Defaults
	CircuitGetCheermotesWithResponse circuit.Config
	// CircuitGetClipsWithResponse is the configuration used for the GetClipsWithResponse circuit. This overrides values set by Defaults
	CircuitGetClipsWithResponse circuit.Config
	// CircuitGetConduitShardsWithResponse is the configuration used for the GetConduitShardsWithResponse circuit. This overrides values set by Defaults
	CircuitGetConduitShardsWithResponse circuit.Config
	// CircuitGetConduitsWithResponse is the configuration used for the GetConduitsWithResponse circuit. This overrides values set by Defaults
	CircuitGetConduitsWithResponse circuit.Config
	// CircuitGetContentClassificationLabelsWithResponse is the configuration used for the GetContentClassificationLabelsWithResponse circuit. This overrides values set by Defaults
	CircuitGetContentClassificationLabelsWithResponse circuit.Config
	// CircuitGetCreatorGoalsWithResponse is the configuration used for the GetCreatorGoalsWithResponse circuit. This overrides values set by Defaults
	CircuitGetCreatorGoalsWithResponse circuit.Config
	// CircuitGetCustomRewardRedemptionWithResponse is the configuration used for the GetCustomRewardRedemptionWithResponse circuit. This overrides values set by Defaults
	CircuitGetCustomRewardRedemptionWithResponse circuit.Config
	// CircuitGetCustomRewardWithResponse is the configuration used for the GetCustomRewardWithResponse circuit. This overrides values set by Defaults
	CircuitGetCustomRewardWithResponse circuit.Config
	// CircuitGetDropsEntitlementsWithResponse is the configuration used for the GetDropsEntitlementsWithResponse circuit. This overrides values set by Defaults
	CircuitGetDropsEntitlementsWithResponse circuit.Config
	// CircuitGetEmoteSetsWithResponse is the configuration used for the GetEmoteSetsWithResponse circuit. This overrides values set by Defaults
	CircuitGetEmoteSetsWithResponse circuit.Config
	// CircuitGetEventsubSubscriptionsWithResponse is the configuration used for the GetEventsubSubscriptionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetEventsubSubscriptionsWithResponse circuit.Config
	// CircuitGetExtensionAnalyticsWithResponse is the configuration used for the GetExtensionAnalyticsWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionAnalyticsWithResponse circuit.Config
	// CircuitGetExtensionBitsProductsWithResponse is the configuration used for the GetExtensionBitsProductsWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionBitsProductsWithResponse circuit.Config
	// CircuitGetExtensionConfigurationSegmentWithResponse is the configuration used for the GetExtensionConfigurationSegmentWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionConfigurationSegmentWithResponse circuit.Config
	// CircuitGetExtensionLiveChannelsWithResponse is the configuration used for the GetExtensionLiveChannelsWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionLiveChannelsWithResponse circuit.Config
	// CircuitGetExtensionSecretsWithResponse is the configuration used for the GetExtensionSecretsWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionSecretsWithResponse circuit.Config
	// CircuitGetExtensionTransactionsWithResponse is the configuration used for the GetExtensionTransactionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionTransactionsWithResponse circuit.Config
	// CircuitGetExtensionsWithResponse is the configuration used for the GetExtensionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetExtensionsWithResponse circuit.Config
	// CircuitGetFollowedChannelsWithResponse is the configuration used for the GetFollowedChannelsWithResponse circuit. This overrides values set by Defaults
	CircuitGetFollowedChannelsWithResponse circuit.Config
	// CircuitGetFollowedStreamsWithResponse is the configuration used for the GetFollowedStreamsWithResponse circuit. This overrides values set by Defaults
	CircuitGetFollowedStreamsWithResponse circuit.Config
	// CircuitGetGameAnalyticsWithResponse is the configuration used for the GetGameAnalyticsWithResponse circuit. This overrides values set by Defaults
	CircuitGetGameAnalyticsWithResponse circuit.Config
	// CircuitGetGamesWithResponse is the configuration used for the GetGamesWithResponse circuit. This overrides values set by Defaults
	CircuitGetGamesWithResponse circuit.Config
	// CircuitGetGlobalChatBadgesWithResponse is the configuration used for the GetGlobalChatBadgesWithResponse circuit. This overrides values set by Defaults
	CircuitGetGlobalChatBadgesWithResponse circuit.Config
	// CircuitGetGlobalEmotesWithResponse is the configuration used for the GetGlobalEmotesWithResponse circuit. This overrides values set by Defaults
	CircuitGetGlobalEmotesWithResponse circuit.Config
	// CircuitGetGuestStarInvitesWithResponse is the configuration used for the GetGuestStarInvitesWithResponse circuit. This overrides values set by Defaults
	CircuitGetGuestStarInvitesWithResponse circuit.Config
	// CircuitGetGuestStarSessionWithResponse is the configuration used for the GetGuestStarSessionWithResponse circuit. This overrides values set by Defaults
	CircuitGetGuestStarSessionWithResponse circuit.Config
	// CircuitGetHypeTrainEventsWithResponse is the configuration used for the GetHypeTrainEventsWithResponse circuit. This overrides values set by Defaults
	CircuitGetHypeTrainEventsWithResponse circuit.Config
	// CircuitGetModeratedChannelsWithResponse is the configuration used for the GetModeratedChannelsWithResponse circuit. This overrides values set by Defaults
	CircuitGetModeratedChannelsWithResponse circuit.Config
	// CircuitGetModeratorsWithResponse is the configuration used for the GetModeratorsWithResponse circuit. This overrides values set by Defaults
	CircuitGetModeratorsWithResponse circuit.Config
	// CircuitGetPollsWithResponse is the configuration used for the GetPollsWithResponse circuit. This overrides values set by Defaults
	CircuitGetPollsWithResponse circuit.Config
	// CircuitGetPredictionsWithResponse is the configuration used for the GetPredictionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetPredictionsWithResponse circuit.Config
	// CircuitGetReleasedExtensionsWithResponse is the configuration used for the GetReleasedExtensionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetReleasedExtensionsWithResponse circuit.Config
	// CircuitGetSharedChatSessionWithResponse is the configuration used for the GetSharedChatSessionWithResponse circuit. This overrides values set by Defaults
	CircuitGetSharedChatSessionWithResponse circuit.Config
	// CircuitGetShieldModeStatusWithResponse is the configuration used for the GetShieldModeStatusWithResponse circuit. This overrides values set by Defaults
	CircuitGetShieldModeStatusWithResponse circuit.Config
	// CircuitGetStreamKeyWithResponse is the configuration used for the GetStreamKeyWithResponse circuit. This overrides values set by Defaults
	CircuitGetStreamKeyWithResponse circuit.Config
	// CircuitGetStreamMarkersWithResponse is the configuration used for the GetStreamMarkersWithResponse circuit. This overrides values set by Defaults
	CircuitGetStreamMarkersWithResponse circuit.Config
	// CircuitGetStreamTagsWithResponse is the configuration used for the GetStreamTagsWithResponse circuit. This overrides values set by Defaults
	CircuitGetStreamTagsWithResponse circuit.Config
	// CircuitGetStreamsWithResponse is the configuration used for the GetStreamsWithResponse circuit. This overrides values set by Defaults
	CircuitGetStreamsWithResponse circuit.Config
	// CircuitGetTeamsWithResponse is the configuration used for the GetTeamsWithResponse circuit. This overrides values set by Defaults
	CircuitGetTeamsWithResponse circuit.Config
	// CircuitGetTopGamesWithResponse is the configuration used for the GetTopGamesWithResponse circuit. This overrides values set by Defaults
	CircuitGetTopGamesWithResponse circuit.Config
	// CircuitGetUnbanRequestsWithResponse is the configuration used for the GetUnbanRequestsWithResponse circuit. This overrides values set by Defaults
	CircuitGetUnbanRequestsWithResponse circuit.Config
	// CircuitGetUserActiveExtensionsWithResponse is the configuration used for the GetUserActiveExtensionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetUserActiveExtensionsWithResponse circuit.Config
	// CircuitGetUserBlockListWithResponse is the configuration used for the GetUserBlockListWithResponse circuit. This overrides values set by Defaults
	CircuitGetUserBlockListWithResponse circuit.Config
	// CircuitGetUserChatColorWithResponse is the configuration used for the GetUserChatColorWithResponse circuit. This overrides values set by Defaults
	CircuitGetUserChatColorWithResponse circuit.Config
	// CircuitGetUserEmotesWithResponse is the configuration used for the GetUserEmotesWithResponse circuit. This overrides values set by Defaults
	CircuitGetUserEmotesWithResponse circuit.Config
	// CircuitGetUserExtensionsWithResponse is the configuration used for the GetUserExtensionsWithResponse circuit. This overrides values set by Defaults
	CircuitGetUserExtensionsWithResponse circuit.Config
	// CircuitGetUsersWithResponse is the configuration used for the GetUsersWithResponse circuit. This overrides values set by Defaults
	CircuitGetUsersWithResponse circuit.Config
	// CircuitGetVideosWithResponse is the configuration used for the GetVideosWithResponse circuit. This overrides values set by Defaults
	CircuitGetVideosWithResponse circuit.Config
	// CircuitGetVipsWithResponse is the configuration used for the GetVipsWithResponse circuit. This overrides values set by Defaults
	CircuitGetVipsWithResponse circuit.Config
	// CircuitManageHeldAutomodMessagesWithBodyWithResponse is the configuration used for the ManageHeldAutomodMessagesWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitManageHeldAutomodMessagesWithBodyWithResponse circuit.Config
	// CircuitManageHeldAutomodMessagesWithResponse is the configuration used for the ManageHeldAutomodMessagesWithResponse circuit. This overrides values set by Defaults
	CircuitManageHeldAutomodMessagesWithResponse circuit.Config
	// CircuitModifyChannelInformationWithBodyWithResponse is the configuration used for the ModifyChannelInformationWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitModifyChannelInformationWithBodyWithResponse circuit.Config
	// CircuitModifyChannelInformationWithResponse is the configuration used for the ModifyChannelInformationWithResponse circuit. This overrides values set by Defaults
	CircuitModifyChannelInformationWithResponse circuit.Config
	// CircuitRemoveBlockedTermWithResponse is the configuration used for the RemoveBlockedTermWithResponse circuit. This overrides values set by Defaults
	CircuitRemoveBlockedTermWithResponse circuit.Config
	// CircuitRemoveChannelModeratorWithResponse is the configuration used for the RemoveChannelModeratorWithResponse circuit. This overrides values set by Defaults
	CircuitRemoveChannelModeratorWithResponse circuit.Config
	// CircuitRemoveChannelVipWithResponse is the configuration used for the RemoveChannelVipWithResponse circuit. This overrides values set by Defaults
	CircuitRemoveChannelVipWithResponse circuit.Config
	// CircuitResolveUnbanRequestsWithResponse is the configuration used for the ResolveUnbanRequestsWithResponse circuit. This overrides values set by Defaults
	CircuitResolveUnbanRequestsWithResponse circuit.Config
	// CircuitSearchCategoriesWithResponse is the configuration used for the SearchCategoriesWithResponse circuit. This overrides values set by Defaults
	CircuitSearchCategoriesWithResponse circuit.Config
	// CircuitSearchChannelsWithResponse is the configuration used for the SearchChannelsWithResponse circuit. This overrides values set by Defaults
	CircuitSearchChannelsWithResponse circuit.Config
	// CircuitSendAShoutoutWithResponse is the configuration used for the SendAShoutoutWithResponse circuit. This overrides values set by Defaults
	CircuitSendAShoutoutWithResponse circuit.Config
	// CircuitSendChatAnnouncementWithBodyWithResponse is the configuration used for the SendChatAnnouncementWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSendChatAnnouncementWithBodyWithResponse circuit.Config
	// CircuitSendChatAnnouncementWithResponse is the configuration used for the SendChatAnnouncementWithResponse circuit. This overrides values set by Defaults
	CircuitSendChatAnnouncementWithResponse circuit.Config
	// CircuitSendChatMessageWithBodyWithResponse is the configuration used for the SendChatMessageWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSendChatMessageWithBodyWithResponse circuit.Config
	// CircuitSendChatMessageWithResponse is the configuration used for the SendChatMessageWithResponse circuit. This overrides values set by Defaults
	CircuitSendChatMessageWithResponse circuit.Config
	// CircuitSendExtensionChatMessageWithBodyWithResponse is the configuration used for the SendExtensionChatMessageWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSendExtensionChatMessageWithBodyWithResponse circuit.Config
	// CircuitSendExtensionChatMessageWithResponse is the configuration used for the SendExtensionChatMessageWithResponse circuit. This overrides values set by Defaults
	CircuitSendExtensionChatMessageWithResponse circuit.Config
	// CircuitSendExtensionPubsubMessageWithBodyWithResponse is the configuration used for the SendExtensionPubsubMessageWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSendExtensionPubsubMessageWithBodyWithResponse circuit.Config
	// CircuitSendExtensionPubsubMessageWithResponse is the configuration used for the SendExtensionPubsubMessageWithResponse circuit. This overrides values set by Defaults
	CircuitSendExtensionPubsubMessageWithResponse circuit.Config
	// CircuitSendGuestStarInviteWithResponse is the configuration used for the SendGuestStarInviteWithResponse circuit. This overrides values set by Defaults
	CircuitSendGuestStarInviteWithResponse circuit.Config
	// CircuitSendWhisperWithBodyWithResponse is the configuration used for the SendWhisperWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSendWhisperWithBodyWithResponse circuit.Config
	// CircuitSendWhisperWithResponse is the configuration used for the SendWhisperWithResponse circuit. This overrides values set by Defaults
	CircuitSendWhisperWithResponse circuit.Config
	// CircuitSetExtensionConfigurationSegmentWithBodyWithResponse is the configuration used for the SetExtensionConfigurationSegmentWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSetExtensionConfigurationSegmentWithBodyWithResponse circuit.Config
	// CircuitSetExtensionConfigurationSegmentWithResponse is the configuration used for the SetExtensionConfigurationSegmentWithResponse circuit. This overrides values set by Defaults
	CircuitSetExtensionConfigurationSegmentWithResponse circuit.Config
	// CircuitSetExtensionRequiredConfigurationWithBodyWithResponse is the configuration used for the SetExtensionRequiredConfigurationWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitSetExtensionRequiredConfigurationWithBodyWithResponse circuit.Config
	// CircuitSetExtensionRequiredConfigurationWithResponse is the configuration used for the SetExtensionRequiredConfigurationWithResponse circuit. This overrides values set by Defaults
	CircuitSetExtensionRequiredConfigurationWithResponse circuit.Config
	// CircuitSnoozeNextAdWithResponse is the configuration used for the SnoozeNextAdWithResponse circuit. This overrides values set by Defaults
	CircuitSnoozeNextAdWithResponse circuit.Config
	// CircuitStartARaidWithResponse is the configuration used for the StartARaidWithResponse circuit. This overrides values set by Defaults
	CircuitStartARaidWithResponse circuit.Config
	// CircuitStartCommercialWithBodyWithResponse is the configuration used for the StartCommercialWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitStartCommercialWithBodyWithResponse circuit.Config
	// CircuitStartCommercialWithResponse is the configuration used for the StartCommercialWithResponse circuit. This overrides values set by Defaults
	CircuitStartCommercialWithResponse circuit.Config
	// CircuitUnbanUserWithResponse is the configuration used for the UnbanUserWithResponse circuit. This overrides values set by Defaults
	CircuitUnbanUserWithResponse circuit.Config
	// CircuitUnblockUserWithResponse is the configuration used for the UnblockUserWithResponse circuit. This overrides values set by Defaults
	CircuitUnblockUserWithResponse circuit.Config
	// CircuitUpdateAutomodSettingsWithBodyWithResponse is the configuration used for the UpdateAutomodSettingsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateAutomodSettingsWithBodyWithResponse circuit.Config
	// CircuitUpdateAutomodSettingsWithResponse is the configuration used for the UpdateAutomodSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateAutomodSettingsWithResponse circuit.Config
	// CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse is the configuration used for the UpdateChannelGuestStarSettingsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse circuit.Config
	// CircuitUpdateChannelGuestStarSettingsWithResponse is the configuration used for the UpdateChannelGuestStarSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChannelGuestStarSettingsWithResponse circuit.Config
	// CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse is the configuration used for the UpdateChannelStreamScheduleSegmentWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse circuit.Config
	// CircuitUpdateChannelStreamScheduleSegmentWithResponse is the configuration used for the UpdateChannelStreamScheduleSegmentWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChannelStreamScheduleSegmentWithResponse circuit.Config
	// CircuitUpdateChannelStreamScheduleWithResponse is the configuration used for the UpdateChannelStreamScheduleWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChannelStreamScheduleWithResponse circuit.Config
	// CircuitUpdateChatSettingsWithBodyWithResponse is the configuration used for the UpdateChatSettingsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChatSettingsWithBodyWithResponse circuit.Config
	// CircuitUpdateChatSettingsWithResponse is the configuration used for the UpdateChatSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateChatSettingsWithResponse circuit.Config
	// CircuitUpdateConduitShardsWithBodyWithResponse is the configuration used for the UpdateConduitShardsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateConduitShardsWithBodyWithResponse circuit.Config
	// CircuitUpdateConduitShardsWithResponse is the configuration used for the UpdateConduitShardsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateConduitShardsWithResponse circuit.Config
	// CircuitUpdateConduitsWithBodyWithResponse is the configuration used for the UpdateConduitsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateConduitsWithBodyWithResponse circuit.Config
	// CircuitUpdateConduitsWithResponse is the configuration used for the UpdateConduitsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateConduitsWithResponse circuit.Config
	// CircuitUpdateCustomRewardWithBodyWithResponse is the configuration used for the UpdateCustomRewardWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateCustomRewardWithBodyWithResponse circuit.Config
	// CircuitUpdateCustomRewardWithResponse is the configuration used for the UpdateCustomRewardWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateCustomRewardWithResponse circuit.Config
	// CircuitUpdateDropsEntitlementsWithBodyWithResponse is the configuration used for the UpdateDropsEntitlementsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateDropsEntitlementsWithBodyWithResponse circuit.Config
	// CircuitUpdateDropsEntitlementsWithResponse is the configuration used for the UpdateDropsEntitlementsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateDropsEntitlementsWithResponse circuit.Config
	// CircuitUpdateExtensionBitsProductWithBodyWithResponse is the configuration used for the UpdateExtensionBitsProductWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateExtensionBitsProductWithBodyWithResponse circuit.Config
	// CircuitUpdateExtensionBitsProductWithResponse is the configuration used for the UpdateExtensionBitsProductWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateExtensionBitsProductWithResponse circuit.Config
	// CircuitUpdateGuestStarSlotSettingsWithResponse is the configuration used for the UpdateGuestStarSlotSettingsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateGuestStarSlotSettingsWithResponse circuit.Config
	// CircuitUpdateGuestStarSlotWithResponse is the configuration used for the UpdateGuestStarSlotWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateGuestStarSlotWithResponse circuit.Config
	// CircuitUpdateRedemptionStatusWithBodyWithResponse is the configuration used for the UpdateRedemptionStatusWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateRedemptionStatusWithBodyWithResponse circuit.Config
	// CircuitUpdateRedemptionStatusWithResponse is the configuration used for the UpdateRedemptionStatusWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateRedemptionStatusWithResponse circuit.Config
	// CircuitUpdateShieldModeStatusWithBodyWithResponse is the configuration used for the UpdateShieldModeStatusWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateShieldModeStatusWithBodyWithResponse circuit.Config
	// CircuitUpdateShieldModeStatusWithResponse is the configuration used for the UpdateShieldModeStatusWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateShieldModeStatusWithResponse circuit.Config
	// CircuitUpdateUserChatColorWithResponse is the configuration used for the UpdateUserChatColorWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateUserChatColorWithResponse circuit.Config
	// CircuitUpdateUserExtensionsWithBodyWithResponse is the configuration used for the UpdateUserExtensionsWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateUserExtensionsWithBodyWithResponse circuit.Config
	// CircuitUpdateUserExtensionsWithResponse is the configuration used for the UpdateUserExtensionsWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateUserExtensionsWithResponse circuit.Config
	// CircuitUpdateUserWithResponse is the configuration used for the UpdateUserWithResponse circuit. This overrides values set by Defaults
	CircuitUpdateUserWithResponse circuit.Config
	// CircuitWarnChatUserWithBodyWithResponse is the configuration used for the WarnChatUserWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitWarnChatUserWithBodyWithResponse circuit.Config
	// CircuitWarnChatUserWithResponse is the configuration used for the WarnChatUserWithResponse circuit. This overrides values set by Defaults
	CircuitWarnChatUserWithResponse circuit.Config
}

// CircuitWrapperClientWithResponsesCircuit is a circuit wrapper for ClientWithResponsesInterface
type CircuitWrapperClientWithResponsesCircuit struct {
	ClientWithResponsesInterface

	// ShouldSkipError determines whether an error should be skipped and have the circuit
	// track the call as successful. This takes precedence over IsBadRequest
	ShouldSkipError func(error) bool

	// IsBadRequest checks whether to count a user error against the circuit. It is recommended to set this
	IsBadRequest func(error) bool

	// CircuitAddBlockedTermWithBodyWithResponse is the circuit for method AddBlockedTermWithBodyWithResponse
	CircuitAddBlockedTermWithBodyWithResponse *circuit.Circuit
	// CircuitAddBlockedTermWithResponse is the circuit for method AddBlockedTermWithResponse
	CircuitAddBlockedTermWithResponse *circuit.Circuit
	// CircuitAddChannelModeratorWithResponse is the circuit for method AddChannelModeratorWithResponse
	CircuitAddChannelModeratorWithResponse *circuit.Circuit
	// CircuitAddChannelVipWithResponse is the circuit for method AddChannelVipWithResponse
	CircuitAddChannelVipWithResponse *circuit.Circuit
	// CircuitAssignGuestStarSlotWithResponse is the circuit for method AssignGuestStarSlotWithResponse
	CircuitAssignGuestStarSlotWithResponse *circuit.Circuit
	// CircuitBanUserWithBodyWithResponse is the circuit for method BanUserWithBodyWithResponse
	CircuitBanUserWithBodyWithResponse *circuit.Circuit
	// CircuitBanUserWithResponse is the circuit for method BanUserWithResponse
	CircuitBanUserWithResponse *circuit.Circuit
	// CircuitBlockUserWithResponse is the circuit for method BlockUserWithResponse
	CircuitBlockUserWithResponse *circuit.Circuit
	// CircuitCancelARaidWithResponse is the circuit for method CancelARaidWithResponse
	CircuitCancelARaidWithResponse *circuit.Circuit
	// CircuitCheckAutomodStatusWithBodyWithResponse is the circuit for method CheckAutomodStatusWithBodyWithResponse
	CircuitCheckAutomodStatusWithBodyWithResponse *circuit.Circuit
	// CircuitCheckAutomodStatusWithResponse is the circuit for method CheckAutomodStatusWithResponse
	CircuitCheckAutomodStatusWithResponse *circuit.Circuit
	// CircuitCheckUserSubscriptionWithResponse is the circuit for method CheckUserSubscriptionWithResponse
	CircuitCheckUserSubscriptionWithResponse *circuit.Circuit
	// CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse is the circuit for method CreateChannelStreamScheduleSegmentWithBodyWithResponse
	CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse *circuit.Circuit
	// CircuitCreateChannelStreamScheduleSegmentWithResponse is the circuit for method CreateChannelStreamScheduleSegmentWithResponse
	CircuitCreateChannelStreamScheduleSegmentWithResponse *circuit.Circuit
	// CircuitCreateClipWithResponse is the circuit for method CreateClipWithResponse
	CircuitCreateClipWithResponse *circuit.Circuit
	// CircuitCreateConduitsWithBodyWithResponse is the circuit for method CreateConduitsWithBodyWithResponse
	CircuitCreateConduitsWithBodyWithResponse *circuit.Circuit
	// CircuitCreateConduitsWithResponse is the circuit for method CreateConduitsWithResponse
	CircuitCreateConduitsWithResponse *circuit.Circuit
	// CircuitCreateCustomRewardsWithBodyWithResponse is the circuit for method CreateCustomRewardsWithBodyWithResponse
	CircuitCreateCustomRewardsWithBodyWithResponse *circuit.Circuit
	// CircuitCreateCustomRewardsWithResponse is the circuit for method CreateCustomRewardsWithResponse
	CircuitCreateCustomRewardsWithResponse *circuit.Circuit
	// CircuitCreateEventsubSubscriptionWithBodyWithResponse is the circuit for method CreateEventsubSubscriptionWithBodyWithResponse
	CircuitCreateEventsubSubscriptionWithBodyWithResponse *circuit.Circuit
	// CircuitCreateEventsubSubscriptionWithResponse is the circuit for method CreateEventsubSubscriptionWithResponse
	CircuitCreateEventsubSubscriptionWithResponse *circuit.Circuit
	// CircuitCreateExtensionSecretWithResponse is the circuit for method CreateExtensionSecretWithResponse
	CircuitCreateExtensionSecretWithResponse *circuit.Circuit
	// CircuitCreateGuestStarSessionWithResponse is the circuit for method CreateGuestStarSessionWithResponse
	CircuitCreateGuestStarSessionWithResponse *circuit.Circuit
	// CircuitCreatePollWithBodyWithResponse is the circuit for method CreatePollWithBodyWithResponse
	CircuitCreatePollWithBodyWithResponse *circuit.Circuit
	// CircuitCreatePollWithResponse is the circuit for method CreatePollWithResponse
	CircuitCreatePollWithResponse *circuit.Circuit
	// CircuitCreatePredictionWithBodyWithResponse is the circuit for method CreatePredictionWithBodyWithResponse
	CircuitCreatePredictionWithBodyWithResponse *circuit.Circuit
	// CircuitCreatePredictionWithResponse is the circuit for method CreatePredictionWithResponse
	CircuitCreatePredictionWithResponse *circuit.Circuit
	// CircuitCreateStreamMarkerWithBodyWithResponse is the circuit for method CreateStreamMarkerWithBodyWithResponse
	CircuitCreateStreamMarkerWithBodyWithResponse *circuit.Circuit
	// CircuitCreateStreamMarkerWithResponse is the circuit for method CreateStreamMarkerWithResponse
	CircuitCreateStreamMarkerWithResponse *circuit.Circuit
	// CircuitDeleteChannelStreamScheduleSegmentWithResponse is the circuit for method DeleteChannelStreamScheduleSegmentWithResponse
	CircuitDeleteChannelStreamScheduleSegmentWithResponse *circuit.Circuit
	// CircuitDeleteChatMessagesWithResponse is the circuit for method DeleteChatMessagesWithResponse
	CircuitDeleteChatMessagesWithResponse *circuit.Circuit
	// CircuitDeleteConduitWithResponse is the circuit for method DeleteConduitWithResponse
	CircuitDeleteConduitWithResponse *circuit.Circuit
	// CircuitDeleteCustomRewardWithResponse is the circuit for method DeleteCustomRewardWithResponse
	CircuitDeleteCustomRewardWithResponse *circuit.Circuit
	// CircuitDeleteEventsubSubscriptionWithResponse is the circuit for method DeleteEventsubSubscriptionWithResponse
	CircuitDeleteEventsubSubscriptionWithResponse *circuit.Circuit
	// CircuitDeleteGuestStarInviteWithResponse is the circuit for method DeleteGuestStarInviteWithResponse
	CircuitDeleteGuestStarInviteWithResponse *circuit.Circuit
	// CircuitDeleteGuestStarSlotWithResponse is the circuit for method DeleteGuestStarSlotWithResponse
	CircuitDeleteGuestStarSlotWithResponse *circuit.Circuit
	// CircuitDeleteVideosWithResponse is the circuit for method DeleteVideosWithResponse
	CircuitDeleteVideosWithResponse *circuit.Circuit
	// CircuitEndGuestStarSessionWithResponse is the circuit for method EndGuestStarSessionWithResponse
	CircuitEndGuestStarSessionWithResponse *circuit.Circuit
	// CircuitEndPollWithBodyWithResponse is the circuit for method EndPollWithBodyWithResponse
	CircuitEndPollWithBodyWithResponse *circuit.Circuit
	// CircuitEndPollWithResponse is the circuit for method EndPollWithResponse
	CircuitEndPollWithResponse *circuit.Circuit
	// CircuitEndPredictionWithBodyWithResponse is the circuit for method EndPredictionWithBodyWithResponse
	CircuitEndPredictionWithBodyWithResponse *circuit.Circuit
	// CircuitEndPredictionWithResponse is the circuit for method EndPredictionWithResponse
	CircuitEndPredictionWithResponse *circuit.Circuit
	// CircuitGetAdScheduleWithResponse is the circuit for method GetAdScheduleWithResponse
	CircuitGetAdScheduleWithResponse *circuit.Circuit
	// CircuitGetAllStreamTagsWithResponse is the circuit for method GetAllStreamTagsWithResponse
	CircuitGetAllStreamTagsWithResponse *circuit.Circuit
	// CircuitGetAutomodSettingsWithResponse is the circuit for method GetAutomodSettingsWithResponse
	CircuitGetAutomodSettingsWithResponse *circuit.Circuit
	// CircuitGetBannedUsersWithResponse is the circuit for method GetBannedUsersWithResponse
	CircuitGetBannedUsersWithResponse *circuit.Circuit
	// CircuitGetBitsLeaderboardWithResponse is the circuit for method GetBitsLeaderboardWithResponse
	CircuitGetBitsLeaderboardWithResponse *circuit.Circuit
	// CircuitGetBlockedTermsWithResponse is the circuit for method GetBlockedTermsWithResponse
	CircuitGetBlockedTermsWithResponse *circuit.Circuit
	// CircuitGetBroadcasterSubscriptionsWithResponse is the circuit for method GetBroadcasterSubscriptionsWithResponse
	CircuitGetBroadcasterSubscriptionsWithResponse *circuit.Circuit
	// CircuitGetChannelChatBadgesWithResponse is the circuit for method GetChannelChatBadgesWithResponse
	CircuitGetChannelChatBadgesWithResponse *circuit.Circuit
	// CircuitGetChannelEditorsWithResponse is the circuit for method GetChannelEditorsWithResponse
	CircuitGetChannelEditorsWithResponse *circuit.Circuit
	// CircuitGetChannelEmotesWithResponse is the circuit for method GetChannelEmotesWithResponse
	CircuitGetChannelEmotesWithResponse *circuit.Circuit
	// CircuitGetChannelFollowersWithResponse is the circuit for method GetChannelFollowersWithResponse
	CircuitGetChannelFollowersWithResponse *circuit.Circuit
	// CircuitGetChannelGuestStarSettingsWithResponse is the circuit for method GetChannelGuestStarSettingsWithResponse
	CircuitGetChannelGuestStarSettingsWithResponse *circuit.Circuit
	// CircuitGetChannelIcalendarWithResponse is the circuit for method GetChannelIcalendarWithResponse
	CircuitGetChannelIcalendarWithResponse *circuit.Circuit
	// CircuitGetChannelInformationWithResponse is the circuit for method GetChannelInformationWithResponse
	CircuitGetChannelInformationWithResponse *circuit.Circuit
	// CircuitGetChannelStreamScheduleWithResponse is the circuit for method GetChannelStreamScheduleWithResponse
	CircuitGetChannelStreamScheduleWithResponse *circuit.Circuit
	// CircuitGetChannelTeamsWithResponse is the circuit for method GetChannelTeamsWithResponse
	CircuitGetChannelTeamsWithResponse *circuit.Circuit
	// CircuitGetCharityCampaignDonationsWithResponse is the circuit for method GetCharityCampaignDonationsWithResponse
	CircuitGetCharityCampaignDonationsWithResponse *circuit.Circuit
	// CircuitGetCharityCampaignWithResponse is the circuit for method GetCharityCampaignWithResponse
	CircuitGetCharityCampaignWithResponse *circuit.Circuit
	// CircuitGetChatSettingsWithResponse is the circuit for method GetChatSettingsWithResponse
	CircuitGetChatSettingsWithResponse *circuit.Circuit
	// CircuitGetChattersWithResponse is the circuit for method GetChattersWithResponse
	CircuitGetChattersWithResponse *circuit.Circuit
	// CircuitGetCheermotesWithResponse is the circuit for method GetCheermotesWithResponse
	CircuitGetCheermotesWithResponse *circuit.Circuit
	// CircuitGetClipsWithResponse is the circuit for method GetClipsWithResponse
	CircuitGetClipsWithResponse *circuit.Circuit
	// CircuitGetConduitShardsWithResponse is the circuit for method GetConduitShardsWithResponse
	CircuitGetConduitShardsWithResponse *circuit.Circuit
	// CircuitGetConduitsWithResponse is the circuit for method GetConduitsWithResponse
	CircuitGetConduitsWithResponse *circuit.Circuit
	// CircuitGetContentClassificationLabelsWithResponse is the circuit for method GetContentClassificationLabelsWithResponse
	CircuitGetContentClassificationLabelsWithResponse *circuit.Circuit
	// CircuitGetCreatorGoalsWithResponse is the circuit for method GetCreatorGoalsWithResponse
	CircuitGetCreatorGoalsWithResponse *circuit.Circuit
	// CircuitGetCustomRewardRedemptionWithResponse is the circuit for method GetCustomRewardRedemptionWithResponse
	CircuitGetCustomRewardRedemptionWithResponse *circuit.Circuit
	// CircuitGetCustomRewardWithResponse is the circuit for method GetCustomRewardWithResponse
	CircuitGetCustomRewardWithResponse *circuit.Circuit
	// CircuitGetDropsEntitlementsWithResponse is the circuit for method GetDropsEntitlementsWithResponse
	CircuitGetDropsEntitlementsWithResponse *circuit.Circuit
	// CircuitGetEmoteSetsWithResponse is the circuit for method GetEmoteSetsWithResponse
	CircuitGetEmoteSetsWithResponse *circuit.Circuit
	// CircuitGetEventsubSubscriptionsWithResponse is the circuit for method GetEventsubSubscriptionsWithResponse
	CircuitGetEventsubSubscriptionsWithResponse *circuit.Circuit
	// CircuitGetExtensionAnalyticsWithResponse is the circuit for method GetExtensionAnalyticsWithResponse
	CircuitGetExtensionAnalyticsWithResponse *circuit.Circuit
	// CircuitGetExtensionBitsProductsWithResponse is the circuit for method GetExtensionBitsProductsWithResponse
	CircuitGetExtensionBitsProductsWithResponse *circuit.Circuit
	// CircuitGetExtensionConfigurationSegmentWithResponse is the circuit for method GetExtensionConfigurationSegmentWithResponse
	CircuitGetExtensionConfigurationSegmentWithResponse *circuit.Circuit
	// CircuitGetExtensionLiveChannelsWithResponse is the circuit for method GetExtensionLiveChannelsWithResponse
	CircuitGetExtensionLiveChannelsWithResponse *circuit.Circuit
	// CircuitGetExtensionSecretsWithResponse is the circuit for method GetExtensionSecretsWithResponse
	CircuitGetExtensionSecretsWithResponse *circuit.Circuit
	// CircuitGetExtensionTransactionsWithResponse is the circuit for method GetExtensionTransactionsWithResponse
	CircuitGetExtensionTransactionsWithResponse *circuit.Circuit
	// CircuitGetExtensionsWithResponse is the circuit for method GetExtensionsWithResponse
	CircuitGetExtensionsWithResponse *circuit.Circuit
	// CircuitGetFollowedChannelsWithResponse is the circuit for method GetFollowedChannelsWithResponse
	CircuitGetFollowedChannelsWithResponse *circuit.Circuit
	// CircuitGetFollowedStreamsWithResponse is the circuit for method GetFollowedStreamsWithResponse
	CircuitGetFollowedStreamsWithResponse *circuit.Circuit
	// CircuitGetGameAnalyticsWithResponse is the circuit for method GetGameAnalyticsWithResponse
	CircuitGetGameAnalyticsWithResponse *circuit.Circuit
	// CircuitGetGamesWithResponse is the circuit for method GetGamesWithResponse
	CircuitGetGamesWithResponse *circuit.Circuit
	// CircuitGetGlobalChatBadgesWithResponse is the circuit for method GetGlobalChatBadgesWithResponse
	CircuitGetGlobalChatBadgesWithResponse *circuit.Circuit
	// CircuitGetGlobalEmotesWithResponse is the circuit for method GetGlobalEmotesWithResponse
	CircuitGetGlobalEmotesWithResponse *circuit.Circuit
	// CircuitGetGuestStarInvitesWithResponse is the circuit for method GetGuestStarInvitesWithResponse
	CircuitGetGuestStarInvitesWithResponse *circuit.Circuit
	// CircuitGetGuestStarSessionWithResponse is the circuit for method GetGuestStarSessionWithResponse
	CircuitGetGuestStarSessionWithResponse *circuit.Circuit
	// CircuitGetHypeTrainEventsWithResponse is the circuit for method GetHypeTrainEventsWithResponse
	CircuitGetHypeTrainEventsWithResponse *circuit.Circuit
	// CircuitGetModeratedChannelsWithResponse is the circuit for method GetModeratedChannelsWithResponse
	CircuitGetModeratedChannelsWithResponse *circuit.Circuit
	// CircuitGetModeratorsWithResponse is the circuit for method GetModeratorsWithResponse
	CircuitGetModeratorsWithResponse *circuit.Circuit
	// CircuitGetPollsWithResponse is the circuit for method GetPollsWithResponse
	CircuitGetPollsWithResponse *circuit.Circuit
	// CircuitGetPredictionsWithResponse is the circuit for method GetPredictionsWithResponse
	CircuitGetPredictionsWithResponse *circuit.Circuit
	// CircuitGetReleasedExtensionsWithResponse is the circuit for method GetReleasedExtensionsWithResponse
	CircuitGetReleasedExtensionsWithResponse *circuit.Circuit
	// CircuitGetSharedChatSessionWithResponse is the circuit for method GetSharedChatSessionWithResponse
	CircuitGetSharedChatSessionWithResponse *circuit.Circuit
	// CircuitGetShieldModeStatusWithResponse is the circuit for method GetShieldModeStatusWithResponse
	CircuitGetShieldModeStatusWithResponse *circuit.Circuit
	// CircuitGetStreamKeyWithResponse is the circuit for method GetStreamKeyWithResponse
	CircuitGetStreamKeyWithResponse *circuit.Circuit
	// CircuitGetStreamMarkersWithResponse is the circuit for method GetStreamMarkersWithResponse
	CircuitGetStreamMarkersWithResponse *circuit.Circuit
	// CircuitGetStreamTagsWithResponse is the circuit for method GetStreamTagsWithResponse
	CircuitGetStreamTagsWithResponse *circuit.Circuit
	// CircuitGetStreamsWithResponse is the circuit for method GetStreamsWithResponse
	CircuitGetStreamsWithResponse *circuit.Circuit
	// CircuitGetTeamsWithResponse is the circuit for method GetTeamsWithResponse
	CircuitGetTeamsWithResponse *circuit.Circuit
	// CircuitGetTopGamesWithResponse is the circuit for method GetTopGamesWithResponse
	CircuitGetTopGamesWithResponse *circuit.Circuit
	// CircuitGetUnbanRequestsWithResponse is the circuit for method GetUnbanRequestsWithResponse
	CircuitGetUnbanRequestsWithResponse *circuit.Circuit
	// CircuitGetUserActiveExtensionsWithResponse is the circuit for method GetUserActiveExtensionsWithResponse
	CircuitGetUserActiveExtensionsWithResponse *circuit.Circuit
	// CircuitGetUserBlockListWithResponse is the circuit for method GetUserBlockListWithResponse
	CircuitGetUserBlockListWithResponse *circuit.Circuit
	// CircuitGetUserChatColorWithResponse is the circuit for method GetUserChatColorWithResponse
	CircuitGetUserChatColorWithResponse *circuit.Circuit
	// CircuitGetUserEmotesWithResponse is the circuit for method GetUserEmotesWithResponse
	CircuitGetUserEmotesWithResponse *circuit.Circuit
	// CircuitGetUserExtensionsWithResponse is the circuit for method GetUserExtensionsWithResponse
	CircuitGetUserExtensionsWithResponse *circuit.Circuit
	// CircuitGetUsersWithResponse is the circuit for method GetUsersWithResponse
	CircuitGetUsersWithResponse *circuit.Circuit
	// CircuitGetVideosWithResponse is the circuit for method GetVideosWithResponse
	CircuitGetVideosWithResponse *circuit.Circuit
	// CircuitGetVipsWithResponse is the circuit for method GetVipsWithResponse
	CircuitGetVipsWithResponse *circuit.Circuit
	// CircuitManageHeldAutomodMessagesWithBodyWithResponse is the circuit for method ManageHeldAutomodMessagesWithBodyWithResponse
	CircuitManageHeldAutomodMessagesWithBodyWithResponse *circuit.Circuit
	// CircuitManageHeldAutomodMessagesWithResponse is the circuit for method ManageHeldAutomodMessagesWithResponse
	CircuitManageHeldAutomodMessagesWithResponse *circuit.Circuit
	// CircuitModifyChannelInformationWithBodyWithResponse is the circuit for method ModifyChannelInformationWithBodyWithResponse
	CircuitModifyChannelInformationWithBodyWithResponse *circuit.Circuit
	// CircuitModifyChannelInformationWithResponse is the circuit for method ModifyChannelInformationWithResponse
	CircuitModifyChannelInformationWithResponse *circuit.Circuit
	// CircuitRemoveBlockedTermWithResponse is the circuit for method RemoveBlockedTermWithResponse
	CircuitRemoveBlockedTermWithResponse *circuit.Circuit
	// CircuitRemoveChannelModeratorWithResponse is the circuit for method RemoveChannelModeratorWithResponse
	CircuitRemoveChannelModeratorWithResponse *circuit.Circuit
	// CircuitRemoveChannelVipWithResponse is the circuit for method RemoveChannelVipWithResponse
	CircuitRemoveChannelVipWithResponse *circuit.Circuit
	// CircuitResolveUnbanRequestsWithResponse is the circuit for method ResolveUnbanRequestsWithResponse
	CircuitResolveUnbanRequestsWithResponse *circuit.Circuit
	// CircuitSearchCategoriesWithResponse is the circuit for method SearchCategoriesWithResponse
	CircuitSearchCategoriesWithResponse *circuit.Circuit
	// CircuitSearchChannelsWithResponse is the circuit for method SearchChannelsWithResponse
	CircuitSearchChannelsWithResponse *circuit.Circuit
	// CircuitSendAShoutoutWithResponse is the circuit for method SendAShoutoutWithResponse
	CircuitSendAShoutoutWithResponse *circuit.Circuit
	// CircuitSendChatAnnouncementWithBodyWithResponse is the circuit for method SendChatAnnouncementWithBodyWithResponse
	CircuitSendChatAnnouncementWithBodyWithResponse *circuit.Circuit
	// CircuitSendChatAnnouncementWithResponse is the circuit for method SendChatAnnouncementWithResponse
	CircuitSendChatAnnouncementWithResponse *circuit.Circuit
	// CircuitSendChatMessageWithBodyWithResponse is the circuit for method SendChatMessageWithBodyWithResponse
	CircuitSendChatMessageWithBodyWithResponse *circuit.Circuit
	// CircuitSendChatMessageWithResponse is the circuit for method SendChatMessageWithResponse
	CircuitSendChatMessageWithResponse *circuit.Circuit
	// CircuitSendExtensionChatMessageWithBodyWithResponse is the circuit for method SendExtensionChatMessageWithBodyWithResponse
	CircuitSendExtensionChatMessageWithBodyWithResponse *circuit.Circuit
	// CircuitSendExtensionChatMessageWithResponse is the circuit for method SendExtensionChatMessageWithResponse
	CircuitSendExtensionChatMessageWithResponse *circuit.Circuit
	// CircuitSendExtensionPubsubMessageWithBodyWithResponse is the circuit for method SendExtensionPubsubMessageWithBodyWithResponse
	CircuitSendExtensionPubsubMessageWithBodyWithResponse *circuit.Circuit
	// CircuitSendExtensionPubsubMessageWithResponse is the circuit for method SendExtensionPubsubMessageWithResponse
	CircuitSendExtensionPubsubMessageWithResponse *circuit.Circuit
	// CircuitSendGuestStarInviteWithResponse is the circuit for method SendGuestStarInviteWithResponse
	CircuitSendGuestStarInviteWithResponse *circuit.Circuit
	// CircuitSendWhisperWithBodyWithResponse is the circuit for method SendWhisperWithBodyWithResponse
	CircuitSendWhisperWithBodyWithResponse *circuit.Circuit
	// CircuitSendWhisperWithResponse is the circuit for method SendWhisperWithResponse
	CircuitSendWhisperWithResponse *circuit.Circuit
	// CircuitSetExtensionConfigurationSegmentWithBodyWithResponse is the circuit for method SetExtensionConfigurationSegmentWithBodyWithResponse
	CircuitSetExtensionConfigurationSegmentWithBodyWithResponse *circuit.Circuit
	// CircuitSetExtensionConfigurationSegmentWithResponse is the circuit for method SetExtensionConfigurationSegmentWithResponse
	CircuitSetExtensionConfigurationSegmentWithResponse *circuit.Circuit
	// CircuitSetExtensionRequiredConfigurationWithBodyWithResponse is the circuit for method SetExtensionRequiredConfigurationWithBodyWithResponse
	CircuitSetExtensionRequiredConfigurationWithBodyWithResponse *circuit.Circuit
	// CircuitSetExtensionRequiredConfigurationWithResponse is the circuit for method SetExtensionRequiredConfigurationWithResponse
	CircuitSetExtensionRequiredConfigurationWithResponse *circuit.Circuit
	// CircuitSnoozeNextAdWithResponse is the circuit for method SnoozeNextAdWithResponse
	CircuitSnoozeNextAdWithResponse *circuit.Circuit
	// CircuitStartARaidWithResponse is the circuit for method StartARaidWithResponse
	CircuitStartARaidWithResponse *circuit.Circuit
	// CircuitStartCommercialWithBodyWithResponse is the circuit for method StartCommercialWithBodyWithResponse
	CircuitStartCommercialWithBodyWithResponse *circuit.Circuit
	// CircuitStartCommercialWithResponse is the circuit for method StartCommercialWithResponse
	CircuitStartCommercialWithResponse *circuit.Circuit
	// CircuitUnbanUserWithResponse is the circuit for method UnbanUserWithResponse
	CircuitUnbanUserWithResponse *circuit.Circuit
	// CircuitUnblockUserWithResponse is the circuit for method UnblockUserWithResponse
	CircuitUnblockUserWithResponse *circuit.Circuit
	// CircuitUpdateAutomodSettingsWithBodyWithResponse is the circuit for method UpdateAutomodSettingsWithBodyWithResponse
	CircuitUpdateAutomodSettingsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateAutomodSettingsWithResponse is the circuit for method UpdateAutomodSettingsWithResponse
	CircuitUpdateAutomodSettingsWithResponse *circuit.Circuit
	// CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse is the circuit for method UpdateChannelGuestStarSettingsWithBodyWithResponse
	CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateChannelGuestStarSettingsWithResponse is the circuit for method UpdateChannelGuestStarSettingsWithResponse
	CircuitUpdateChannelGuestStarSettingsWithResponse *circuit.Circuit
	// CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse is the circuit for method UpdateChannelStreamScheduleSegmentWithBodyWithResponse
	CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateChannelStreamScheduleSegmentWithResponse is the circuit for method UpdateChannelStreamScheduleSegmentWithResponse
	CircuitUpdateChannelStreamScheduleSegmentWithResponse *circuit.Circuit
	// CircuitUpdateChannelStreamScheduleWithResponse is the circuit for method UpdateChannelStreamScheduleWithResponse
	CircuitUpdateChannelStreamScheduleWithResponse *circuit.Circuit
	// CircuitUpdateChatSettingsWithBodyWithResponse is the circuit for method UpdateChatSettingsWithBodyWithResponse
	CircuitUpdateChatSettingsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateChatSettingsWithResponse is the circuit for method UpdateChatSettingsWithResponse
	CircuitUpdateChatSettingsWithResponse *circuit.Circuit
	// CircuitUpdateConduitShardsWithBodyWithResponse is the circuit for method UpdateConduitShardsWithBodyWithResponse
	CircuitUpdateConduitShardsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateConduitShardsWithResponse is the circuit for method UpdateConduitShardsWithResponse
	CircuitUpdateConduitShardsWithResponse *circuit.Circuit
	// CircuitUpdateConduitsWithBodyWithResponse is the circuit for method UpdateConduitsWithBodyWithResponse
	CircuitUpdateConduitsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateConduitsWithResponse is the circuit for method UpdateConduitsWithResponse
	CircuitUpdateConduitsWithResponse *circuit.Circuit
	// CircuitUpdateCustomRewardWithBodyWithResponse is the circuit for method UpdateCustomRewardWithBodyWithResponse
	CircuitUpdateCustomRewardWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateCustomRewardWithResponse is the circuit for method UpdateCustomRewardWithResponse
	CircuitUpdateCustomRewardWithResponse *circuit.Circuit
	// CircuitUpdateDropsEntitlementsWithBodyWithResponse is the circuit for method UpdateDropsEntitlementsWithBodyWithResponse
	CircuitUpdateDropsEntitlementsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateDropsEntitlementsWithResponse is the circuit for method UpdateDropsEntitlementsWithResponse
	CircuitUpdateDropsEntitlementsWithResponse *circuit.Circuit
	// CircuitUpdateExtensionBitsProductWithBodyWithResponse is the circuit for method UpdateExtensionBitsProductWithBodyWithResponse
	CircuitUpdateExtensionBitsProductWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateExtensionBitsProductWithResponse is the circuit for method UpdateExtensionBitsProductWithResponse
	CircuitUpdateExtensionBitsProductWithResponse *circuit.Circuit
	// CircuitUpdateGuestStarSlotSettingsWithResponse is the circuit for method UpdateGuestStarSlotSettingsWithResponse
	CircuitUpdateGuestStarSlotSettingsWithResponse *circuit.Circuit
	// CircuitUpdateGuestStarSlotWithResponse is the circuit for method UpdateGuestStarSlotWithResponse
	CircuitUpdateGuestStarSlotWithResponse *circuit.Circuit
	// CircuitUpdateRedemptionStatusWithBodyWithResponse is the circuit for method UpdateRedemptionStatusWithBodyWithResponse
	CircuitUpdateRedemptionStatusWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateRedemptionStatusWithResponse is the circuit for method UpdateRedemptionStatusWithResponse
	CircuitUpdateRedemptionStatusWithResponse *circuit.Circuit
	// CircuitUpdateShieldModeStatusWithBodyWithResponse is the circuit for method UpdateShieldModeStatusWithBodyWithResponse
	CircuitUpdateShieldModeStatusWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateShieldModeStatusWithResponse is the circuit for method UpdateShieldModeStatusWithResponse
	CircuitUpdateShieldModeStatusWithResponse *circuit.Circuit
	// CircuitUpdateUserChatColorWithResponse is the circuit for method UpdateUserChatColorWithResponse
	CircuitUpdateUserChatColorWithResponse *circuit.Circuit
	// CircuitUpdateUserExtensionsWithBodyWithResponse is the circuit for method UpdateUserExtensionsWithBodyWithResponse
	CircuitUpdateUserExtensionsWithBodyWithResponse *circuit.Circuit
	// CircuitUpdateUserExtensionsWithResponse is the circuit for method UpdateUserExtensionsWithResponse
	CircuitUpdateUserExtensionsWithResponse *circuit.Circuit
	// CircuitUpdateUserWithResponse is the circuit for method UpdateUserWithResponse
	CircuitUpdateUserWithResponse *circuit.Circuit
	// CircuitWarnChatUserWithBodyWithResponse is the circuit for method WarnChatUserWithBodyWithResponse
	CircuitWarnChatUserWithBodyWithResponse *circuit.Circuit
	// CircuitWarnChatUserWithResponse is the circuit for method WarnChatUserWithResponse
	CircuitWarnChatUserWithResponse *circuit.Circuit
}

// NewCircuitWrapperClientWithResponsesCircuit creates a new circuit wrapper and initializes circuits
func NewCircuitWrapperClientWithResponsesCircuit(
	manager *circuit.Manager,
	embedded ClientWithResponsesInterface,
	conf CircuitWrapperClientWithResponsesCircuitConfig,
) (*CircuitWrapperClientWithResponsesCircuit, error) {
	if conf.ShouldSkipError == nil {
		conf.ShouldSkipError = func(err error) bool {
			return false
		}
	}

	if conf.IsBadRequest == nil {
		conf.IsBadRequest = func(err error) bool {
			return false
		}
	}

	w := &CircuitWrapperClientWithResponsesCircuit{
		ClientWithResponsesInterface: embedded,
		ShouldSkipError:              conf.ShouldSkipError,
		IsBadRequest:                 conf.IsBadRequest,
	}

	var err error
	w.CircuitAddBlockedTermWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.AddBlockedTermWithBodyWithResponse", conf.CircuitAddBlockedTermWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitAddBlockedTermWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.AddBlockedTermWithResponse", conf.CircuitAddBlockedTermWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitAddChannelModeratorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.AddChannelModeratorWithResponse", conf.CircuitAddChannelModeratorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitAddChannelVipWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.AddChannelVipWithResponse", conf.CircuitAddChannelVipWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitAssignGuestStarSlotWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.AssignGuestStarSlotWithResponse", conf.CircuitAssignGuestStarSlotWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitBanUserWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.BanUserWithBodyWithResponse", conf.CircuitBanUserWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitBanUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.BanUserWithResponse", conf.CircuitBanUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitBlockUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.BlockUserWithResponse", conf.CircuitBlockUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCancelARaidWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CancelARaidWithResponse", conf.CircuitCancelARaidWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCheckAutomodStatusWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CheckAutomodStatusWithBodyWithResponse", conf.CircuitCheckAutomodStatusWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCheckAutomodStatusWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CheckAutomodStatusWithResponse", conf.CircuitCheckAutomodStatusWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCheckUserSubscriptionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CheckUserSubscriptionWithResponse", conf.CircuitCheckUserSubscriptionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateChannelStreamScheduleSegmentWithBodyWithResponse", conf.CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateChannelStreamScheduleSegmentWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateChannelStreamScheduleSegmentWithResponse", conf.CircuitCreateChannelStreamScheduleSegmentWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateClipWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateClipWithResponse", conf.CircuitCreateClipWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateConduitsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateConduitsWithBodyWithResponse", conf.CircuitCreateConduitsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateConduitsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateConduitsWithResponse", conf.CircuitCreateConduitsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateCustomRewardsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateCustomRewardsWithBodyWithResponse", conf.CircuitCreateCustomRewardsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateCustomRewardsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateCustomRewardsWithResponse", conf.CircuitCreateCustomRewardsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateEventsubSubscriptionWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateEventsubSubscriptionWithBodyWithResponse", conf.CircuitCreateEventsubSubscriptionWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateEventsubSubscriptionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateEventsubSubscriptionWithResponse", conf.CircuitCreateEventsubSubscriptionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateExtensionSecretWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateExtensionSecretWithResponse", conf.CircuitCreateExtensionSecretWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateGuestStarSessionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateGuestStarSessionWithResponse", conf.CircuitCreateGuestStarSessionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreatePollWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreatePollWithBodyWithResponse", conf.CircuitCreatePollWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreatePollWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreatePollWithResponse", conf.CircuitCreatePollWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreatePredictionWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreatePredictionWithBodyWithResponse", conf.CircuitCreatePredictionWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreatePredictionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreatePredictionWithResponse", conf.CircuitCreatePredictionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateStreamMarkerWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateStreamMarkerWithBodyWithResponse", conf.CircuitCreateStreamMarkerWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCreateStreamMarkerWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CreateStreamMarkerWithResponse", conf.CircuitCreateStreamMarkerWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteChannelStreamScheduleSegmentWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteChannelStreamScheduleSegmentWithResponse", conf.CircuitDeleteChannelStreamScheduleSegmentWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteChatMessagesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteChatMessagesWithResponse", conf.CircuitDeleteChatMessagesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteConduitWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteConduitWithResponse", conf.CircuitDeleteConduitWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteCustomRewardWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteCustomRewardWithResponse", conf.CircuitDeleteCustomRewardWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteEventsubSubscriptionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteEventsubSubscriptionWithResponse", conf.CircuitDeleteEventsubSubscriptionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteGuestStarInviteWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteGuestStarInviteWithResponse", conf.CircuitDeleteGuestStarInviteWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteGuestStarSlotWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteGuestStarSlotWithResponse", conf.CircuitDeleteGuestStarSlotWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitDeleteVideosWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.DeleteVideosWithResponse", conf.CircuitDeleteVideosWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitEndGuestStarSessionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.EndGuestStarSessionWithResponse", conf.CircuitEndGuestStarSessionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitEndPollWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.EndPollWithBodyWithResponse", conf.CircuitEndPollWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitEndPollWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.EndPollWithResponse", conf.CircuitEndPollWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitEndPredictionWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.EndPredictionWithBodyWithResponse", conf.CircuitEndPredictionWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitEndPredictionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.EndPredictionWithResponse", conf.CircuitEndPredictionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetAdScheduleWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetAdScheduleWithResponse", conf.CircuitGetAdScheduleWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetAllStreamTagsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetAllStreamTagsWithResponse", conf.CircuitGetAllStreamTagsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetAutomodSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetAutomodSettingsWithResponse", conf.CircuitGetAutomodSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetBannedUsersWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetBannedUsersWithResponse", conf.CircuitGetBannedUsersWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetBitsLeaderboardWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetBitsLeaderboardWithResponse", conf.CircuitGetBitsLeaderboardWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetBlockedTermsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetBlockedTermsWithResponse", conf.CircuitGetBlockedTermsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetBroadcasterSubscriptionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetBroadcasterSubscriptionsWithResponse", conf.CircuitGetBroadcasterSubscriptionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelChatBadgesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelChatBadgesWithResponse", conf.CircuitGetChannelChatBadgesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelEditorsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelEditorsWithResponse", conf.CircuitGetChannelEditorsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelEmotesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelEmotesWithResponse", conf.CircuitGetChannelEmotesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelFollowersWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelFollowersWithResponse", conf.CircuitGetChannelFollowersWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelGuestStarSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelGuestStarSettingsWithResponse", conf.CircuitGetChannelGuestStarSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelIcalendarWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelIcalendarWithResponse", conf.CircuitGetChannelIcalendarWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelInformationWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelInformationWithResponse", conf.CircuitGetChannelInformationWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelStreamScheduleWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelStreamScheduleWithResponse", conf.CircuitGetChannelStreamScheduleWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChannelTeamsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChannelTeamsWithResponse", conf.CircuitGetChannelTeamsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCharityCampaignDonationsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCharityCampaignDonationsWithResponse", conf.CircuitGetCharityCampaignDonationsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCharityCampaignWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCharityCampaignWithResponse", conf.CircuitGetCharityCampaignWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChatSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChatSettingsWithResponse", conf.CircuitGetChatSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetChattersWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetChattersWithResponse", conf.CircuitGetChattersWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCheermotesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCheermotesWithResponse", conf.CircuitGetCheermotesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetClipsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetClipsWithResponse", conf.CircuitGetClipsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetConduitShardsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetConduitShardsWithResponse", conf.CircuitGetConduitShardsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetConduitsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetConduitsWithResponse", conf.CircuitGetConduitsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetContentClassificationLabelsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetContentClassificationLabelsWithResponse", conf.CircuitGetContentClassificationLabelsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCreatorGoalsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCreatorGoalsWithResponse", conf.CircuitGetCreatorGoalsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCustomRewardRedemptionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCustomRewardRedemptionWithResponse", conf.CircuitGetCustomRewardRedemptionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCustomRewardWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCustomRewardWithResponse", conf.CircuitGetCustomRewardWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetDropsEntitlementsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetDropsEntitlementsWithResponse", conf.CircuitGetDropsEntitlementsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetEmoteSetsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetEmoteSetsWithResponse", conf.CircuitGetEmoteSetsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetEventsubSubscriptionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetEventsubSubscriptionsWithResponse", conf.CircuitGetEventsubSubscriptionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionAnalyticsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionAnalyticsWithResponse", conf.CircuitGetExtensionAnalyticsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionBitsProductsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionBitsProductsWithResponse", conf.CircuitGetExtensionBitsProductsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionConfigurationSegmentWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionConfigurationSegmentWithResponse", conf.CircuitGetExtensionConfigurationSegmentWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionLiveChannelsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionLiveChannelsWithResponse", conf.CircuitGetExtensionLiveChannelsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionSecretsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionSecretsWithResponse", conf.CircuitGetExtensionSecretsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionTransactionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionTransactionsWithResponse", conf.CircuitGetExtensionTransactionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetExtensionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetExtensionsWithResponse", conf.CircuitGetExtensionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetFollowedChannelsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetFollowedChannelsWithResponse", conf.CircuitGetFollowedChannelsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetFollowedStreamsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetFollowedStreamsWithResponse", conf.CircuitGetFollowedStreamsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetGameAnalyticsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetGameAnalyticsWithResponse", conf.CircuitGetGameAnalyticsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetGamesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetGamesWithResponse", conf.CircuitGetGamesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetGlobalChatBadgesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetGlobalChatBadgesWithResponse", conf.CircuitGetGlobalChatBadgesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetGlobalEmotesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetGlobalEmotesWithResponse", conf.CircuitGetGlobalEmotesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetGuestStarInvitesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetGuestStarInvitesWithResponse", conf.CircuitGetGuestStarInvitesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetGuestStarSessionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetGuestStarSessionWithResponse", conf.CircuitGetGuestStarSessionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetHypeTrainEventsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetHypeTrainEventsWithResponse", conf.CircuitGetHypeTrainEventsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetModeratedChannelsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetModeratedChannelsWithResponse", conf.CircuitGetModeratedChannelsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetModeratorsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetModeratorsWithResponse", conf.CircuitGetModeratorsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetPollsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetPollsWithResponse", conf.CircuitGetPollsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetPredictionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetPredictionsWithResponse", conf.CircuitGetPredictionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetReleasedExtensionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetReleasedExtensionsWithResponse", conf.CircuitGetReleasedExtensionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetSharedChatSessionWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetSharedChatSessionWithResponse", conf.CircuitGetSharedChatSessionWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetShieldModeStatusWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetShieldModeStatusWithResponse", conf.CircuitGetShieldModeStatusWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetStreamKeyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetStreamKeyWithResponse", conf.CircuitGetStreamKeyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetStreamMarkersWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetStreamMarkersWithResponse", conf.CircuitGetStreamMarkersWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetStreamTagsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetStreamTagsWithResponse", conf.CircuitGetStreamTagsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetStreamsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetStreamsWithResponse", conf.CircuitGetStreamsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetTeamsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetTeamsWithResponse", conf.CircuitGetTeamsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetTopGamesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetTopGamesWithResponse", conf.CircuitGetTopGamesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUnbanRequestsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUnbanRequestsWithResponse", conf.CircuitGetUnbanRequestsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUserActiveExtensionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUserActiveExtensionsWithResponse", conf.CircuitGetUserActiveExtensionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUserBlockListWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUserBlockListWithResponse", conf.CircuitGetUserBlockListWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUserChatColorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUserChatColorWithResponse", conf.CircuitGetUserChatColorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUserEmotesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUserEmotesWithResponse", conf.CircuitGetUserEmotesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUserExtensionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUserExtensionsWithResponse", conf.CircuitGetUserExtensionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUsersWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUsersWithResponse", conf.CircuitGetUsersWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetVideosWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetVideosWithResponse", conf.CircuitGetVideosWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetVipsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetVipsWithResponse", conf.CircuitGetVipsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitManageHeldAutomodMessagesWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.ManageHeldAutomodMessagesWithBodyWithResponse", conf.CircuitManageHeldAutomodMessagesWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitManageHeldAutomodMessagesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.ManageHeldAutomodMessagesWithResponse", conf.CircuitManageHeldAutomodMessagesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitModifyChannelInformationWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.ModifyChannelInformationWithBodyWithResponse", conf.CircuitModifyChannelInformationWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitModifyChannelInformationWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.ModifyChannelInformationWithResponse", conf.CircuitModifyChannelInformationWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitRemoveBlockedTermWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.RemoveBlockedTermWithResponse", conf.CircuitRemoveBlockedTermWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitRemoveChannelModeratorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.RemoveChannelModeratorWithResponse", conf.CircuitRemoveChannelModeratorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitRemoveChannelVipWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.RemoveChannelVipWithResponse", conf.CircuitRemoveChannelVipWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitResolveUnbanRequestsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.ResolveUnbanRequestsWithResponse", conf.CircuitResolveUnbanRequestsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSearchCategoriesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SearchCategoriesWithResponse", conf.CircuitSearchCategoriesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSearchChannelsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SearchChannelsWithResponse", conf.CircuitSearchChannelsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendAShoutoutWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendAShoutoutWithResponse", conf.CircuitSendAShoutoutWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendChatAnnouncementWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendChatAnnouncementWithBodyWithResponse", conf.CircuitSendChatAnnouncementWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendChatAnnouncementWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendChatAnnouncementWithResponse", conf.CircuitSendChatAnnouncementWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendChatMessageWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendChatMessageWithBodyWithResponse", conf.CircuitSendChatMessageWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendChatMessageWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendChatMessageWithResponse", conf.CircuitSendChatMessageWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendExtensionChatMessageWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendExtensionChatMessageWithBodyWithResponse", conf.CircuitSendExtensionChatMessageWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendExtensionChatMessageWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendExtensionChatMessageWithResponse", conf.CircuitSendExtensionChatMessageWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendExtensionPubsubMessageWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendExtensionPubsubMessageWithBodyWithResponse", conf.CircuitSendExtensionPubsubMessageWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendExtensionPubsubMessageWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendExtensionPubsubMessageWithResponse", conf.CircuitSendExtensionPubsubMessageWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendGuestStarInviteWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendGuestStarInviteWithResponse", conf.CircuitSendGuestStarInviteWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendWhisperWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendWhisperWithBodyWithResponse", conf.CircuitSendWhisperWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSendWhisperWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SendWhisperWithResponse", conf.CircuitSendWhisperWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSetExtensionConfigurationSegmentWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SetExtensionConfigurationSegmentWithBodyWithResponse", conf.CircuitSetExtensionConfigurationSegmentWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSetExtensionConfigurationSegmentWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SetExtensionConfigurationSegmentWithResponse", conf.CircuitSetExtensionConfigurationSegmentWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSetExtensionRequiredConfigurationWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SetExtensionRequiredConfigurationWithBodyWithResponse", conf.CircuitSetExtensionRequiredConfigurationWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSetExtensionRequiredConfigurationWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SetExtensionRequiredConfigurationWithResponse", conf.CircuitSetExtensionRequiredConfigurationWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitSnoozeNextAdWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.SnoozeNextAdWithResponse", conf.CircuitSnoozeNextAdWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitStartARaidWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.StartARaidWithResponse", conf.CircuitStartARaidWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitStartCommercialWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.StartCommercialWithBodyWithResponse", conf.CircuitStartCommercialWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitStartCommercialWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.StartCommercialWithResponse", conf.CircuitStartCommercialWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUnbanUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UnbanUserWithResponse", conf.CircuitUnbanUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUnblockUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UnblockUserWithResponse", conf.CircuitUnblockUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateAutomodSettingsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateAutomodSettingsWithBodyWithResponse", conf.CircuitUpdateAutomodSettingsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateAutomodSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateAutomodSettingsWithResponse", conf.CircuitUpdateAutomodSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChannelGuestStarSettingsWithBodyWithResponse", conf.CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChannelGuestStarSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChannelGuestStarSettingsWithResponse", conf.CircuitUpdateChannelGuestStarSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChannelStreamScheduleSegmentWithBodyWithResponse", conf.CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChannelStreamScheduleSegmentWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChannelStreamScheduleSegmentWithResponse", conf.CircuitUpdateChannelStreamScheduleSegmentWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChannelStreamScheduleWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChannelStreamScheduleWithResponse", conf.CircuitUpdateChannelStreamScheduleWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChatSettingsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChatSettingsWithBodyWithResponse", conf.CircuitUpdateChatSettingsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateChatSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateChatSettingsWithResponse", conf.CircuitUpdateChatSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateConduitShardsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateConduitShardsWithBodyWithResponse", conf.CircuitUpdateConduitShardsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateConduitShardsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateConduitShardsWithResponse", conf.CircuitUpdateConduitShardsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateConduitsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateConduitsWithBodyWithResponse", conf.CircuitUpdateConduitsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateConduitsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateConduitsWithResponse", conf.CircuitUpdateConduitsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateCustomRewardWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateCustomRewardWithBodyWithResponse", conf.CircuitUpdateCustomRewardWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateCustomRewardWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateCustomRewardWithResponse", conf.CircuitUpdateCustomRewardWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateDropsEntitlementsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateDropsEntitlementsWithBodyWithResponse", conf.CircuitUpdateDropsEntitlementsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateDropsEntitlementsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateDropsEntitlementsWithResponse", conf.CircuitUpdateDropsEntitlementsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateExtensionBitsProductWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateExtensionBitsProductWithBodyWithResponse", conf.CircuitUpdateExtensionBitsProductWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateExtensionBitsProductWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateExtensionBitsProductWithResponse", conf.CircuitUpdateExtensionBitsProductWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateGuestStarSlotSettingsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateGuestStarSlotSettingsWithResponse", conf.CircuitUpdateGuestStarSlotSettingsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateGuestStarSlotWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateGuestStarSlotWithResponse", conf.CircuitUpdateGuestStarSlotWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateRedemptionStatusWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateRedemptionStatusWithBodyWithResponse", conf.CircuitUpdateRedemptionStatusWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateRedemptionStatusWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateRedemptionStatusWithResponse", conf.CircuitUpdateRedemptionStatusWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateShieldModeStatusWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateShieldModeStatusWithBodyWithResponse", conf.CircuitUpdateShieldModeStatusWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateShieldModeStatusWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateShieldModeStatusWithResponse", conf.CircuitUpdateShieldModeStatusWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateUserChatColorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateUserChatColorWithResponse", conf.CircuitUpdateUserChatColorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateUserExtensionsWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateUserExtensionsWithBodyWithResponse", conf.CircuitUpdateUserExtensionsWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateUserExtensionsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateUserExtensionsWithResponse", conf.CircuitUpdateUserExtensionsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUpdateUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UpdateUserWithResponse", conf.CircuitUpdateUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitWarnChatUserWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.WarnChatUserWithBodyWithResponse", conf.CircuitWarnChatUserWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitWarnChatUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.WarnChatUserWithResponse", conf.CircuitWarnChatUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	return w, nil
}

// AddBlockedTermWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method AddBlockedTermWithBodyWithResponse with CircuitAddBlockedTermWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) AddBlockedTermWithBodyWithResponse(ctx context.Context, p1 *AddBlockedTermParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*AddBlockedTermHTTPResponse, error) {
	var r0 *AddBlockedTermHTTPResponse
	var skippedErr error

	err := w.CircuitAddBlockedTermWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.AddBlockedTermWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// AddBlockedTermWithResponse calls the embedded ClientWithResponsesInterface's method AddBlockedTermWithResponse with CircuitAddBlockedTermWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) AddBlockedTermWithResponse(ctx context.Context, p1 *AddBlockedTermParams, p2 AddBlockedTermBody, p3 ...RequestEditorFn) (*AddBlockedTermHTTPResponse, error) {
	var r0 *AddBlockedTermHTTPResponse
	var skippedErr error

	err := w.CircuitAddBlockedTermWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.AddBlockedTermWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// AddChannelModeratorWithResponse calls the embedded ClientWithResponsesInterface's method AddChannelModeratorWithResponse with CircuitAddChannelModeratorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) AddChannelModeratorWithResponse(ctx context.Context, p1 *AddChannelModeratorParams, p2 ...RequestEditorFn) (*AddChannelModeratorHTTPResponse, error) {
	var r0 *AddChannelModeratorHTTPResponse
	var skippedErr error

	err := w.CircuitAddChannelModeratorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.AddChannelModeratorWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// AddChannelVipWithResponse calls the embedded ClientWithResponsesInterface's method AddChannelVipWithResponse with CircuitAddChannelVipWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) AddChannelVipWithResponse(ctx context.Context, p1 *AddChannelVipParams, p2 ...RequestEditorFn) (*AddChannelVipHTTPResponse, error) {
	var r0 *AddChannelVipHTTPResponse
	var skippedErr error

	err := w.CircuitAddChannelVipWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.AddChannelVipWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// AssignGuestStarSlotWithResponse calls the embedded ClientWithResponsesInterface's method AssignGuestStarSlotWithResponse with CircuitAssignGuestStarSlotWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) AssignGuestStarSlotWithResponse(ctx context.Context, p1 *AssignGuestStarSlotParams, p2 ...RequestEditorFn) (*AssignGuestStarSlotHTTPResponse, error) {
	var r0 *AssignGuestStarSlotHTTPResponse
	var skippedErr error

	err := w.CircuitAssignGuestStarSlotWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.AssignGuestStarSlotWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// BanUserWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method BanUserWithBodyWithResponse with CircuitBanUserWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) BanUserWithBodyWithResponse(ctx context.Context, p1 *BanUserParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*BanUserHTTPResponse, error) {
	var r0 *BanUserHTTPResponse
	var skippedErr error

	err := w.CircuitBanUserWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.BanUserWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// BanUserWithResponse calls the embedded ClientWithResponsesInterface's method BanUserWithResponse with CircuitBanUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) BanUserWithResponse(ctx context.Context, p1 *BanUserParams, p2 BanUserBody, p3 ...RequestEditorFn) (*BanUserHTTPResponse, error) {
	var r0 *BanUserHTTPResponse
	var skippedErr error

	err := w.CircuitBanUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.BanUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// BlockUserWithResponse calls the embedded ClientWithResponsesInterface's method BlockUserWithResponse with CircuitBlockUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) BlockUserWithResponse(ctx context.Context, p1 *BlockUserParams, p2 ...RequestEditorFn) (*BlockUserHTTPResponse, error) {
	var r0 *BlockUserHTTPResponse
	var skippedErr error

	err := w.CircuitBlockUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.BlockUserWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CancelARaidWithResponse calls the embedded ClientWithResponsesInterface's method CancelARaidWithResponse with CircuitCancelARaidWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CancelARaidWithResponse(ctx context.Context, p1 *CancelARaidParams, p2 ...RequestEditorFn) (*CancelARaidHTTPResponse, error) {
	var r0 *CancelARaidHTTPResponse
	var skippedErr error

	err := w.CircuitCancelARaidWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CancelARaidWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CheckAutomodStatusWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CheckAutomodStatusWithBodyWithResponse with CircuitCheckAutomodStatusWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CheckAutomodStatusWithBodyWithResponse(ctx context.Context, p1 *CheckAutomodStatusParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*CheckAutomodStatusHTTPResponse, error) {
	var r0 *CheckAutomodStatusHTTPResponse
	var skippedErr error

	err := w.CircuitCheckAutomodStatusWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CheckAutomodStatusWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CheckAutomodStatusWithResponse calls the embedded ClientWithResponsesInterface's method CheckAutomodStatusWithResponse with CircuitCheckAutomodStatusWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CheckAutomodStatusWithResponse(ctx context.Context, p1 *CheckAutomodStatusParams, p2 CheckAutoModStatusBody, p3 ...RequestEditorFn) (*CheckAutomodStatusHTTPResponse, error) {
	var r0 *CheckAutomodStatusHTTPResponse
	var skippedErr error

	err := w.CircuitCheckAutomodStatusWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CheckAutomodStatusWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CheckUserSubscriptionWithResponse calls the embedded ClientWithResponsesInterface's method CheckUserSubscriptionWithResponse with CircuitCheckUserSubscriptionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CheckUserSubscriptionWithResponse(ctx context.Context, p1 *CheckUserSubscriptionParams, p2 ...RequestEditorFn) (*CheckUserSubscriptionHTTPResponse, error) {
	var r0 *CheckUserSubscriptionHTTPResponse
	var skippedErr error

	err := w.CircuitCheckUserSubscriptionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CheckUserSubscriptionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateChannelStreamScheduleSegmentWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreateChannelStreamScheduleSegmentWithBodyWithResponse with CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateChannelStreamScheduleSegmentWithBodyWithResponse(ctx context.Context, p1 *CreateChannelStreamScheduleSegmentParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*CreateChannelStreamScheduleSegmentHTTPResponse, error) {
	var r0 *CreateChannelStreamScheduleSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitCreateChannelStreamScheduleSegmentWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateChannelStreamScheduleSegmentWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateChannelStreamScheduleSegmentWithResponse calls the embedded ClientWithResponsesInterface's method CreateChannelStreamScheduleSegmentWithResponse with CircuitCreateChannelStreamScheduleSegmentWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateChannelStreamScheduleSegmentWithResponse(ctx context.Context, p1 *CreateChannelStreamScheduleSegmentParams, p2 CreateChannelStreamScheduleSegmentBody, p3 ...RequestEditorFn) (*CreateChannelStreamScheduleSegmentHTTPResponse, error) {
	var r0 *CreateChannelStreamScheduleSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitCreateChannelStreamScheduleSegmentWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateChannelStreamScheduleSegmentWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateClipWithResponse calls the embedded ClientWithResponsesInterface's method CreateClipWithResponse with CircuitCreateClipWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateClipWithResponse(ctx context.Context, p1 *CreateClipParams, p2 ...RequestEditorFn) (*CreateClipHTTPResponse, error) {
	var r0 *CreateClipHTTPResponse
	var skippedErr error

	err := w.CircuitCreateClipWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateClipWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateConduitsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreateConduitsWithBodyWithResponse with CircuitCreateConduitsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateConduitsWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*CreateConduitsHTTPResponse, error) {
	var r0 *CreateConduitsHTTPResponse
	var skippedErr error

	err := w.CircuitCreateConduitsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateConduitsWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateConduitsWithResponse calls the embedded ClientWithResponsesInterface's method CreateConduitsWithResponse with CircuitCreateConduitsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateConduitsWithResponse(ctx context.Context, p1 CreateConduitsBody, p2 ...RequestEditorFn) (*CreateConduitsHTTPResponse, error) {
	var r0 *CreateConduitsHTTPResponse
	var skippedErr error

	err := w.CircuitCreateConduitsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateConduitsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateCustomRewardsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreateCustomRewardsWithBodyWithResponse with CircuitCreateCustomRewardsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateCustomRewardsWithBodyWithResponse(ctx context.Context, p1 *CreateCustomRewardsParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*CreateCustomRewardsHTTPResponse, error) {
	var r0 *CreateCustomRewardsHTTPResponse
	var skippedErr error

	err := w.CircuitCreateCustomRewardsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateCustomRewardsWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateCustomRewardsWithResponse calls the embedded ClientWithResponsesInterface's method CreateCustomRewardsWithResponse with CircuitCreateCustomRewardsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateCustomRewardsWithResponse(ctx context.Context, p1 *CreateCustomRewardsParams, p2 CreateCustomRewardsBody, p3 ...RequestEditorFn) (*CreateCustomRewardsHTTPResponse, error) {
	var r0 *CreateCustomRewardsHTTPResponse
	var skippedErr error

	err := w.CircuitCreateCustomRewardsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateCustomRewardsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateEventsubSubscriptionWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreateEventsubSubscriptionWithBodyWithResponse with CircuitCreateEventsubSubscriptionWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateEventsubSubscriptionWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*CreateEventsubSubscriptionHTTPResponse, error) {
	var r0 *CreateEventsubSubscriptionHTTPResponse
	var skippedErr error

	err := w.CircuitCreateEventsubSubscriptionWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateEventsubSubscriptionWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateEventsubSubscriptionWithResponse calls the embedded ClientWithResponsesInterface's method CreateEventsubSubscriptionWithResponse with CircuitCreateEventsubSubscriptionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateEventsubSubscriptionWithResponse(ctx context.Context, p1 CreateEventSubSubscriptionBody, p2 ...RequestEditorFn) (*CreateEventsubSubscriptionHTTPResponse, error) {
	var r0 *CreateEventsubSubscriptionHTTPResponse
	var skippedErr error

	err := w.CircuitCreateEventsubSubscriptionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateEventsubSubscriptionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateExtensionSecretWithResponse calls the embedded ClientWithResponsesInterface's method CreateExtensionSecretWithResponse with CircuitCreateExtensionSecretWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateExtensionSecretWithResponse(ctx context.Context, p1 *CreateExtensionSecretParams, p2 ...RequestEditorFn) (*CreateExtensionSecretHTTPResponse, error) {
	var r0 *CreateExtensionSecretHTTPResponse
	var skippedErr error

	err := w.CircuitCreateExtensionSecretWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateExtensionSecretWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateGuestStarSessionWithResponse calls the embedded ClientWithResponsesInterface's method CreateGuestStarSessionWithResponse with CircuitCreateGuestStarSessionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateGuestStarSessionWithResponse(ctx context.Context, p1 *CreateGuestStarSessionParams, p2 ...RequestEditorFn) (*CreateGuestStarSessionHTTPResponse, error) {
	var r0 *CreateGuestStarSessionHTTPResponse
	var skippedErr error

	err := w.CircuitCreateGuestStarSessionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateGuestStarSessionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreatePollWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreatePollWithBodyWithResponse with CircuitCreatePollWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreatePollWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*CreatePollHTTPResponse, error) {
	var r0 *CreatePollHTTPResponse
	var skippedErr error

	err := w.CircuitCreatePollWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreatePollWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreatePollWithResponse calls the embedded ClientWithResponsesInterface's method CreatePollWithResponse with CircuitCreatePollWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreatePollWithResponse(ctx context.Context, p1 CreatePollBody, p2 ...RequestEditorFn) (*CreatePollHTTPResponse, error) {
	var r0 *CreatePollHTTPResponse
	var skippedErr error

	err := w.CircuitCreatePollWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreatePollWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreatePredictionWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreatePredictionWithBodyWithResponse with CircuitCreatePredictionWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreatePredictionWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*CreatePredictionHTTPResponse, error) {
	var r0 *CreatePredictionHTTPResponse
	var skippedErr error

	err := w.CircuitCreatePredictionWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreatePredictionWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreatePredictionWithResponse calls the embedded ClientWithResponsesInterface's method CreatePredictionWithResponse with CircuitCreatePredictionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreatePredictionWithResponse(ctx context.Context, p1 CreatePredictionBody, p2 ...RequestEditorFn) (*CreatePredictionHTTPResponse, error) {
	var r0 *CreatePredictionHTTPResponse
	var skippedErr error

	err := w.CircuitCreatePredictionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreatePredictionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateStreamMarkerWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method CreateStreamMarkerWithBodyWithResponse with CircuitCreateStreamMarkerWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateStreamMarkerWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*CreateStreamMarkerHTTPResponse, error) {
	var r0 *CreateStreamMarkerHTTPResponse
	var skippedErr error

	err := w.CircuitCreateStreamMarkerWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateStreamMarkerWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CreateStreamMarkerWithResponse calls the embedded ClientWithResponsesInterface's method CreateStreamMarkerWithResponse with CircuitCreateStreamMarkerWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CreateStreamMarkerWithResponse(ctx context.Context, p1 CreateStreamMarkerBody, p2 ...RequestEditorFn) (*CreateStreamMarkerHTTPResponse, error) {
	var r0 *CreateStreamMarkerHTTPResponse
	var skippedErr error

	err := w.CircuitCreateStreamMarkerWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CreateStreamMarkerWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteChannelStreamScheduleSegmentWithResponse calls the embedded ClientWithResponsesInterface's method DeleteChannelStreamScheduleSegmentWithResponse with CircuitDeleteChannelStreamScheduleSegmentWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteChannelStreamScheduleSegmentWithResponse(ctx context.Context, p1 *DeleteChannelStreamScheduleSegmentParams, p2 ...RequestEditorFn) (*DeleteChannelStreamScheduleSegmentHTTPResponse, error) {
	var r0 *DeleteChannelStreamScheduleSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteChannelStreamScheduleSegmentWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteChannelStreamScheduleSegmentWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteChatMessagesWithResponse calls the embedded ClientWithResponsesInterface's method DeleteChatMessagesWithResponse with CircuitDeleteChatMessagesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteChatMessagesWithResponse(ctx context.Context, p1 *DeleteChatMessagesParams, p2 ...RequestEditorFn) (*DeleteChatMessagesHTTPResponse, error) {
	var r0 *DeleteChatMessagesHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteChatMessagesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteChatMessagesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteConduitWithResponse calls the embedded ClientWithResponsesInterface's method DeleteConduitWithResponse with CircuitDeleteConduitWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteConduitWithResponse(ctx context.Context, p1 *DeleteConduitParams, p2 ...RequestEditorFn) (*DeleteConduitHTTPResponse, error) {
	var r0 *DeleteConduitHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteConduitWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteConduitWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteCustomRewardWithResponse calls the embedded ClientWithResponsesInterface's method DeleteCustomRewardWithResponse with CircuitDeleteCustomRewardWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteCustomRewardWithResponse(ctx context.Context, p1 *DeleteCustomRewardParams, p2 ...RequestEditorFn) (*DeleteCustomRewardHTTPResponse, error) {
	var r0 *DeleteCustomRewardHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteCustomRewardWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteCustomRewardWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteEventsubSubscriptionWithResponse calls the embedded ClientWithResponsesInterface's method DeleteEventsubSubscriptionWithResponse with CircuitDeleteEventsubSubscriptionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteEventsubSubscriptionWithResponse(ctx context.Context, p1 *DeleteEventsubSubscriptionParams, p2 ...RequestEditorFn) (*DeleteEventsubSubscriptionHTTPResponse, error) {
	var r0 *DeleteEventsubSubscriptionHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteEventsubSubscriptionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteEventsubSubscriptionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteGuestStarInviteWithResponse calls the embedded ClientWithResponsesInterface's method DeleteGuestStarInviteWithResponse with CircuitDeleteGuestStarInviteWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteGuestStarInviteWithResponse(ctx context.Context, p1 *DeleteGuestStarInviteParams, p2 ...RequestEditorFn) (*DeleteGuestStarInviteHTTPResponse, error) {
	var r0 *DeleteGuestStarInviteHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteGuestStarInviteWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteGuestStarInviteWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteGuestStarSlotWithResponse calls the embedded ClientWithResponsesInterface's method DeleteGuestStarSlotWithResponse with CircuitDeleteGuestStarSlotWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteGuestStarSlotWithResponse(ctx context.Context, p1 *DeleteGuestStarSlotParams, p2 ...RequestEditorFn) (*DeleteGuestStarSlotHTTPResponse, error) {
	var r0 *DeleteGuestStarSlotHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteGuestStarSlotWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteGuestStarSlotWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// DeleteVideosWithResponse calls the embedded ClientWithResponsesInterface's method DeleteVideosWithResponse with CircuitDeleteVideosWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) DeleteVideosWithResponse(ctx context.Context, p1 *DeleteVideosParams, p2 ...RequestEditorFn) (*DeleteVideosHTTPResponse, error) {
	var r0 *DeleteVideosHTTPResponse
	var skippedErr error

	err := w.CircuitDeleteVideosWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.DeleteVideosWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// EndGuestStarSessionWithResponse calls the embedded ClientWithResponsesInterface's method EndGuestStarSessionWithResponse with CircuitEndGuestStarSessionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) EndGuestStarSessionWithResponse(ctx context.Context, p1 *EndGuestStarSessionParams, p2 ...RequestEditorFn) (*EndGuestStarSessionHTTPResponse, error) {
	var r0 *EndGuestStarSessionHTTPResponse
	var skippedErr error

	err := w.CircuitEndGuestStarSessionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.EndGuestStarSessionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// EndPollWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method EndPollWithBodyWithResponse with CircuitEndPollWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) EndPollWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*EndPollHTTPResponse, error) {
	var r0 *EndPollHTTPResponse
	var skippedErr error

	err := w.CircuitEndPollWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.EndPollWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// EndPollWithResponse calls the embedded ClientWithResponsesInterface's method EndPollWithResponse with CircuitEndPollWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) EndPollWithResponse(ctx context.Context, p1 EndPollBody, p2 ...RequestEditorFn) (*EndPollHTTPResponse, error) {
	var r0 *EndPollHTTPResponse
	var skippedErr error

	err := w.CircuitEndPollWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.EndPollWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// EndPredictionWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method EndPredictionWithBodyWithResponse with CircuitEndPredictionWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) EndPredictionWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*EndPredictionHTTPResponse, error) {
	var r0 *EndPredictionHTTPResponse
	var skippedErr error

	err := w.CircuitEndPredictionWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.EndPredictionWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// EndPredictionWithResponse calls the embedded ClientWithResponsesInterface's method EndPredictionWithResponse with CircuitEndPredictionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) EndPredictionWithResponse(ctx context.Context, p1 EndPredictionBody, p2 ...RequestEditorFn) (*EndPredictionHTTPResponse, error) {
	var r0 *EndPredictionHTTPResponse
	var skippedErr error

	err := w.CircuitEndPredictionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.EndPredictionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetAdScheduleWithResponse calls the embedded ClientWithResponsesInterface's method GetAdScheduleWithResponse with CircuitGetAdScheduleWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetAdScheduleWithResponse(ctx context.Context, p1 *GetAdScheduleParams, p2 ...RequestEditorFn) (*GetAdScheduleHTTPResponse, error) {
	var r0 *GetAdScheduleHTTPResponse
	var skippedErr error

	err := w.CircuitGetAdScheduleWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetAdScheduleWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetAllStreamTagsWithResponse calls the embedded ClientWithResponsesInterface's method GetAllStreamTagsWithResponse with CircuitGetAllStreamTagsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetAllStreamTagsWithResponse(ctx context.Context, p1 *GetAllStreamTagsParams, p2 ...RequestEditorFn) (*GetAllStreamTagsHTTPResponse, error) {
	var r0 *GetAllStreamTagsHTTPResponse
	var skippedErr error

	err := w.CircuitGetAllStreamTagsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetAllStreamTagsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetAutomodSettingsWithResponse calls the embedded ClientWithResponsesInterface's method GetAutomodSettingsWithResponse with CircuitGetAutomodSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetAutomodSettingsWithResponse(ctx context.Context, p1 *GetAutomodSettingsParams, p2 ...RequestEditorFn) (*GetAutomodSettingsHTTPResponse, error) {
	var r0 *GetAutomodSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitGetAutomodSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetAutomodSettingsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetBannedUsersWithResponse calls the embedded ClientWithResponsesInterface's method GetBannedUsersWithResponse with CircuitGetBannedUsersWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetBannedUsersWithResponse(ctx context.Context, p1 *GetBannedUsersParams, p2 ...RequestEditorFn) (*GetBannedUsersHTTPResponse, error) {
	var r0 *GetBannedUsersHTTPResponse
	var skippedErr error

	err := w.CircuitGetBannedUsersWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetBannedUsersWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetBitsLeaderboardWithResponse calls the embedded ClientWithResponsesInterface's method GetBitsLeaderboardWithResponse with CircuitGetBitsLeaderboardWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetBitsLeaderboardWithResponse(ctx context.Context, p1 *GetBitsLeaderboardParams, p2 ...RequestEditorFn) (*GetBitsLeaderboardHTTPResponse, error) {
	var r0 *GetBitsLeaderboardHTTPResponse
	var skippedErr error

	err := w.CircuitGetBitsLeaderboardWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetBitsLeaderboardWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetBlockedTermsWithResponse calls the embedded ClientWithResponsesInterface's method GetBlockedTermsWithResponse with CircuitGetBlockedTermsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetBlockedTermsWithResponse(ctx context.Context, p1 *GetBlockedTermsParams, p2 ...RequestEditorFn) (*GetBlockedTermsHTTPResponse, error) {
	var r0 *GetBlockedTermsHTTPResponse
	var skippedErr error

	err := w.CircuitGetBlockedTermsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetBlockedTermsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetBroadcasterSubscriptionsWithResponse calls the embedded ClientWithResponsesInterface's method GetBroadcasterSubscriptionsWithResponse with CircuitGetBroadcasterSubscriptionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetBroadcasterSubscriptionsWithResponse(ctx context.Context, p1 *GetBroadcasterSubscriptionsParams, p2 ...RequestEditorFn) (*GetBroadcasterSubscriptionsHTTPResponse, error) {
	var r0 *GetBroadcasterSubscriptionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetBroadcasterSubscriptionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetBroadcasterSubscriptionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelChatBadgesWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelChatBadgesWithResponse with CircuitGetChannelChatBadgesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelChatBadgesWithResponse(ctx context.Context, p1 *GetChannelChatBadgesParams, p2 ...RequestEditorFn) (*GetChannelChatBadgesHTTPResponse, error) {
	var r0 *GetChannelChatBadgesHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelChatBadgesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelChatBadgesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelEditorsWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelEditorsWithResponse with CircuitGetChannelEditorsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelEditorsWithResponse(ctx context.Context, p1 *GetChannelEditorsParams, p2 ...RequestEditorFn) (*GetChannelEditorsHTTPResponse, error) {
	var r0 *GetChannelEditorsHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelEditorsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelEditorsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelEmotesWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelEmotesWithResponse with CircuitGetChannelEmotesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelEmotesWithResponse(ctx context.Context, p1 *GetChannelEmotesParams, p2 ...RequestEditorFn) (*GetChannelEmotesHTTPResponse, error) {
	var r0 *GetChannelEmotesHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelEmotesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelEmotesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelFollowersWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelFollowersWithResponse with CircuitGetChannelFollowersWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelFollowersWithResponse(ctx context.Context, p1 *GetChannelFollowersParams, p2 ...RequestEditorFn) (*GetChannelFollowersHTTPResponse, error) {
	var r0 *GetChannelFollowersHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelFollowersWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelFollowersWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelGuestStarSettingsWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelGuestStarSettingsWithResponse with CircuitGetChannelGuestStarSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelGuestStarSettingsWithResponse(ctx context.Context, p1 *GetChannelGuestStarSettingsParams, p2 ...RequestEditorFn) (*GetChannelGuestStarSettingsHTTPResponse, error) {
	var r0 *GetChannelGuestStarSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelGuestStarSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelGuestStarSettingsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelIcalendarWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelIcalendarWithResponse with CircuitGetChannelIcalendarWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelIcalendarWithResponse(ctx context.Context, p1 *GetChannelIcalendarParams, p2 ...RequestEditorFn) (*GetChannelIcalendarHTTPResponse, error) {
	var r0 *GetChannelIcalendarHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelIcalendarWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelIcalendarWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelInformationWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelInformationWithResponse with CircuitGetChannelInformationWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelInformationWithResponse(ctx context.Context, p1 *GetChannelInformationParams, p2 ...RequestEditorFn) (*GetChannelInformationHTTPResponse, error) {
	var r0 *GetChannelInformationHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelInformationWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelInformationWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelStreamScheduleWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelStreamScheduleWithResponse with CircuitGetChannelStreamScheduleWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelStreamScheduleWithResponse(ctx context.Context, p1 *GetChannelStreamScheduleParams, p2 ...RequestEditorFn) (*GetChannelStreamScheduleHTTPResponse, error) {
	var r0 *GetChannelStreamScheduleHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelStreamScheduleWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelStreamScheduleWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChannelTeamsWithResponse calls the embedded ClientWithResponsesInterface's method GetChannelTeamsWithResponse with CircuitGetChannelTeamsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChannelTeamsWithResponse(ctx context.Context, p1 *GetChannelTeamsParams, p2 ...RequestEditorFn) (*GetChannelTeamsHTTPResponse, error) {
	var r0 *GetChannelTeamsHTTPResponse
	var skippedErr error

	err := w.CircuitGetChannelTeamsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChannelTeamsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCharityCampaignDonationsWithResponse calls the embedded ClientWithResponsesInterface's method GetCharityCampaignDonationsWithResponse with CircuitGetCharityCampaignDonationsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCharityCampaignDonationsWithResponse(ctx context.Context, p1 *GetCharityCampaignDonationsParams, p2 ...RequestEditorFn) (*GetCharityCampaignDonationsHTTPResponse, error) {
	var r0 *GetCharityCampaignDonationsHTTPResponse
	var skippedErr error

	err := w.CircuitGetCharityCampaignDonationsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCharityCampaignDonationsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCharityCampaignWithResponse calls the embedded ClientWithResponsesInterface's method GetCharityCampaignWithResponse with CircuitGetCharityCampaignWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCharityCampaignWithResponse(ctx context.Context, p1 *GetCharityCampaignParams, p2 ...RequestEditorFn) (*GetCharityCampaignHTTPResponse, error) {
	var r0 *GetCharityCampaignHTTPResponse
	var skippedErr error

	err := w.CircuitGetCharityCampaignWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCharityCampaignWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChatSettingsWithResponse calls the embedded ClientWithResponsesInterface's method GetChatSettingsWithResponse with CircuitGetChatSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChatSettingsWithResponse(ctx context.Context, p1 *GetChatSettingsParams, p2 ...RequestEditorFn) (*GetChatSettingsHTTPResponse, error) {
	var r0 *GetChatSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitGetChatSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChatSettingsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetChattersWithResponse calls the embedded ClientWithResponsesInterface's method GetChattersWithResponse with CircuitGetChattersWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetChattersWithResponse(ctx context.Context, p1 *GetChattersParams, p2 ...RequestEditorFn) (*GetChattersHTTPResponse, error) {
	var r0 *GetChattersHTTPResponse
	var skippedErr error

	err := w.CircuitGetChattersWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetChattersWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCheermotesWithResponse calls the embedded ClientWithResponsesInterface's method GetCheermotesWithResponse with CircuitGetCheermotesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCheermotesWithResponse(ctx context.Context, p1 *GetCheermotesParams, p2 ...RequestEditorFn) (*GetCheermotesHTTPResponse, error) {
	var r0 *GetCheermotesHTTPResponse
	var skippedErr error

	err := w.CircuitGetCheermotesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCheermotesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetClipsWithResponse calls the embedded ClientWithResponsesInterface's method GetClipsWithResponse with CircuitGetClipsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetClipsWithResponse(ctx context.Context, p1 *GetClipsParams, p2 ...RequestEditorFn) (*GetClipsHTTPResponse, error) {
	var r0 *GetClipsHTTPResponse
	var skippedErr error

	err := w.CircuitGetClipsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetClipsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetConduitShardsWithResponse calls the embedded ClientWithResponsesInterface's method GetConduitShardsWithResponse with CircuitGetConduitShardsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetConduitShardsWithResponse(ctx context.Context, p1 *GetConduitShardsParams, p2 ...RequestEditorFn) (*GetConduitShardsHTTPResponse, error) {
	var r0 *GetConduitShardsHTTPResponse
	var skippedErr error

	err := w.CircuitGetConduitShardsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetConduitShardsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetConduitsWithResponse calls the embedded ClientWithResponsesInterface's method GetConduitsWithResponse with CircuitGetConduitsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetConduitsWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*GetConduitsHTTPResponse, error) {
	var r0 *GetConduitsHTTPResponse
	var skippedErr error

	err := w.CircuitGetConduitsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetConduitsWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetContentClassificationLabelsWithResponse calls the embedded ClientWithResponsesInterface's method GetContentClassificationLabelsWithResponse with CircuitGetContentClassificationLabelsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetContentClassificationLabelsWithResponse(ctx context.Context, p1 *GetContentClassificationLabelsParams, p2 ...RequestEditorFn) (*GetContentClassificationLabelsHTTPResponse, error) {
	var r0 *GetContentClassificationLabelsHTTPResponse
	var skippedErr error

	err := w.CircuitGetContentClassificationLabelsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetContentClassificationLabelsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCreatorGoalsWithResponse calls the embedded ClientWithResponsesInterface's method GetCreatorGoalsWithResponse with CircuitGetCreatorGoalsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCreatorGoalsWithResponse(ctx context.Context, p1 *GetCreatorGoalsParams, p2 ...RequestEditorFn) (*GetCreatorGoalsHTTPResponse, error) {
	var r0 *GetCreatorGoalsHTTPResponse
	var skippedErr error

	err := w.CircuitGetCreatorGoalsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCreatorGoalsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCustomRewardRedemptionWithResponse calls the embedded ClientWithResponsesInterface's method GetCustomRewardRedemptionWithResponse with CircuitGetCustomRewardRedemptionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCustomRewardRedemptionWithResponse(ctx context.Context, p1 *GetCustomRewardRedemptionParams, p2 ...RequestEditorFn) (*GetCustomRewardRedemptionHTTPResponse, error) {
	var r0 *GetCustomRewardRedemptionHTTPResponse
	var skippedErr error

	err := w.CircuitGetCustomRewardRedemptionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCustomRewardRedemptionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCustomRewardWithResponse calls the embedded ClientWithResponsesInterface's method GetCustomRewardWithResponse with CircuitGetCustomRewardWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCustomRewardWithResponse(ctx context.Context, p1 *GetCustomRewardParams, p2 ...RequestEditorFn) (*GetCustomRewardHTTPResponse, error) {
	var r0 *GetCustomRewardHTTPResponse
	var skippedErr error

	err := w.CircuitGetCustomRewardWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCustomRewardWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetDropsEntitlementsWithResponse calls the embedded ClientWithResponsesInterface's method GetDropsEntitlementsWithResponse with CircuitGetDropsEntitlementsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetDropsEntitlementsWithResponse(ctx context.Context, p1 *GetDropsEntitlementsParams, p2 ...RequestEditorFn) (*GetDropsEntitlementsHTTPResponse, error) {
	var r0 *GetDropsEntitlementsHTTPResponse
	var skippedErr error

	err := w.CircuitGetDropsEntitlementsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetDropsEntitlementsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetEmoteSetsWithResponse calls the embedded ClientWithResponsesInterface's method GetEmoteSetsWithResponse with CircuitGetEmoteSetsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetEmoteSetsWithResponse(ctx context.Context, p1 *GetEmoteSetsParams, p2 ...RequestEditorFn) (*GetEmoteSetsHTTPResponse, error) {
	var r0 *GetEmoteSetsHTTPResponse
	var skippedErr error

	err := w.CircuitGetEmoteSetsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetEmoteSetsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetEventsubSubscriptionsWithResponse calls the embedded ClientWithResponsesInterface's method GetEventsubSubscriptionsWithResponse with CircuitGetEventsubSubscriptionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetEventsubSubscriptionsWithResponse(ctx context.Context, p1 *GetEventsubSubscriptionsParams, p2 ...RequestEditorFn) (*GetEventsubSubscriptionsHTTPResponse, error) {
	var r0 *GetEventsubSubscriptionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetEventsubSubscriptionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetEventsubSubscriptionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionAnalyticsWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionAnalyticsWithResponse with CircuitGetExtensionAnalyticsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionAnalyticsWithResponse(ctx context.Context, p1 *GetExtensionAnalyticsParams, p2 ...RequestEditorFn) (*GetExtensionAnalyticsHTTPResponse, error) {
	var r0 *GetExtensionAnalyticsHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionAnalyticsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionAnalyticsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionBitsProductsWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionBitsProductsWithResponse with CircuitGetExtensionBitsProductsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionBitsProductsWithResponse(ctx context.Context, p1 *GetExtensionBitsProductsParams, p2 ...RequestEditorFn) (*GetExtensionBitsProductsHTTPResponse, error) {
	var r0 *GetExtensionBitsProductsHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionBitsProductsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionBitsProductsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionConfigurationSegmentWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionConfigurationSegmentWithResponse with CircuitGetExtensionConfigurationSegmentWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionConfigurationSegmentWithResponse(ctx context.Context, p1 *GetExtensionConfigurationSegmentParams, p2 ...RequestEditorFn) (*GetExtensionConfigurationSegmentHTTPResponse, error) {
	var r0 *GetExtensionConfigurationSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionConfigurationSegmentWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionConfigurationSegmentWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionLiveChannelsWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionLiveChannelsWithResponse with CircuitGetExtensionLiveChannelsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionLiveChannelsWithResponse(ctx context.Context, p1 *GetExtensionLiveChannelsParams, p2 ...RequestEditorFn) (*GetExtensionLiveChannelsHTTPResponse, error) {
	var r0 *GetExtensionLiveChannelsHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionLiveChannelsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionLiveChannelsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionSecretsWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionSecretsWithResponse with CircuitGetExtensionSecretsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionSecretsWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*GetExtensionSecretsHTTPResponse, error) {
	var r0 *GetExtensionSecretsHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionSecretsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionSecretsWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionTransactionsWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionTransactionsWithResponse with CircuitGetExtensionTransactionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionTransactionsWithResponse(ctx context.Context, p1 *GetExtensionTransactionsParams, p2 ...RequestEditorFn) (*GetExtensionTransactionsHTTPResponse, error) {
	var r0 *GetExtensionTransactionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionTransactionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionTransactionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetExtensionsWithResponse calls the embedded ClientWithResponsesInterface's method GetExtensionsWithResponse with CircuitGetExtensionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetExtensionsWithResponse(ctx context.Context, p1 *GetExtensionsParams, p2 ...RequestEditorFn) (*GetExtensionsHTTPResponse, error) {
	var r0 *GetExtensionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetExtensionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetExtensionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetFollowedChannelsWithResponse calls the embedded ClientWithResponsesInterface's method GetFollowedChannelsWithResponse with CircuitGetFollowedChannelsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetFollowedChannelsWithResponse(ctx context.Context, p1 *GetFollowedChannelsParams, p2 ...RequestEditorFn) (*GetFollowedChannelsHTTPResponse, error) {
	var r0 *GetFollowedChannelsHTTPResponse
	var skippedErr error

	err := w.CircuitGetFollowedChannelsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetFollowedChannelsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetFollowedStreamsWithResponse calls the embedded ClientWithResponsesInterface's method GetFollowedStreamsWithResponse with CircuitGetFollowedStreamsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetFollowedStreamsWithResponse(ctx context.Context, p1 *GetFollowedStreamsParams, p2 ...RequestEditorFn) (*GetFollowedStreamsHTTPResponse, error) {
	var r0 *GetFollowedStreamsHTTPResponse
	var skippedErr error

	err := w.CircuitGetFollowedStreamsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetFollowedStreamsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetGameAnalyticsWithResponse calls the embedded ClientWithResponsesInterface's method GetGameAnalyticsWithResponse with CircuitGetGameAnalyticsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetGameAnalyticsWithResponse(ctx context.Context, p1 *GetGameAnalyticsParams, p2 ...RequestEditorFn) (*GetGameAnalyticsHTTPResponse, error) {
	var r0 *GetGameAnalyticsHTTPResponse
	var skippedErr error

	err := w.CircuitGetGameAnalyticsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetGameAnalyticsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetGamesWithResponse calls the embedded ClientWithResponsesInterface's method GetGamesWithResponse with CircuitGetGamesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetGamesWithResponse(ctx context.Context, p1 *GetGamesParams, p2 ...RequestEditorFn) (*GetGamesHTTPResponse, error) {
	var r0 *GetGamesHTTPResponse
	var skippedErr error

	err := w.CircuitGetGamesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetGamesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetGlobalChatBadgesWithResponse calls the embedded ClientWithResponsesInterface's method GetGlobalChatBadgesWithResponse with CircuitGetGlobalChatBadgesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetGlobalChatBadgesWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*GetGlobalChatBadgesHTTPResponse, error) {
	var r0 *GetGlobalChatBadgesHTTPResponse
	var skippedErr error

	err := w.CircuitGetGlobalChatBadgesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetGlobalChatBadgesWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetGlobalEmotesWithResponse calls the embedded ClientWithResponsesInterface's method GetGlobalEmotesWithResponse with CircuitGetGlobalEmotesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetGlobalEmotesWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*GetGlobalEmotesHTTPResponse, error) {
	var r0 *GetGlobalEmotesHTTPResponse
	var skippedErr error

	err := w.CircuitGetGlobalEmotesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetGlobalEmotesWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetGuestStarInvitesWithResponse calls the embedded ClientWithResponsesInterface's method GetGuestStarInvitesWithResponse with CircuitGetGuestStarInvitesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetGuestStarInvitesWithResponse(ctx context.Context, p1 *GetGuestStarInvitesParams, p2 ...RequestEditorFn) (*GetGuestStarInvitesHTTPResponse, error) {
	var r0 *GetGuestStarInvitesHTTPResponse
	var skippedErr error

	err := w.CircuitGetGuestStarInvitesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetGuestStarInvitesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetGuestStarSessionWithResponse calls the embedded ClientWithResponsesInterface's method GetGuestStarSessionWithResponse with CircuitGetGuestStarSessionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetGuestStarSessionWithResponse(ctx context.Context, p1 *GetGuestStarSessionParams, p2 ...RequestEditorFn) (*GetGuestStarSessionHTTPResponse, error) {
	var r0 *GetGuestStarSessionHTTPResponse
	var skippedErr error

	err := w.CircuitGetGuestStarSessionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetGuestStarSessionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetHypeTrainEventsWithResponse calls the embedded ClientWithResponsesInterface's method GetHypeTrainEventsWithResponse with CircuitGetHypeTrainEventsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetHypeTrainEventsWithResponse(ctx context.Context, p1 *GetHypeTrainEventsParams, p2 ...RequestEditorFn) (*GetHypeTrainEventsHTTPResponse, error) {
	var r0 *GetHypeTrainEventsHTTPResponse
	var skippedErr error

	err := w.CircuitGetHypeTrainEventsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetHypeTrainEventsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetModeratedChannelsWithResponse calls the embedded ClientWithResponsesInterface's method GetModeratedChannelsWithResponse with CircuitGetModeratedChannelsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetModeratedChannelsWithResponse(ctx context.Context, p1 *GetModeratedChannelsParams, p2 ...RequestEditorFn) (*GetModeratedChannelsHTTPResponse, error) {
	var r0 *GetModeratedChannelsHTTPResponse
	var skippedErr error

	err := w.CircuitGetModeratedChannelsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetModeratedChannelsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetModeratorsWithResponse calls the embedded ClientWithResponsesInterface's method GetModeratorsWithResponse with CircuitGetModeratorsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetModeratorsWithResponse(ctx context.Context, p1 *GetModeratorsParams, p2 ...RequestEditorFn) (*GetModeratorsHTTPResponse, error) {
	var r0 *GetModeratorsHTTPResponse
	var skippedErr error

	err := w.CircuitGetModeratorsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetModeratorsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetPollsWithResponse calls the embedded ClientWithResponsesInterface's method GetPollsWithResponse with CircuitGetPollsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetPollsWithResponse(ctx context.Context, p1 *GetPollsParams, p2 ...RequestEditorFn) (*GetPollsHTTPResponse, error) {
	var r0 *GetPollsHTTPResponse
	var skippedErr error

	err := w.CircuitGetPollsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetPollsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetPredictionsWithResponse calls the embedded ClientWithResponsesInterface's method GetPredictionsWithResponse with CircuitGetPredictionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetPredictionsWithResponse(ctx context.Context, p1 *GetPredictionsParams, p2 ...RequestEditorFn) (*GetPredictionsHTTPResponse, error) {
	var r0 *GetPredictionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetPredictionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetPredictionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetReleasedExtensionsWithResponse calls the embedded ClientWithResponsesInterface's method GetReleasedExtensionsWithResponse with CircuitGetReleasedExtensionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetReleasedExtensionsWithResponse(ctx context.Context, p1 *GetReleasedExtensionsParams, p2 ...RequestEditorFn) (*GetReleasedExtensionsHTTPResponse, error) {
	var r0 *GetReleasedExtensionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetReleasedExtensionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetReleasedExtensionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetSharedChatSessionWithResponse calls the embedded ClientWithResponsesInterface's method GetSharedChatSessionWithResponse with CircuitGetSharedChatSessionWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetSharedChatSessionWithResponse(ctx context.Context, p1 *GetSharedChatSessionParams, p2 ...RequestEditorFn) (*GetSharedChatSessionHTTPResponse, error) {
	var r0 *GetSharedChatSessionHTTPResponse
	var skippedErr error

	err := w.CircuitGetSharedChatSessionWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetSharedChatSessionWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetShieldModeStatusWithResponse calls the embedded ClientWithResponsesInterface's method GetShieldModeStatusWithResponse with CircuitGetShieldModeStatusWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetShieldModeStatusWithResponse(ctx context.Context, p1 *GetShieldModeStatusParams, p2 ...RequestEditorFn) (*GetShieldModeStatusHTTPResponse, error) {
	var r0 *GetShieldModeStatusHTTPResponse
	var skippedErr error

	err := w.CircuitGetShieldModeStatusWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetShieldModeStatusWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetStreamKeyWithResponse calls the embedded ClientWithResponsesInterface's method GetStreamKeyWithResponse with CircuitGetStreamKeyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetStreamKeyWithResponse(ctx context.Context, p1 *GetStreamKeyParams, p2 ...RequestEditorFn) (*GetStreamKeyHTTPResponse, error) {
	var r0 *GetStreamKeyHTTPResponse
	var skippedErr error

	err := w.CircuitGetStreamKeyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetStreamKeyWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetStreamMarkersWithResponse calls the embedded ClientWithResponsesInterface's method GetStreamMarkersWithResponse with CircuitGetStreamMarkersWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetStreamMarkersWithResponse(ctx context.Context, p1 *GetStreamMarkersParams, p2 ...RequestEditorFn) (*GetStreamMarkersHTTPResponse, error) {
	var r0 *GetStreamMarkersHTTPResponse
	var skippedErr error

	err := w.CircuitGetStreamMarkersWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetStreamMarkersWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetStreamTagsWithResponse calls the embedded ClientWithResponsesInterface's method GetStreamTagsWithResponse with CircuitGetStreamTagsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetStreamTagsWithResponse(ctx context.Context, p1 *GetStreamTagsParams, p2 ...RequestEditorFn) (*GetStreamTagsHTTPResponse, error) {
	var r0 *GetStreamTagsHTTPResponse
	var skippedErr error

	err := w.CircuitGetStreamTagsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetStreamTagsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetStreamsWithResponse calls the embedded ClientWithResponsesInterface's method GetStreamsWithResponse with CircuitGetStreamsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetStreamsWithResponse(ctx context.Context, p1 *GetStreamsParams, p2 ...RequestEditorFn) (*GetStreamsHTTPResponse, error) {
	var r0 *GetStreamsHTTPResponse
	var skippedErr error

	err := w.CircuitGetStreamsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetStreamsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetTeamsWithResponse calls the embedded ClientWithResponsesInterface's method GetTeamsWithResponse with CircuitGetTeamsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetTeamsWithResponse(ctx context.Context, p1 *GetTeamsParams, p2 ...RequestEditorFn) (*GetTeamsHTTPResponse, error) {
	var r0 *GetTeamsHTTPResponse
	var skippedErr error

	err := w.CircuitGetTeamsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetTeamsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetTopGamesWithResponse calls the embedded ClientWithResponsesInterface's method GetTopGamesWithResponse with CircuitGetTopGamesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetTopGamesWithResponse(ctx context.Context, p1 *GetTopGamesParams, p2 ...RequestEditorFn) (*GetTopGamesHTTPResponse, error) {
	var r0 *GetTopGamesHTTPResponse
	var skippedErr error

	err := w.CircuitGetTopGamesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetTopGamesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUnbanRequestsWithResponse calls the embedded ClientWithResponsesInterface's method GetUnbanRequestsWithResponse with CircuitGetUnbanRequestsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUnbanRequestsWithResponse(ctx context.Context, p1 *GetUnbanRequestsParams, p2 ...RequestEditorFn) (*GetUnbanRequestsHTTPResponse, error) {
	var r0 *GetUnbanRequestsHTTPResponse
	var skippedErr error

	err := w.CircuitGetUnbanRequestsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUnbanRequestsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUserActiveExtensionsWithResponse calls the embedded ClientWithResponsesInterface's method GetUserActiveExtensionsWithResponse with CircuitGetUserActiveExtensionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUserActiveExtensionsWithResponse(ctx context.Context, p1 *GetUserActiveExtensionsParams, p2 ...RequestEditorFn) (*GetUserActiveExtensionsHTTPResponse, error) {
	var r0 *GetUserActiveExtensionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetUserActiveExtensionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUserActiveExtensionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUserBlockListWithResponse calls the embedded ClientWithResponsesInterface's method GetUserBlockListWithResponse with CircuitGetUserBlockListWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUserBlockListWithResponse(ctx context.Context, p1 *GetUserBlockListParams, p2 ...RequestEditorFn) (*GetUserBlockListHTTPResponse, error) {
	var r0 *GetUserBlockListHTTPResponse
	var skippedErr error

	err := w.CircuitGetUserBlockListWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUserBlockListWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUserChatColorWithResponse calls the embedded ClientWithResponsesInterface's method GetUserChatColorWithResponse with CircuitGetUserChatColorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUserChatColorWithResponse(ctx context.Context, p1 *GetUserChatColorParams, p2 ...RequestEditorFn) (*GetUserChatColorHTTPResponse, error) {
	var r0 *GetUserChatColorHTTPResponse
	var skippedErr error

	err := w.CircuitGetUserChatColorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUserChatColorWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUserEmotesWithResponse calls the embedded ClientWithResponsesInterface's method GetUserEmotesWithResponse with CircuitGetUserEmotesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUserEmotesWithResponse(ctx context.Context, p1 *GetUserEmotesParams, p2 ...RequestEditorFn) (*GetUserEmotesHTTPResponse, error) {
	var r0 *GetUserEmotesHTTPResponse
	var skippedErr error

	err := w.CircuitGetUserEmotesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUserEmotesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUserExtensionsWithResponse calls the embedded ClientWithResponsesInterface's method GetUserExtensionsWithResponse with CircuitGetUserExtensionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUserExtensionsWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*GetUserExtensionsHTTPResponse, error) {
	var r0 *GetUserExtensionsHTTPResponse
	var skippedErr error

	err := w.CircuitGetUserExtensionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUserExtensionsWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUsersWithResponse calls the embedded ClientWithResponsesInterface's method GetUsersWithResponse with CircuitGetUsersWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUsersWithResponse(ctx context.Context, p1 *GetUsersParams, p2 ...RequestEditorFn) (*GetUsersHTTPResponse, error) {
	var r0 *GetUsersHTTPResponse
	var skippedErr error

	err := w.CircuitGetUsersWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUsersWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetVideosWithResponse calls the embedded ClientWithResponsesInterface's method GetVideosWithResponse with CircuitGetVideosWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetVideosWithResponse(ctx context.Context, p1 *GetVideosParams, p2 ...RequestEditorFn) (*GetVideosHTTPResponse, error) {
	var r0 *GetVideosHTTPResponse
	var skippedErr error

	err := w.CircuitGetVideosWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetVideosWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetVipsWithResponse calls the embedded ClientWithResponsesInterface's method GetVipsWithResponse with CircuitGetVipsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetVipsWithResponse(ctx context.Context, p1 *GetVipsParams, p2 ...RequestEditorFn) (*GetVipsHTTPResponse, error) {
	var r0 *GetVipsHTTPResponse
	var skippedErr error

	err := w.CircuitGetVipsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetVipsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// ManageHeldAutomodMessagesWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method ManageHeldAutomodMessagesWithBodyWithResponse with CircuitManageHeldAutomodMessagesWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) ManageHeldAutomodMessagesWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*ManageHeldAutomodMessagesHTTPResponse, error) {
	var r0 *ManageHeldAutomodMessagesHTTPResponse
	var skippedErr error

	err := w.CircuitManageHeldAutomodMessagesWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.ManageHeldAutomodMessagesWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// ManageHeldAutomodMessagesWithResponse calls the embedded ClientWithResponsesInterface's method ManageHeldAutomodMessagesWithResponse with CircuitManageHeldAutomodMessagesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) ManageHeldAutomodMessagesWithResponse(ctx context.Context, p1 ManageHeldAutoModMessagesBody, p2 ...RequestEditorFn) (*ManageHeldAutomodMessagesHTTPResponse, error) {
	var r0 *ManageHeldAutomodMessagesHTTPResponse
	var skippedErr error

	err := w.CircuitManageHeldAutomodMessagesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.ManageHeldAutomodMessagesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// ModifyChannelInformationWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method ModifyChannelInformationWithBodyWithResponse with CircuitModifyChannelInformationWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) ModifyChannelInformationWithBodyWithResponse(ctx context.Context, p1 *ModifyChannelInformationParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*ModifyChannelInformationHTTPResponse, error) {
	var r0 *ModifyChannelInformationHTTPResponse
	var skippedErr error

	err := w.CircuitModifyChannelInformationWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.ModifyChannelInformationWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// ModifyChannelInformationWithResponse calls the embedded ClientWithResponsesInterface's method ModifyChannelInformationWithResponse with CircuitModifyChannelInformationWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) ModifyChannelInformationWithResponse(ctx context.Context, p1 *ModifyChannelInformationParams, p2 ModifyChannelInformationBody, p3 ...RequestEditorFn) (*ModifyChannelInformationHTTPResponse, error) {
	var r0 *ModifyChannelInformationHTTPResponse
	var skippedErr error

	err := w.CircuitModifyChannelInformationWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.ModifyChannelInformationWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// RemoveBlockedTermWithResponse calls the embedded ClientWithResponsesInterface's method RemoveBlockedTermWithResponse with CircuitRemoveBlockedTermWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) RemoveBlockedTermWithResponse(ctx context.Context, p1 *RemoveBlockedTermParams, p2 ...RequestEditorFn) (*RemoveBlockedTermHTTPResponse, error) {
	var r0 *RemoveBlockedTermHTTPResponse
	var skippedErr error

	err := w.CircuitRemoveBlockedTermWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.RemoveBlockedTermWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// RemoveChannelModeratorWithResponse calls the embedded ClientWithResponsesInterface's method RemoveChannelModeratorWithResponse with CircuitRemoveChannelModeratorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) RemoveChannelModeratorWithResponse(ctx context.Context, p1 *RemoveChannelModeratorParams, p2 ...RequestEditorFn) (*RemoveChannelModeratorHTTPResponse, error) {
	var r0 *RemoveChannelModeratorHTTPResponse
	var skippedErr error

	err := w.CircuitRemoveChannelModeratorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.RemoveChannelModeratorWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// RemoveChannelVipWithResponse calls the embedded ClientWithResponsesInterface's method RemoveChannelVipWithResponse with CircuitRemoveChannelVipWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) RemoveChannelVipWithResponse(ctx context.Context, p1 *RemoveChannelVipParams, p2 ...RequestEditorFn) (*RemoveChannelVipHTTPResponse, error) {
	var r0 *RemoveChannelVipHTTPResponse
	var skippedErr error

	err := w.CircuitRemoveChannelVipWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.RemoveChannelVipWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// ResolveUnbanRequestsWithResponse calls the embedded ClientWithResponsesInterface's method ResolveUnbanRequestsWithResponse with CircuitResolveUnbanRequestsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) ResolveUnbanRequestsWithResponse(ctx context.Context, p1 *ResolveUnbanRequestsParams, p2 ...RequestEditorFn) (*ResolveUnbanRequestsHTTPResponse, error) {
	var r0 *ResolveUnbanRequestsHTTPResponse
	var skippedErr error

	err := w.CircuitResolveUnbanRequestsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.ResolveUnbanRequestsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SearchCategoriesWithResponse calls the embedded ClientWithResponsesInterface's method SearchCategoriesWithResponse with CircuitSearchCategoriesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SearchCategoriesWithResponse(ctx context.Context, p1 *SearchCategoriesParams, p2 ...RequestEditorFn) (*SearchCategoriesHTTPResponse, error) {
	var r0 *SearchCategoriesHTTPResponse
	var skippedErr error

	err := w.CircuitSearchCategoriesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SearchCategoriesWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SearchChannelsWithResponse calls the embedded ClientWithResponsesInterface's method SearchChannelsWithResponse with CircuitSearchChannelsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SearchChannelsWithResponse(ctx context.Context, p1 *SearchChannelsParams, p2 ...RequestEditorFn) (*SearchChannelsHTTPResponse, error) {
	var r0 *SearchChannelsHTTPResponse
	var skippedErr error

	err := w.CircuitSearchChannelsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SearchChannelsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendAShoutoutWithResponse calls the embedded ClientWithResponsesInterface's method SendAShoutoutWithResponse with CircuitSendAShoutoutWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendAShoutoutWithResponse(ctx context.Context, p1 *SendAShoutoutParams, p2 ...RequestEditorFn) (*SendAShoutoutHTTPResponse, error) {
	var r0 *SendAShoutoutHTTPResponse
	var skippedErr error

	err := w.CircuitSendAShoutoutWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendAShoutoutWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendChatAnnouncementWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SendChatAnnouncementWithBodyWithResponse with CircuitSendChatAnnouncementWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendChatAnnouncementWithBodyWithResponse(ctx context.Context, p1 *SendChatAnnouncementParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*SendChatAnnouncementHTTPResponse, error) {
	var r0 *SendChatAnnouncementHTTPResponse
	var skippedErr error

	err := w.CircuitSendChatAnnouncementWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendChatAnnouncementWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendChatAnnouncementWithResponse calls the embedded ClientWithResponsesInterface's method SendChatAnnouncementWithResponse with CircuitSendChatAnnouncementWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendChatAnnouncementWithResponse(ctx context.Context, p1 *SendChatAnnouncementParams, p2 SendChatAnnouncementBody, p3 ...RequestEditorFn) (*SendChatAnnouncementHTTPResponse, error) {
	var r0 *SendChatAnnouncementHTTPResponse
	var skippedErr error

	err := w.CircuitSendChatAnnouncementWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendChatAnnouncementWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendChatMessageWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SendChatMessageWithBodyWithResponse with CircuitSendChatMessageWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendChatMessageWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*SendChatMessageHTTPResponse, error) {
	var r0 *SendChatMessageHTTPResponse
	var skippedErr error

	err := w.CircuitSendChatMessageWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendChatMessageWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendChatMessageWithResponse calls the embedded ClientWithResponsesInterface's method SendChatMessageWithResponse with CircuitSendChatMessageWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendChatMessageWithResponse(ctx context.Context, p1 SendChatMessageBody, p2 ...RequestEditorFn) (*SendChatMessageHTTPResponse, error) {
	var r0 *SendChatMessageHTTPResponse
	var skippedErr error

	err := w.CircuitSendChatMessageWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendChatMessageWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendExtensionChatMessageWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SendExtensionChatMessageWithBodyWithResponse with CircuitSendExtensionChatMessageWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendExtensionChatMessageWithBodyWithResponse(ctx context.Context, p1 *SendExtensionChatMessageParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*SendExtensionChatMessageHTTPResponse, error) {
	var r0 *SendExtensionChatMessageHTTPResponse
	var skippedErr error

	err := w.CircuitSendExtensionChatMessageWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendExtensionChatMessageWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendExtensionChatMessageWithResponse calls the embedded ClientWithResponsesInterface's method SendExtensionChatMessageWithResponse with CircuitSendExtensionChatMessageWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendExtensionChatMessageWithResponse(ctx context.Context, p1 *SendExtensionChatMessageParams, p2 SendExtensionChatMessageBody, p3 ...RequestEditorFn) (*SendExtensionChatMessageHTTPResponse, error) {
	var r0 *SendExtensionChatMessageHTTPResponse
	var skippedErr error

	err := w.CircuitSendExtensionChatMessageWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendExtensionChatMessageWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendExtensionPubsubMessageWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SendExtensionPubsubMessageWithBodyWithResponse with CircuitSendExtensionPubsubMessageWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendExtensionPubsubMessageWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*SendExtensionPubsubMessageHTTPResponse, error) {
	var r0 *SendExtensionPubsubMessageHTTPResponse
	var skippedErr error

	err := w.CircuitSendExtensionPubsubMessageWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendExtensionPubsubMessageWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendExtensionPubsubMessageWithResponse calls the embedded ClientWithResponsesInterface's method SendExtensionPubsubMessageWithResponse with CircuitSendExtensionPubsubMessageWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendExtensionPubsubMessageWithResponse(ctx context.Context, p1 SendExtensionPubSubMessageBody, p2 ...RequestEditorFn) (*SendExtensionPubsubMessageHTTPResponse, error) {
	var r0 *SendExtensionPubsubMessageHTTPResponse
	var skippedErr error

	err := w.CircuitSendExtensionPubsubMessageWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendExtensionPubsubMessageWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendGuestStarInviteWithResponse calls the embedded ClientWithResponsesInterface's method SendGuestStarInviteWithResponse with CircuitSendGuestStarInviteWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendGuestStarInviteWithResponse(ctx context.Context, p1 *SendGuestStarInviteParams, p2 ...RequestEditorFn) (*SendGuestStarInviteHTTPResponse, error) {
	var r0 *SendGuestStarInviteHTTPResponse
	var skippedErr error

	err := w.CircuitSendGuestStarInviteWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendGuestStarInviteWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendWhisperWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SendWhisperWithBodyWithResponse with CircuitSendWhisperWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendWhisperWithBodyWithResponse(ctx context.Context, p1 *SendWhisperParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*SendWhisperHTTPResponse, error) {
	var r0 *SendWhisperHTTPResponse
	var skippedErr error

	err := w.CircuitSendWhisperWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendWhisperWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SendWhisperWithResponse calls the embedded ClientWithResponsesInterface's method SendWhisperWithResponse with CircuitSendWhisperWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SendWhisperWithResponse(ctx context.Context, p1 *SendWhisperParams, p2 SendWhisperBody, p3 ...RequestEditorFn) (*SendWhisperHTTPResponse, error) {
	var r0 *SendWhisperHTTPResponse
	var skippedErr error

	err := w.CircuitSendWhisperWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SendWhisperWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SetExtensionConfigurationSegmentWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SetExtensionConfigurationSegmentWithBodyWithResponse with CircuitSetExtensionConfigurationSegmentWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SetExtensionConfigurationSegmentWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*SetExtensionConfigurationSegmentHTTPResponse, error) {
	var r0 *SetExtensionConfigurationSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitSetExtensionConfigurationSegmentWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SetExtensionConfigurationSegmentWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SetExtensionConfigurationSegmentWithResponse calls the embedded ClientWithResponsesInterface's method SetExtensionConfigurationSegmentWithResponse with CircuitSetExtensionConfigurationSegmentWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SetExtensionConfigurationSegmentWithResponse(ctx context.Context, p1 SetExtensionConfigurationSegmentBody, p2 ...RequestEditorFn) (*SetExtensionConfigurationSegmentHTTPResponse, error) {
	var r0 *SetExtensionConfigurationSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitSetExtensionConfigurationSegmentWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SetExtensionConfigurationSegmentWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SetExtensionRequiredConfigurationWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method SetExtensionRequiredConfigurationWithBodyWithResponse with CircuitSetExtensionRequiredConfigurationWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SetExtensionRequiredConfigurationWithBodyWithResponse(ctx context.Context, p1 *SetExtensionRequiredConfigurationParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*SetExtensionRequiredConfigurationHTTPResponse, error) {
	var r0 *SetExtensionRequiredConfigurationHTTPResponse
	var skippedErr error

	err := w.CircuitSetExtensionRequiredConfigurationWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SetExtensionRequiredConfigurationWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SetExtensionRequiredConfigurationWithResponse calls the embedded ClientWithResponsesInterface's method SetExtensionRequiredConfigurationWithResponse with CircuitSetExtensionRequiredConfigurationWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SetExtensionRequiredConfigurationWithResponse(ctx context.Context, p1 *SetExtensionRequiredConfigurationParams, p2 SetExtensionRequiredConfigurationBody, p3 ...RequestEditorFn) (*SetExtensionRequiredConfigurationHTTPResponse, error) {
	var r0 *SetExtensionRequiredConfigurationHTTPResponse
	var skippedErr error

	err := w.CircuitSetExtensionRequiredConfigurationWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SetExtensionRequiredConfigurationWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// SnoozeNextAdWithResponse calls the embedded ClientWithResponsesInterface's method SnoozeNextAdWithResponse with CircuitSnoozeNextAdWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) SnoozeNextAdWithResponse(ctx context.Context, p1 *SnoozeNextAdParams, p2 ...RequestEditorFn) (*SnoozeNextAdHTTPResponse, error) {
	var r0 *SnoozeNextAdHTTPResponse
	var skippedErr error

	err := w.CircuitSnoozeNextAdWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.SnoozeNextAdWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// StartARaidWithResponse calls the embedded ClientWithResponsesInterface's method StartARaidWithResponse with CircuitStartARaidWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) StartARaidWithResponse(ctx context.Context, p1 *StartARaidParams, p2 ...RequestEditorFn) (*StartARaidHTTPResponse, error) {
	var r0 *StartARaidHTTPResponse
	var skippedErr error

	err := w.CircuitStartARaidWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.StartARaidWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// StartCommercialWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method StartCommercialWithBodyWithResponse with CircuitStartCommercialWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) StartCommercialWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*StartCommercialHTTPResponse, error) {
	var r0 *StartCommercialHTTPResponse
	var skippedErr error

	err := w.CircuitStartCommercialWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.StartCommercialWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// StartCommercialWithResponse calls the embedded ClientWithResponsesInterface's method StartCommercialWithResponse with CircuitStartCommercialWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) StartCommercialWithResponse(ctx context.Context, p1 StartCommercialBody, p2 ...RequestEditorFn) (*StartCommercialHTTPResponse, error) {
	var r0 *StartCommercialHTTPResponse
	var skippedErr error

	err := w.CircuitStartCommercialWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.StartCommercialWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UnbanUserWithResponse calls the embedded ClientWithResponsesInterface's method UnbanUserWithResponse with CircuitUnbanUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UnbanUserWithResponse(ctx context.Context, p1 *UnbanUserParams, p2 ...RequestEditorFn) (*UnbanUserHTTPResponse, error) {
	var r0 *UnbanUserHTTPResponse
	var skippedErr error

	err := w.CircuitUnbanUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UnbanUserWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UnblockUserWithResponse calls the embedded ClientWithResponsesInterface's method UnblockUserWithResponse with CircuitUnblockUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UnblockUserWithResponse(ctx context.Context, p1 *UnblockUserParams, p2 ...RequestEditorFn) (*UnblockUserHTTPResponse, error) {
	var r0 *UnblockUserHTTPResponse
	var skippedErr error

	err := w.CircuitUnblockUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UnblockUserWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateAutomodSettingsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateAutomodSettingsWithBodyWithResponse with CircuitUpdateAutomodSettingsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateAutomodSettingsWithBodyWithResponse(ctx context.Context, p1 *UpdateAutomodSettingsParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateAutomodSettingsHTTPResponse, error) {
	var r0 *UpdateAutomodSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateAutomodSettingsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateAutomodSettingsWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateAutomodSettingsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateAutomodSettingsWithResponse with CircuitUpdateAutomodSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateAutomodSettingsWithResponse(ctx context.Context, p1 *UpdateAutomodSettingsParams, p2 UpdateAutoModSettingsBody, p3 ...RequestEditorFn) (*UpdateAutomodSettingsHTTPResponse, error) {
	var r0 *UpdateAutomodSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateAutomodSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateAutomodSettingsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChannelGuestStarSettingsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChannelGuestStarSettingsWithBodyWithResponse with CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChannelGuestStarSettingsWithBodyWithResponse(ctx context.Context, p1 *UpdateChannelGuestStarSettingsParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateChannelGuestStarSettingsHTTPResponse, error) {
	var r0 *UpdateChannelGuestStarSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChannelGuestStarSettingsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChannelGuestStarSettingsWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChannelGuestStarSettingsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChannelGuestStarSettingsWithResponse with CircuitUpdateChannelGuestStarSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChannelGuestStarSettingsWithResponse(ctx context.Context, p1 *UpdateChannelGuestStarSettingsParams, p2 UpdateChannelGuestStarSettingsBody, p3 ...RequestEditorFn) (*UpdateChannelGuestStarSettingsHTTPResponse, error) {
	var r0 *UpdateChannelGuestStarSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChannelGuestStarSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChannelGuestStarSettingsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChannelStreamScheduleSegmentWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChannelStreamScheduleSegmentWithBodyWithResponse with CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChannelStreamScheduleSegmentWithBodyWithResponse(ctx context.Context, p1 *UpdateChannelStreamScheduleSegmentParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateChannelStreamScheduleSegmentHTTPResponse, error) {
	var r0 *UpdateChannelStreamScheduleSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChannelStreamScheduleSegmentWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChannelStreamScheduleSegmentWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChannelStreamScheduleSegmentWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChannelStreamScheduleSegmentWithResponse with CircuitUpdateChannelStreamScheduleSegmentWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChannelStreamScheduleSegmentWithResponse(ctx context.Context, p1 *UpdateChannelStreamScheduleSegmentParams, p2 UpdateChannelStreamScheduleSegmentBody, p3 ...RequestEditorFn) (*UpdateChannelStreamScheduleSegmentHTTPResponse, error) {
	var r0 *UpdateChannelStreamScheduleSegmentHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChannelStreamScheduleSegmentWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChannelStreamScheduleSegmentWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChannelStreamScheduleWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChannelStreamScheduleWithResponse with CircuitUpdateChannelStreamScheduleWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChannelStreamScheduleWithResponse(ctx context.Context, p1 *UpdateChannelStreamScheduleParams, p2 ...RequestEditorFn) (*UpdateChannelStreamScheduleHTTPResponse, error) {
	var r0 *UpdateChannelStreamScheduleHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChannelStreamScheduleWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChannelStreamScheduleWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChatSettingsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChatSettingsWithBodyWithResponse with CircuitUpdateChatSettingsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChatSettingsWithBodyWithResponse(ctx context.Context, p1 *UpdateChatSettingsParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateChatSettingsHTTPResponse, error) {
	var r0 *UpdateChatSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChatSettingsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChatSettingsWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateChatSettingsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateChatSettingsWithResponse with CircuitUpdateChatSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateChatSettingsWithResponse(ctx context.Context, p1 *UpdateChatSettingsParams, p2 UpdateChatSettingsBody, p3 ...RequestEditorFn) (*UpdateChatSettingsHTTPResponse, error) {
	var r0 *UpdateChatSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateChatSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateChatSettingsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateConduitShardsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateConduitShardsWithBodyWithResponse with CircuitUpdateConduitShardsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateConduitShardsWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*UpdateConduitShardsHTTPResponse, error) {
	var r0 *UpdateConduitShardsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateConduitShardsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateConduitShardsWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateConduitShardsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateConduitShardsWithResponse with CircuitUpdateConduitShardsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateConduitShardsWithResponse(ctx context.Context, p1 UpdateConduitShardsBody, p2 ...RequestEditorFn) (*UpdateConduitShardsHTTPResponse, error) {
	var r0 *UpdateConduitShardsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateConduitShardsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateConduitShardsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateConduitsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateConduitsWithBodyWithResponse with CircuitUpdateConduitsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateConduitsWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*UpdateConduitsHTTPResponse, error) {
	var r0 *UpdateConduitsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateConduitsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateConduitsWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateConduitsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateConduitsWithResponse with CircuitUpdateConduitsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateConduitsWithResponse(ctx context.Context, p1 UpdateConduitsBody, p2 ...RequestEditorFn) (*UpdateConduitsHTTPResponse, error) {
	var r0 *UpdateConduitsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateConduitsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateConduitsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateCustomRewardWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateCustomRewardWithBodyWithResponse with CircuitUpdateCustomRewardWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateCustomRewardWithBodyWithResponse(ctx context.Context, p1 *UpdateCustomRewardParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateCustomRewardHTTPResponse, error) {
	var r0 *UpdateCustomRewardHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateCustomRewardWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateCustomRewardWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateCustomRewardWithResponse calls the embedded ClientWithResponsesInterface's method UpdateCustomRewardWithResponse with CircuitUpdateCustomRewardWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateCustomRewardWithResponse(ctx context.Context, p1 *UpdateCustomRewardParams, p2 UpdateCustomRewardBody, p3 ...RequestEditorFn) (*UpdateCustomRewardHTTPResponse, error) {
	var r0 *UpdateCustomRewardHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateCustomRewardWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateCustomRewardWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateDropsEntitlementsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateDropsEntitlementsWithBodyWithResponse with CircuitUpdateDropsEntitlementsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateDropsEntitlementsWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*UpdateDropsEntitlementsHTTPResponse, error) {
	var r0 *UpdateDropsEntitlementsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateDropsEntitlementsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateDropsEntitlementsWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateDropsEntitlementsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateDropsEntitlementsWithResponse with CircuitUpdateDropsEntitlementsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateDropsEntitlementsWithResponse(ctx context.Context, p1 UpdateDropsEntitlementsBody, p2 ...RequestEditorFn) (*UpdateDropsEntitlementsHTTPResponse, error) {
	var r0 *UpdateDropsEntitlementsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateDropsEntitlementsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateDropsEntitlementsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateExtensionBitsProductWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateExtensionBitsProductWithBodyWithResponse with CircuitUpdateExtensionBitsProductWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateExtensionBitsProductWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*UpdateExtensionBitsProductHTTPResponse, error) {
	var r0 *UpdateExtensionBitsProductHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateExtensionBitsProductWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateExtensionBitsProductWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateExtensionBitsProductWithResponse calls the embedded ClientWithResponsesInterface's method UpdateExtensionBitsProductWithResponse with CircuitUpdateExtensionBitsProductWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateExtensionBitsProductWithResponse(ctx context.Context, p1 UpdateExtensionBitsProductBody, p2 ...RequestEditorFn) (*UpdateExtensionBitsProductHTTPResponse, error) {
	var r0 *UpdateExtensionBitsProductHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateExtensionBitsProductWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateExtensionBitsProductWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateGuestStarSlotSettingsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateGuestStarSlotSettingsWithResponse with CircuitUpdateGuestStarSlotSettingsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateGuestStarSlotSettingsWithResponse(ctx context.Context, p1 *UpdateGuestStarSlotSettingsParams, p2 ...RequestEditorFn) (*UpdateGuestStarSlotSettingsHTTPResponse, error) {
	var r0 *UpdateGuestStarSlotSettingsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateGuestStarSlotSettingsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateGuestStarSlotSettingsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateGuestStarSlotWithResponse calls the embedded ClientWithResponsesInterface's method UpdateGuestStarSlotWithResponse with CircuitUpdateGuestStarSlotWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateGuestStarSlotWithResponse(ctx context.Context, p1 *UpdateGuestStarSlotParams, p2 ...RequestEditorFn) (*UpdateGuestStarSlotHTTPResponse, error) {
	var r0 *UpdateGuestStarSlotHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateGuestStarSlotWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateGuestStarSlotWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateRedemptionStatusWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateRedemptionStatusWithBodyWithResponse with CircuitUpdateRedemptionStatusWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateRedemptionStatusWithBodyWithResponse(ctx context.Context, p1 *UpdateRedemptionStatusParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateRedemptionStatusHTTPResponse, error) {
	var r0 *UpdateRedemptionStatusHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateRedemptionStatusWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateRedemptionStatusWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateRedemptionStatusWithResponse calls the embedded ClientWithResponsesInterface's method UpdateRedemptionStatusWithResponse with CircuitUpdateRedemptionStatusWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateRedemptionStatusWithResponse(ctx context.Context, p1 *UpdateRedemptionStatusParams, p2 UpdateRedemptionStatusBody, p3 ...RequestEditorFn) (*UpdateRedemptionStatusHTTPResponse, error) {
	var r0 *UpdateRedemptionStatusHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateRedemptionStatusWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateRedemptionStatusWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateShieldModeStatusWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateShieldModeStatusWithBodyWithResponse with CircuitUpdateShieldModeStatusWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateShieldModeStatusWithBodyWithResponse(ctx context.Context, p1 *UpdateShieldModeStatusParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*UpdateShieldModeStatusHTTPResponse, error) {
	var r0 *UpdateShieldModeStatusHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateShieldModeStatusWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateShieldModeStatusWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateShieldModeStatusWithResponse calls the embedded ClientWithResponsesInterface's method UpdateShieldModeStatusWithResponse with CircuitUpdateShieldModeStatusWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateShieldModeStatusWithResponse(ctx context.Context, p1 *UpdateShieldModeStatusParams, p2 UpdateShieldModeStatusBody, p3 ...RequestEditorFn) (*UpdateShieldModeStatusHTTPResponse, error) {
	var r0 *UpdateShieldModeStatusHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateShieldModeStatusWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateShieldModeStatusWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateUserChatColorWithResponse calls the embedded ClientWithResponsesInterface's method UpdateUserChatColorWithResponse with CircuitUpdateUserChatColorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateUserChatColorWithResponse(ctx context.Context, p1 *UpdateUserChatColorParams, p2 ...RequestEditorFn) (*UpdateUserChatColorHTTPResponse, error) {
	var r0 *UpdateUserChatColorHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateUserChatColorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateUserChatColorWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateUserExtensionsWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method UpdateUserExtensionsWithBodyWithResponse with CircuitUpdateUserExtensionsWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateUserExtensionsWithBodyWithResponse(ctx context.Context, p1 string, p2 io.Reader, p3 ...RequestEditorFn) (*UpdateUserExtensionsHTTPResponse, error) {
	var r0 *UpdateUserExtensionsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateUserExtensionsWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateUserExtensionsWithBodyWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateUserExtensionsWithResponse calls the embedded ClientWithResponsesInterface's method UpdateUserExtensionsWithResponse with CircuitUpdateUserExtensionsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateUserExtensionsWithResponse(ctx context.Context, p1 UpdateUserExtensionsBody, p2 ...RequestEditorFn) (*UpdateUserExtensionsHTTPResponse, error) {
	var r0 *UpdateUserExtensionsHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateUserExtensionsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateUserExtensionsWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UpdateUserWithResponse calls the embedded ClientWithResponsesInterface's method UpdateUserWithResponse with CircuitUpdateUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UpdateUserWithResponse(ctx context.Context, p1 *UpdateUserParams, p2 ...RequestEditorFn) (*UpdateUserHTTPResponse, error) {
	var r0 *UpdateUserHTTPResponse
	var skippedErr error

	err := w.CircuitUpdateUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UpdateUserWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// WarnChatUserWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method WarnChatUserWithBodyWithResponse with CircuitWarnChatUserWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) WarnChatUserWithBodyWithResponse(ctx context.Context, p1 *WarnChatUserParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*WarnChatUserHTTPResponse, error) {
	var r0 *WarnChatUserHTTPResponse
	var skippedErr error

	err := w.CircuitWarnChatUserWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.WarnChatUserWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// WarnChatUserWithResponse calls the embedded ClientWithResponsesInterface's method WarnChatUserWithResponse with CircuitWarnChatUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) WarnChatUserWithResponse(ctx context.Context, p1 *WarnChatUserParams, p2 WarnChatUserBody, p3 ...RequestEditorFn) (*WarnChatUserHTTPResponse, error) {
	var r0 *WarnChatUserHTTPResponse
	var skippedErr error

	err := w.CircuitWarnChatUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.WarnChatUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

var _ ClientWithResponsesInterface = (*CircuitWrapperClientWithResponsesCircuit)(nil)
