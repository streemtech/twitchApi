// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	twitchApi "github.com/streemtech/twitchApi"
)

// Api is an autogenerated mock type for the ClientWithResponsesInterface type
type Api struct {
	mock.Mock
}

type Api_Expecter struct {
	mock *mock.Mock
}

func (_m *Api) EXPECT() *Api_Expecter {
	return &Api_Expecter{mock: &_m.Mock}
}

// AddBlockedTermWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) AddBlockedTermWithBodyWithResponse(ctx context.Context, params *twitchApi.AddBlockedTermParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.AddBlockedTermHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddBlockedTermWithBodyWithResponse")
	}

	var r0 *twitchApi.AddBlockedTermHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddBlockedTermParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.AddBlockedTermHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddBlockedTermParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.AddBlockedTermHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.AddBlockedTermHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.AddBlockedTermParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_AddBlockedTermWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlockedTermWithBodyWithResponse'
type Api_AddBlockedTermWithBodyWithResponse_Call struct {
	*mock.Call
}

// AddBlockedTermWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.AddBlockedTermParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) AddBlockedTermWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_AddBlockedTermWithBodyWithResponse_Call {
	return &Api_AddBlockedTermWithBodyWithResponse_Call{Call: _e.mock.On("AddBlockedTermWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_AddBlockedTermWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.AddBlockedTermParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_AddBlockedTermWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.AddBlockedTermParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_AddBlockedTermWithBodyWithResponse_Call) Return(_a0 *twitchApi.AddBlockedTermHTTPResponse, _a1 error) *Api_AddBlockedTermWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_AddBlockedTermWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.AddBlockedTermParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.AddBlockedTermHTTPResponse, error)) *Api_AddBlockedTermWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddBlockedTermWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) AddBlockedTermWithResponse(ctx context.Context, params *twitchApi.AddBlockedTermParams, body twitchApi.AddBlockedTermBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.AddBlockedTermHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddBlockedTermWithResponse")
	}

	var r0 *twitchApi.AddBlockedTermHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddBlockedTermParams, twitchApi.AddBlockedTermBody, ...twitchApi.RequestEditorFn) (*twitchApi.AddBlockedTermHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddBlockedTermParams, twitchApi.AddBlockedTermBody, ...twitchApi.RequestEditorFn) *twitchApi.AddBlockedTermHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.AddBlockedTermHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.AddBlockedTermParams, twitchApi.AddBlockedTermBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_AddBlockedTermWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlockedTermWithResponse'
type Api_AddBlockedTermWithResponse_Call struct {
	*mock.Call
}

// AddBlockedTermWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.AddBlockedTermParams
//   - body twitchApi.AddBlockedTermBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) AddBlockedTermWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_AddBlockedTermWithResponse_Call {
	return &Api_AddBlockedTermWithResponse_Call{Call: _e.mock.On("AddBlockedTermWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_AddBlockedTermWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.AddBlockedTermParams, body twitchApi.AddBlockedTermBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_AddBlockedTermWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.AddBlockedTermParams), args[2].(twitchApi.AddBlockedTermBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_AddBlockedTermWithResponse_Call) Return(_a0 *twitchApi.AddBlockedTermHTTPResponse, _a1 error) *Api_AddBlockedTermWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_AddBlockedTermWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.AddBlockedTermParams, twitchApi.AddBlockedTermBody, ...twitchApi.RequestEditorFn) (*twitchApi.AddBlockedTermHTTPResponse, error)) *Api_AddBlockedTermWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddChannelModeratorWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) AddChannelModeratorWithResponse(ctx context.Context, params *twitchApi.AddChannelModeratorParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.AddChannelModeratorHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddChannelModeratorWithResponse")
	}

	var r0 *twitchApi.AddChannelModeratorHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddChannelModeratorParams, ...twitchApi.RequestEditorFn) (*twitchApi.AddChannelModeratorHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddChannelModeratorParams, ...twitchApi.RequestEditorFn) *twitchApi.AddChannelModeratorHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.AddChannelModeratorHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.AddChannelModeratorParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_AddChannelModeratorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChannelModeratorWithResponse'
type Api_AddChannelModeratorWithResponse_Call struct {
	*mock.Call
}

// AddChannelModeratorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.AddChannelModeratorParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) AddChannelModeratorWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_AddChannelModeratorWithResponse_Call {
	return &Api_AddChannelModeratorWithResponse_Call{Call: _e.mock.On("AddChannelModeratorWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_AddChannelModeratorWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.AddChannelModeratorParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_AddChannelModeratorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.AddChannelModeratorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_AddChannelModeratorWithResponse_Call) Return(_a0 *twitchApi.AddChannelModeratorHTTPResponse, _a1 error) *Api_AddChannelModeratorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_AddChannelModeratorWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.AddChannelModeratorParams, ...twitchApi.RequestEditorFn) (*twitchApi.AddChannelModeratorHTTPResponse, error)) *Api_AddChannelModeratorWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddChannelVipWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) AddChannelVipWithResponse(ctx context.Context, params *twitchApi.AddChannelVipParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.AddChannelVipHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddChannelVipWithResponse")
	}

	var r0 *twitchApi.AddChannelVipHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddChannelVipParams, ...twitchApi.RequestEditorFn) (*twitchApi.AddChannelVipHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AddChannelVipParams, ...twitchApi.RequestEditorFn) *twitchApi.AddChannelVipHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.AddChannelVipHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.AddChannelVipParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_AddChannelVipWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChannelVipWithResponse'
type Api_AddChannelVipWithResponse_Call struct {
	*mock.Call
}

// AddChannelVipWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.AddChannelVipParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) AddChannelVipWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_AddChannelVipWithResponse_Call {
	return &Api_AddChannelVipWithResponse_Call{Call: _e.mock.On("AddChannelVipWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_AddChannelVipWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.AddChannelVipParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_AddChannelVipWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.AddChannelVipParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_AddChannelVipWithResponse_Call) Return(_a0 *twitchApi.AddChannelVipHTTPResponse, _a1 error) *Api_AddChannelVipWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_AddChannelVipWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.AddChannelVipParams, ...twitchApi.RequestEditorFn) (*twitchApi.AddChannelVipHTTPResponse, error)) *Api_AddChannelVipWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGuestStarSlotWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) AssignGuestStarSlotWithResponse(ctx context.Context, params *twitchApi.AssignGuestStarSlotParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.AssignGuestStarSlotHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignGuestStarSlotWithResponse")
	}

	var r0 *twitchApi.AssignGuestStarSlotHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AssignGuestStarSlotParams, ...twitchApi.RequestEditorFn) (*twitchApi.AssignGuestStarSlotHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.AssignGuestStarSlotParams, ...twitchApi.RequestEditorFn) *twitchApi.AssignGuestStarSlotHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.AssignGuestStarSlotHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.AssignGuestStarSlotParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_AssignGuestStarSlotWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGuestStarSlotWithResponse'
type Api_AssignGuestStarSlotWithResponse_Call struct {
	*mock.Call
}

// AssignGuestStarSlotWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.AssignGuestStarSlotParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) AssignGuestStarSlotWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_AssignGuestStarSlotWithResponse_Call {
	return &Api_AssignGuestStarSlotWithResponse_Call{Call: _e.mock.On("AssignGuestStarSlotWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_AssignGuestStarSlotWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.AssignGuestStarSlotParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_AssignGuestStarSlotWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.AssignGuestStarSlotParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_AssignGuestStarSlotWithResponse_Call) Return(_a0 *twitchApi.AssignGuestStarSlotHTTPResponse, _a1 error) *Api_AssignGuestStarSlotWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_AssignGuestStarSlotWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.AssignGuestStarSlotParams, ...twitchApi.RequestEditorFn) (*twitchApi.AssignGuestStarSlotHTTPResponse, error)) *Api_AssignGuestStarSlotWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// BanUserWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) BanUserWithBodyWithResponse(ctx context.Context, params *twitchApi.BanUserParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.BanUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BanUserWithBodyWithResponse")
	}

	var r0 *twitchApi.BanUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.BanUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.BanUserHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.BanUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.BanUserHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.BanUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.BanUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_BanUserWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanUserWithBodyWithResponse'
type Api_BanUserWithBodyWithResponse_Call struct {
	*mock.Call
}

// BanUserWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.BanUserParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) BanUserWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_BanUserWithBodyWithResponse_Call {
	return &Api_BanUserWithBodyWithResponse_Call{Call: _e.mock.On("BanUserWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_BanUserWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.BanUserParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_BanUserWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.BanUserParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_BanUserWithBodyWithResponse_Call) Return(_a0 *twitchApi.BanUserHTTPResponse, _a1 error) *Api_BanUserWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_BanUserWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.BanUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.BanUserHTTPResponse, error)) *Api_BanUserWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// BanUserWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) BanUserWithResponse(ctx context.Context, params *twitchApi.BanUserParams, body twitchApi.BanUserBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.BanUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BanUserWithResponse")
	}

	var r0 *twitchApi.BanUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.BanUserParams, twitchApi.BanUserBody, ...twitchApi.RequestEditorFn) (*twitchApi.BanUserHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.BanUserParams, twitchApi.BanUserBody, ...twitchApi.RequestEditorFn) *twitchApi.BanUserHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.BanUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.BanUserParams, twitchApi.BanUserBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_BanUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanUserWithResponse'
type Api_BanUserWithResponse_Call struct {
	*mock.Call
}

// BanUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.BanUserParams
//   - body twitchApi.BanUserBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) BanUserWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_BanUserWithResponse_Call {
	return &Api_BanUserWithResponse_Call{Call: _e.mock.On("BanUserWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_BanUserWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.BanUserParams, body twitchApi.BanUserBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_BanUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.BanUserParams), args[2].(twitchApi.BanUserBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_BanUserWithResponse_Call) Return(_a0 *twitchApi.BanUserHTTPResponse, _a1 error) *Api_BanUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_BanUserWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.BanUserParams, twitchApi.BanUserBody, ...twitchApi.RequestEditorFn) (*twitchApi.BanUserHTTPResponse, error)) *Api_BanUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// BlockUserWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) BlockUserWithResponse(ctx context.Context, params *twitchApi.BlockUserParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.BlockUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BlockUserWithResponse")
	}

	var r0 *twitchApi.BlockUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.BlockUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.BlockUserHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.BlockUserParams, ...twitchApi.RequestEditorFn) *twitchApi.BlockUserHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.BlockUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.BlockUserParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_BlockUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockUserWithResponse'
type Api_BlockUserWithResponse_Call struct {
	*mock.Call
}

// BlockUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.BlockUserParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) BlockUserWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_BlockUserWithResponse_Call {
	return &Api_BlockUserWithResponse_Call{Call: _e.mock.On("BlockUserWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_BlockUserWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.BlockUserParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_BlockUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.BlockUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_BlockUserWithResponse_Call) Return(_a0 *twitchApi.BlockUserHTTPResponse, _a1 error) *Api_BlockUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_BlockUserWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.BlockUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.BlockUserHTTPResponse, error)) *Api_BlockUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CancelARaidWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) CancelARaidWithResponse(ctx context.Context, params *twitchApi.CancelARaidParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CancelARaidHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelARaidWithResponse")
	}

	var r0 *twitchApi.CancelARaidHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CancelARaidParams, ...twitchApi.RequestEditorFn) (*twitchApi.CancelARaidHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CancelARaidParams, ...twitchApi.RequestEditorFn) *twitchApi.CancelARaidHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CancelARaidHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CancelARaidParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CancelARaidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelARaidWithResponse'
type Api_CancelARaidWithResponse_Call struct {
	*mock.Call
}

// CancelARaidWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CancelARaidParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CancelARaidWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_CancelARaidWithResponse_Call {
	return &Api_CancelARaidWithResponse_Call{Call: _e.mock.On("CancelARaidWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_CancelARaidWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CancelARaidParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_CancelARaidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CancelARaidParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_CancelARaidWithResponse_Call) Return(_a0 *twitchApi.CancelARaidHTTPResponse, _a1 error) *Api_CancelARaidWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CancelARaidWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CancelARaidParams, ...twitchApi.RequestEditorFn) (*twitchApi.CancelARaidHTTPResponse, error)) *Api_CancelARaidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAutomodStatusWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) CheckAutomodStatusWithBodyWithResponse(ctx context.Context, params *twitchApi.CheckAutomodStatusParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CheckAutomodStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckAutomodStatusWithBodyWithResponse")
	}

	var r0 *twitchApi.CheckAutomodStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CheckAutomodStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CheckAutomodStatusHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CheckAutomodStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CheckAutomodStatusHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CheckAutomodStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CheckAutomodStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CheckAutomodStatusWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAutomodStatusWithBodyWithResponse'
type Api_CheckAutomodStatusWithBodyWithResponse_Call struct {
	*mock.Call
}

// CheckAutomodStatusWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CheckAutomodStatusParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CheckAutomodStatusWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CheckAutomodStatusWithBodyWithResponse_Call {
	return &Api_CheckAutomodStatusWithBodyWithResponse_Call{Call: _e.mock.On("CheckAutomodStatusWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CheckAutomodStatusWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CheckAutomodStatusParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CheckAutomodStatusWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CheckAutomodStatusParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CheckAutomodStatusWithBodyWithResponse_Call) Return(_a0 *twitchApi.CheckAutomodStatusHTTPResponse, _a1 error) *Api_CheckAutomodStatusWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CheckAutomodStatusWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CheckAutomodStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CheckAutomodStatusHTTPResponse, error)) *Api_CheckAutomodStatusWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAutomodStatusWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) CheckAutomodStatusWithResponse(ctx context.Context, params *twitchApi.CheckAutomodStatusParams, body twitchApi.CheckAutoModStatusBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CheckAutomodStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckAutomodStatusWithResponse")
	}

	var r0 *twitchApi.CheckAutomodStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CheckAutomodStatusParams, twitchApi.CheckAutoModStatusBody, ...twitchApi.RequestEditorFn) (*twitchApi.CheckAutomodStatusHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CheckAutomodStatusParams, twitchApi.CheckAutoModStatusBody, ...twitchApi.RequestEditorFn) *twitchApi.CheckAutomodStatusHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CheckAutomodStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CheckAutomodStatusParams, twitchApi.CheckAutoModStatusBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CheckAutomodStatusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAutomodStatusWithResponse'
type Api_CheckAutomodStatusWithResponse_Call struct {
	*mock.Call
}

// CheckAutomodStatusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CheckAutomodStatusParams
//   - body twitchApi.CheckAutoModStatusBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CheckAutomodStatusWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_CheckAutomodStatusWithResponse_Call {
	return &Api_CheckAutomodStatusWithResponse_Call{Call: _e.mock.On("CheckAutomodStatusWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_CheckAutomodStatusWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CheckAutomodStatusParams, body twitchApi.CheckAutoModStatusBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CheckAutomodStatusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CheckAutomodStatusParams), args[2].(twitchApi.CheckAutoModStatusBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CheckAutomodStatusWithResponse_Call) Return(_a0 *twitchApi.CheckAutomodStatusHTTPResponse, _a1 error) *Api_CheckAutomodStatusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CheckAutomodStatusWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CheckAutomodStatusParams, twitchApi.CheckAutoModStatusBody, ...twitchApi.RequestEditorFn) (*twitchApi.CheckAutomodStatusHTTPResponse, error)) *Api_CheckAutomodStatusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserSubscriptionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) CheckUserSubscriptionWithResponse(ctx context.Context, params *twitchApi.CheckUserSubscriptionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CheckUserSubscriptionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserSubscriptionWithResponse")
	}

	var r0 *twitchApi.CheckUserSubscriptionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CheckUserSubscriptionParams, ...twitchApi.RequestEditorFn) (*twitchApi.CheckUserSubscriptionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CheckUserSubscriptionParams, ...twitchApi.RequestEditorFn) *twitchApi.CheckUserSubscriptionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CheckUserSubscriptionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CheckUserSubscriptionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CheckUserSubscriptionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserSubscriptionWithResponse'
type Api_CheckUserSubscriptionWithResponse_Call struct {
	*mock.Call
}

// CheckUserSubscriptionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CheckUserSubscriptionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CheckUserSubscriptionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_CheckUserSubscriptionWithResponse_Call {
	return &Api_CheckUserSubscriptionWithResponse_Call{Call: _e.mock.On("CheckUserSubscriptionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_CheckUserSubscriptionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CheckUserSubscriptionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_CheckUserSubscriptionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CheckUserSubscriptionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_CheckUserSubscriptionWithResponse_Call) Return(_a0 *twitchApi.CheckUserSubscriptionHTTPResponse, _a1 error) *Api_CheckUserSubscriptionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CheckUserSubscriptionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CheckUserSubscriptionParams, ...twitchApi.RequestEditorFn) (*twitchApi.CheckUserSubscriptionHTTPResponse, error)) *Api_CheckUserSubscriptionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannelStreamScheduleSegmentWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) CreateChannelStreamScheduleSegmentWithBodyWithResponse(ctx context.Context, params *twitchApi.CreateChannelStreamScheduleSegmentParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelStreamScheduleSegmentWithBodyWithResponse")
	}

	var r0 *twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannelStreamScheduleSegmentWithBodyWithResponse'
type Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateChannelStreamScheduleSegmentWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateChannelStreamScheduleSegmentParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateChannelStreamScheduleSegmentWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	return &Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call{Call: _e.mock.On("CreateChannelStreamScheduleSegmentWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateChannelStreamScheduleSegmentParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateChannelStreamScheduleSegmentParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, _a1 error) *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, error)) *Api_CreateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChannelStreamScheduleSegmentWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) CreateChannelStreamScheduleSegmentWithResponse(ctx context.Context, params *twitchApi.CreateChannelStreamScheduleSegmentParams, body twitchApi.CreateChannelStreamScheduleSegmentBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelStreamScheduleSegmentWithResponse")
	}

	var r0 *twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, twitchApi.CreateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, twitchApi.CreateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) *twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, twitchApi.CreateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateChannelStreamScheduleSegmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannelStreamScheduleSegmentWithResponse'
type Api_CreateChannelStreamScheduleSegmentWithResponse_Call struct {
	*mock.Call
}

// CreateChannelStreamScheduleSegmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateChannelStreamScheduleSegmentParams
//   - body twitchApi.CreateChannelStreamScheduleSegmentBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateChannelStreamScheduleSegmentWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateChannelStreamScheduleSegmentWithResponse_Call {
	return &Api_CreateChannelStreamScheduleSegmentWithResponse_Call{Call: _e.mock.On("CreateChannelStreamScheduleSegmentWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_CreateChannelStreamScheduleSegmentWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateChannelStreamScheduleSegmentParams, body twitchApi.CreateChannelStreamScheduleSegmentBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateChannelStreamScheduleSegmentParams), args[2].(twitchApi.CreateChannelStreamScheduleSegmentBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateChannelStreamScheduleSegmentWithResponse_Call) Return(_a0 *twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, _a1 error) *Api_CreateChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateChannelStreamScheduleSegmentWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateChannelStreamScheduleSegmentParams, twitchApi.CreateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateChannelStreamScheduleSegmentHTTPResponse, error)) *Api_CreateChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClipWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) CreateClipWithResponse(ctx context.Context, params *twitchApi.CreateClipParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateClipHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClipWithResponse")
	}

	var r0 *twitchApi.CreateClipHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateClipParams, ...twitchApi.RequestEditorFn) (*twitchApi.CreateClipHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateClipParams, ...twitchApi.RequestEditorFn) *twitchApi.CreateClipHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateClipHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateClipParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateClipWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClipWithResponse'
type Api_CreateClipWithResponse_Call struct {
	*mock.Call
}

// CreateClipWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateClipParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateClipWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_CreateClipWithResponse_Call {
	return &Api_CreateClipWithResponse_Call{Call: _e.mock.On("CreateClipWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_CreateClipWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateClipParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateClipWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateClipParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateClipWithResponse_Call) Return(_a0 *twitchApi.CreateClipHTTPResponse, _a1 error) *Api_CreateClipWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateClipWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateClipParams, ...twitchApi.RequestEditorFn) (*twitchApi.CreateClipHTTPResponse, error)) *Api_CreateClipWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConduitsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) CreateConduitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateConduitsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConduitsWithBodyWithResponse")
	}

	var r0 *twitchApi.CreateConduitsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateConduitsHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreateConduitsHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateConduitsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateConduitsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConduitsWithBodyWithResponse'
type Api_CreateConduitsWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateConduitsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateConduitsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateConduitsWithBodyWithResponse_Call {
	return &Api_CreateConduitsWithBodyWithResponse_Call{Call: _e.mock.On("CreateConduitsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreateConduitsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateConduitsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateConduitsWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreateConduitsHTTPResponse, _a1 error) *Api_CreateConduitsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateConduitsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateConduitsHTTPResponse, error)) *Api_CreateConduitsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConduitsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) CreateConduitsWithResponse(ctx context.Context, body twitchApi.CreateConduitsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateConduitsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConduitsWithResponse")
	}

	var r0 *twitchApi.CreateConduitsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreateConduitsBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateConduitsHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreateConduitsBody, ...twitchApi.RequestEditorFn) *twitchApi.CreateConduitsHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateConduitsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.CreateConduitsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateConduitsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConduitsWithResponse'
type Api_CreateConduitsWithResponse_Call struct {
	*mock.Call
}

// CreateConduitsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.CreateConduitsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateConduitsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateConduitsWithResponse_Call {
	return &Api_CreateConduitsWithResponse_Call{Call: _e.mock.On("CreateConduitsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_CreateConduitsWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.CreateConduitsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateConduitsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.CreateConduitsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateConduitsWithResponse_Call) Return(_a0 *twitchApi.CreateConduitsHTTPResponse, _a1 error) *Api_CreateConduitsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateConduitsWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.CreateConduitsBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateConduitsHTTPResponse, error)) *Api_CreateConduitsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomRewardsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) CreateCustomRewardsWithBodyWithResponse(ctx context.Context, params *twitchApi.CreateCustomRewardsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateCustomRewardsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomRewardsWithBodyWithResponse")
	}

	var r0 *twitchApi.CreateCustomRewardsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateCustomRewardsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateCustomRewardsHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateCustomRewardsParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreateCustomRewardsHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateCustomRewardsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateCustomRewardsParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateCustomRewardsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomRewardsWithBodyWithResponse'
type Api_CreateCustomRewardsWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateCustomRewardsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateCustomRewardsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateCustomRewardsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateCustomRewardsWithBodyWithResponse_Call {
	return &Api_CreateCustomRewardsWithBodyWithResponse_Call{Call: _e.mock.On("CreateCustomRewardsWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreateCustomRewardsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateCustomRewardsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateCustomRewardsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateCustomRewardsParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateCustomRewardsWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreateCustomRewardsHTTPResponse, _a1 error) *Api_CreateCustomRewardsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateCustomRewardsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateCustomRewardsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateCustomRewardsHTTPResponse, error)) *Api_CreateCustomRewardsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomRewardsWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) CreateCustomRewardsWithResponse(ctx context.Context, params *twitchApi.CreateCustomRewardsParams, body twitchApi.CreateCustomRewardsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateCustomRewardsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomRewardsWithResponse")
	}

	var r0 *twitchApi.CreateCustomRewardsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateCustomRewardsParams, twitchApi.CreateCustomRewardsBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateCustomRewardsHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateCustomRewardsParams, twitchApi.CreateCustomRewardsBody, ...twitchApi.RequestEditorFn) *twitchApi.CreateCustomRewardsHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateCustomRewardsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateCustomRewardsParams, twitchApi.CreateCustomRewardsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateCustomRewardsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomRewardsWithResponse'
type Api_CreateCustomRewardsWithResponse_Call struct {
	*mock.Call
}

// CreateCustomRewardsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateCustomRewardsParams
//   - body twitchApi.CreateCustomRewardsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateCustomRewardsWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateCustomRewardsWithResponse_Call {
	return &Api_CreateCustomRewardsWithResponse_Call{Call: _e.mock.On("CreateCustomRewardsWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_CreateCustomRewardsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateCustomRewardsParams, body twitchApi.CreateCustomRewardsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateCustomRewardsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateCustomRewardsParams), args[2].(twitchApi.CreateCustomRewardsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateCustomRewardsWithResponse_Call) Return(_a0 *twitchApi.CreateCustomRewardsHTTPResponse, _a1 error) *Api_CreateCustomRewardsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateCustomRewardsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateCustomRewardsParams, twitchApi.CreateCustomRewardsBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateCustomRewardsHTTPResponse, error)) *Api_CreateCustomRewardsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventsubSubscriptionWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) CreateEventsubSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateEventsubSubscriptionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventsubSubscriptionWithBodyWithResponse")
	}

	var r0 *twitchApi.CreateEventsubSubscriptionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateEventsubSubscriptionHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreateEventsubSubscriptionHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateEventsubSubscriptionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateEventsubSubscriptionWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventsubSubscriptionWithBodyWithResponse'
type Api_CreateEventsubSubscriptionWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateEventsubSubscriptionWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateEventsubSubscriptionWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call {
	return &Api_CreateEventsubSubscriptionWithBodyWithResponse_Call{Call: _e.mock.On("CreateEventsubSubscriptionWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreateEventsubSubscriptionHTTPResponse, _a1 error) *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateEventsubSubscriptionHTTPResponse, error)) *Api_CreateEventsubSubscriptionWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventsubSubscriptionWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) CreateEventsubSubscriptionWithResponse(ctx context.Context, body twitchApi.CreateEventSubSubscriptionBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateEventsubSubscriptionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventsubSubscriptionWithResponse")
	}

	var r0 *twitchApi.CreateEventsubSubscriptionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreateEventSubSubscriptionBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateEventsubSubscriptionHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreateEventSubSubscriptionBody, ...twitchApi.RequestEditorFn) *twitchApi.CreateEventsubSubscriptionHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateEventsubSubscriptionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.CreateEventSubSubscriptionBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateEventsubSubscriptionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventsubSubscriptionWithResponse'
type Api_CreateEventsubSubscriptionWithResponse_Call struct {
	*mock.Call
}

// CreateEventsubSubscriptionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.CreateEventSubSubscriptionBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateEventsubSubscriptionWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateEventsubSubscriptionWithResponse_Call {
	return &Api_CreateEventsubSubscriptionWithResponse_Call{Call: _e.mock.On("CreateEventsubSubscriptionWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_CreateEventsubSubscriptionWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.CreateEventSubSubscriptionBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateEventsubSubscriptionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.CreateEventSubSubscriptionBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateEventsubSubscriptionWithResponse_Call) Return(_a0 *twitchApi.CreateEventsubSubscriptionHTTPResponse, _a1 error) *Api_CreateEventsubSubscriptionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateEventsubSubscriptionWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.CreateEventSubSubscriptionBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateEventsubSubscriptionHTTPResponse, error)) *Api_CreateEventsubSubscriptionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExtensionSecretWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) CreateExtensionSecretWithResponse(ctx context.Context, params *twitchApi.CreateExtensionSecretParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateExtensionSecretHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExtensionSecretWithResponse")
	}

	var r0 *twitchApi.CreateExtensionSecretHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateExtensionSecretParams, ...twitchApi.RequestEditorFn) (*twitchApi.CreateExtensionSecretHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateExtensionSecretParams, ...twitchApi.RequestEditorFn) *twitchApi.CreateExtensionSecretHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateExtensionSecretHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateExtensionSecretParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateExtensionSecretWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExtensionSecretWithResponse'
type Api_CreateExtensionSecretWithResponse_Call struct {
	*mock.Call
}

// CreateExtensionSecretWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateExtensionSecretParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateExtensionSecretWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_CreateExtensionSecretWithResponse_Call {
	return &Api_CreateExtensionSecretWithResponse_Call{Call: _e.mock.On("CreateExtensionSecretWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_CreateExtensionSecretWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateExtensionSecretParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateExtensionSecretWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateExtensionSecretParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateExtensionSecretWithResponse_Call) Return(_a0 *twitchApi.CreateExtensionSecretHTTPResponse, _a1 error) *Api_CreateExtensionSecretWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateExtensionSecretWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateExtensionSecretParams, ...twitchApi.RequestEditorFn) (*twitchApi.CreateExtensionSecretHTTPResponse, error)) *Api_CreateExtensionSecretWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGuestStarSessionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) CreateGuestStarSessionWithResponse(ctx context.Context, params *twitchApi.CreateGuestStarSessionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateGuestStarSessionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGuestStarSessionWithResponse")
	}

	var r0 *twitchApi.CreateGuestStarSessionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateGuestStarSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.CreateGuestStarSessionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.CreateGuestStarSessionParams, ...twitchApi.RequestEditorFn) *twitchApi.CreateGuestStarSessionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateGuestStarSessionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.CreateGuestStarSessionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateGuestStarSessionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGuestStarSessionWithResponse'
type Api_CreateGuestStarSessionWithResponse_Call struct {
	*mock.Call
}

// CreateGuestStarSessionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.CreateGuestStarSessionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateGuestStarSessionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_CreateGuestStarSessionWithResponse_Call {
	return &Api_CreateGuestStarSessionWithResponse_Call{Call: _e.mock.On("CreateGuestStarSessionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_CreateGuestStarSessionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.CreateGuestStarSessionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateGuestStarSessionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.CreateGuestStarSessionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateGuestStarSessionWithResponse_Call) Return(_a0 *twitchApi.CreateGuestStarSessionHTTPResponse, _a1 error) *Api_CreateGuestStarSessionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateGuestStarSessionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.CreateGuestStarSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.CreateGuestStarSessionHTTPResponse, error)) *Api_CreateGuestStarSessionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePollWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) CreatePollWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreatePollHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePollWithBodyWithResponse")
	}

	var r0 *twitchApi.CreatePollHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePollHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreatePollHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreatePollHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreatePollWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePollWithBodyWithResponse'
type Api_CreatePollWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreatePollWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreatePollWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreatePollWithBodyWithResponse_Call {
	return &Api_CreatePollWithBodyWithResponse_Call{Call: _e.mock.On("CreatePollWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreatePollWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreatePollWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreatePollWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreatePollHTTPResponse, _a1 error) *Api_CreatePollWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreatePollWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePollHTTPResponse, error)) *Api_CreatePollWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePollWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) CreatePollWithResponse(ctx context.Context, body twitchApi.CreatePollBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreatePollHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePollWithResponse")
	}

	var r0 *twitchApi.CreatePollHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreatePollBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePollHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreatePollBody, ...twitchApi.RequestEditorFn) *twitchApi.CreatePollHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreatePollHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.CreatePollBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreatePollWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePollWithResponse'
type Api_CreatePollWithResponse_Call struct {
	*mock.Call
}

// CreatePollWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.CreatePollBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreatePollWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_CreatePollWithResponse_Call {
	return &Api_CreatePollWithResponse_Call{Call: _e.mock.On("CreatePollWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_CreatePollWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.CreatePollBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreatePollWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.CreatePollBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreatePollWithResponse_Call) Return(_a0 *twitchApi.CreatePollHTTPResponse, _a1 error) *Api_CreatePollWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreatePollWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.CreatePollBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePollHTTPResponse, error)) *Api_CreatePollWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePredictionWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) CreatePredictionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreatePredictionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePredictionWithBodyWithResponse")
	}

	var r0 *twitchApi.CreatePredictionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePredictionHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreatePredictionHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreatePredictionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreatePredictionWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePredictionWithBodyWithResponse'
type Api_CreatePredictionWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreatePredictionWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreatePredictionWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreatePredictionWithBodyWithResponse_Call {
	return &Api_CreatePredictionWithBodyWithResponse_Call{Call: _e.mock.On("CreatePredictionWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreatePredictionWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreatePredictionWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreatePredictionWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreatePredictionHTTPResponse, _a1 error) *Api_CreatePredictionWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreatePredictionWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePredictionHTTPResponse, error)) *Api_CreatePredictionWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePredictionWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) CreatePredictionWithResponse(ctx context.Context, body twitchApi.CreatePredictionBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreatePredictionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePredictionWithResponse")
	}

	var r0 *twitchApi.CreatePredictionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreatePredictionBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePredictionHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreatePredictionBody, ...twitchApi.RequestEditorFn) *twitchApi.CreatePredictionHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreatePredictionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.CreatePredictionBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreatePredictionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePredictionWithResponse'
type Api_CreatePredictionWithResponse_Call struct {
	*mock.Call
}

// CreatePredictionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.CreatePredictionBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreatePredictionWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_CreatePredictionWithResponse_Call {
	return &Api_CreatePredictionWithResponse_Call{Call: _e.mock.On("CreatePredictionWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_CreatePredictionWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.CreatePredictionBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreatePredictionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.CreatePredictionBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreatePredictionWithResponse_Call) Return(_a0 *twitchApi.CreatePredictionHTTPResponse, _a1 error) *Api_CreatePredictionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreatePredictionWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.CreatePredictionBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreatePredictionHTTPResponse, error)) *Api_CreatePredictionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamMarkerWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) CreateStreamMarkerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateStreamMarkerHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamMarkerWithBodyWithResponse")
	}

	var r0 *twitchApi.CreateStreamMarkerHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateStreamMarkerHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.CreateStreamMarkerHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateStreamMarkerHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateStreamMarkerWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamMarkerWithBodyWithResponse'
type Api_CreateStreamMarkerWithBodyWithResponse_Call struct {
	*mock.Call
}

// CreateStreamMarkerWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateStreamMarkerWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateStreamMarkerWithBodyWithResponse_Call {
	return &Api_CreateStreamMarkerWithBodyWithResponse_Call{Call: _e.mock.On("CreateStreamMarkerWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_CreateStreamMarkerWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateStreamMarkerWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateStreamMarkerWithBodyWithResponse_Call) Return(_a0 *twitchApi.CreateStreamMarkerHTTPResponse, _a1 error) *Api_CreateStreamMarkerWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateStreamMarkerWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.CreateStreamMarkerHTTPResponse, error)) *Api_CreateStreamMarkerWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStreamMarkerWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) CreateStreamMarkerWithResponse(ctx context.Context, body twitchApi.CreateStreamMarkerBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.CreateStreamMarkerHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamMarkerWithResponse")
	}

	var r0 *twitchApi.CreateStreamMarkerHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreateStreamMarkerBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateStreamMarkerHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.CreateStreamMarkerBody, ...twitchApi.RequestEditorFn) *twitchApi.CreateStreamMarkerHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.CreateStreamMarkerHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.CreateStreamMarkerBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_CreateStreamMarkerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStreamMarkerWithResponse'
type Api_CreateStreamMarkerWithResponse_Call struct {
	*mock.Call
}

// CreateStreamMarkerWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.CreateStreamMarkerBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) CreateStreamMarkerWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_CreateStreamMarkerWithResponse_Call {
	return &Api_CreateStreamMarkerWithResponse_Call{Call: _e.mock.On("CreateStreamMarkerWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_CreateStreamMarkerWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.CreateStreamMarkerBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_CreateStreamMarkerWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.CreateStreamMarkerBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_CreateStreamMarkerWithResponse_Call) Return(_a0 *twitchApi.CreateStreamMarkerHTTPResponse, _a1 error) *Api_CreateStreamMarkerWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_CreateStreamMarkerWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.CreateStreamMarkerBody, ...twitchApi.RequestEditorFn) (*twitchApi.CreateStreamMarkerHTTPResponse, error)) *Api_CreateStreamMarkerWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChannelStreamScheduleSegmentWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteChannelStreamScheduleSegmentWithResponse(ctx context.Context, params *twitchApi.DeleteChannelStreamScheduleSegmentParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelStreamScheduleSegmentWithResponse")
	}

	var r0 *twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteChannelStreamScheduleSegmentParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteChannelStreamScheduleSegmentParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteChannelStreamScheduleSegmentParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteChannelStreamScheduleSegmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChannelStreamScheduleSegmentWithResponse'
type Api_DeleteChannelStreamScheduleSegmentWithResponse_Call struct {
	*mock.Call
}

// DeleteChannelStreamScheduleSegmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteChannelStreamScheduleSegmentParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteChannelStreamScheduleSegmentWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call {
	return &Api_DeleteChannelStreamScheduleSegmentWithResponse_Call{Call: _e.mock.On("DeleteChannelStreamScheduleSegmentWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteChannelStreamScheduleSegmentParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteChannelStreamScheduleSegmentParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call) Return(_a0 *twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse, _a1 error) *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteChannelStreamScheduleSegmentParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteChannelStreamScheduleSegmentHTTPResponse, error)) *Api_DeleteChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChatMessagesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteChatMessagesWithResponse(ctx context.Context, params *twitchApi.DeleteChatMessagesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteChatMessagesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChatMessagesWithResponse")
	}

	var r0 *twitchApi.DeleteChatMessagesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteChatMessagesParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteChatMessagesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteChatMessagesParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteChatMessagesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteChatMessagesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteChatMessagesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteChatMessagesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChatMessagesWithResponse'
type Api_DeleteChatMessagesWithResponse_Call struct {
	*mock.Call
}

// DeleteChatMessagesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteChatMessagesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteChatMessagesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteChatMessagesWithResponse_Call {
	return &Api_DeleteChatMessagesWithResponse_Call{Call: _e.mock.On("DeleteChatMessagesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteChatMessagesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteChatMessagesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteChatMessagesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteChatMessagesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteChatMessagesWithResponse_Call) Return(_a0 *twitchApi.DeleteChatMessagesHTTPResponse, _a1 error) *Api_DeleteChatMessagesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteChatMessagesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteChatMessagesParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteChatMessagesHTTPResponse, error)) *Api_DeleteChatMessagesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConduitWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteConduitWithResponse(ctx context.Context, params *twitchApi.DeleteConduitParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteConduitHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConduitWithResponse")
	}

	var r0 *twitchApi.DeleteConduitHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteConduitParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteConduitHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteConduitParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteConduitHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteConduitHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteConduitParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteConduitWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConduitWithResponse'
type Api_DeleteConduitWithResponse_Call struct {
	*mock.Call
}

// DeleteConduitWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteConduitParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteConduitWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteConduitWithResponse_Call {
	return &Api_DeleteConduitWithResponse_Call{Call: _e.mock.On("DeleteConduitWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteConduitWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteConduitParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteConduitWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteConduitParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteConduitWithResponse_Call) Return(_a0 *twitchApi.DeleteConduitHTTPResponse, _a1 error) *Api_DeleteConduitWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteConduitWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteConduitParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteConduitHTTPResponse, error)) *Api_DeleteConduitWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomRewardWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteCustomRewardWithResponse(ctx context.Context, params *twitchApi.DeleteCustomRewardParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteCustomRewardHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomRewardWithResponse")
	}

	var r0 *twitchApi.DeleteCustomRewardHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteCustomRewardParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteCustomRewardHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteCustomRewardParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteCustomRewardHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteCustomRewardHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteCustomRewardParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteCustomRewardWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomRewardWithResponse'
type Api_DeleteCustomRewardWithResponse_Call struct {
	*mock.Call
}

// DeleteCustomRewardWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteCustomRewardParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteCustomRewardWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteCustomRewardWithResponse_Call {
	return &Api_DeleteCustomRewardWithResponse_Call{Call: _e.mock.On("DeleteCustomRewardWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteCustomRewardWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteCustomRewardParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteCustomRewardWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteCustomRewardParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteCustomRewardWithResponse_Call) Return(_a0 *twitchApi.DeleteCustomRewardHTTPResponse, _a1 error) *Api_DeleteCustomRewardWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteCustomRewardWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteCustomRewardParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteCustomRewardHTTPResponse, error)) *Api_DeleteCustomRewardWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventsubSubscriptionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteEventsubSubscriptionWithResponse(ctx context.Context, params *twitchApi.DeleteEventsubSubscriptionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteEventsubSubscriptionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventsubSubscriptionWithResponse")
	}

	var r0 *twitchApi.DeleteEventsubSubscriptionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteEventsubSubscriptionParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteEventsubSubscriptionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteEventsubSubscriptionParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteEventsubSubscriptionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteEventsubSubscriptionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteEventsubSubscriptionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteEventsubSubscriptionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventsubSubscriptionWithResponse'
type Api_DeleteEventsubSubscriptionWithResponse_Call struct {
	*mock.Call
}

// DeleteEventsubSubscriptionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteEventsubSubscriptionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteEventsubSubscriptionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteEventsubSubscriptionWithResponse_Call {
	return &Api_DeleteEventsubSubscriptionWithResponse_Call{Call: _e.mock.On("DeleteEventsubSubscriptionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteEventsubSubscriptionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteEventsubSubscriptionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteEventsubSubscriptionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteEventsubSubscriptionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteEventsubSubscriptionWithResponse_Call) Return(_a0 *twitchApi.DeleteEventsubSubscriptionHTTPResponse, _a1 error) *Api_DeleteEventsubSubscriptionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteEventsubSubscriptionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteEventsubSubscriptionParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteEventsubSubscriptionHTTPResponse, error)) *Api_DeleteEventsubSubscriptionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGuestStarInviteWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteGuestStarInviteWithResponse(ctx context.Context, params *twitchApi.DeleteGuestStarInviteParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteGuestStarInviteHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGuestStarInviteWithResponse")
	}

	var r0 *twitchApi.DeleteGuestStarInviteHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteGuestStarInviteParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteGuestStarInviteHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteGuestStarInviteParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteGuestStarInviteHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteGuestStarInviteHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteGuestStarInviteParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteGuestStarInviteWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGuestStarInviteWithResponse'
type Api_DeleteGuestStarInviteWithResponse_Call struct {
	*mock.Call
}

// DeleteGuestStarInviteWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteGuestStarInviteParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteGuestStarInviteWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteGuestStarInviteWithResponse_Call {
	return &Api_DeleteGuestStarInviteWithResponse_Call{Call: _e.mock.On("DeleteGuestStarInviteWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteGuestStarInviteWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteGuestStarInviteParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteGuestStarInviteWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteGuestStarInviteParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteGuestStarInviteWithResponse_Call) Return(_a0 *twitchApi.DeleteGuestStarInviteHTTPResponse, _a1 error) *Api_DeleteGuestStarInviteWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteGuestStarInviteWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteGuestStarInviteParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteGuestStarInviteHTTPResponse, error)) *Api_DeleteGuestStarInviteWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGuestStarSlotWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteGuestStarSlotWithResponse(ctx context.Context, params *twitchApi.DeleteGuestStarSlotParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteGuestStarSlotHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGuestStarSlotWithResponse")
	}

	var r0 *twitchApi.DeleteGuestStarSlotHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteGuestStarSlotParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteGuestStarSlotHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteGuestStarSlotParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteGuestStarSlotHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteGuestStarSlotHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteGuestStarSlotParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteGuestStarSlotWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGuestStarSlotWithResponse'
type Api_DeleteGuestStarSlotWithResponse_Call struct {
	*mock.Call
}

// DeleteGuestStarSlotWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteGuestStarSlotParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteGuestStarSlotWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteGuestStarSlotWithResponse_Call {
	return &Api_DeleteGuestStarSlotWithResponse_Call{Call: _e.mock.On("DeleteGuestStarSlotWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteGuestStarSlotWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteGuestStarSlotParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteGuestStarSlotWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteGuestStarSlotParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteGuestStarSlotWithResponse_Call) Return(_a0 *twitchApi.DeleteGuestStarSlotHTTPResponse, _a1 error) *Api_DeleteGuestStarSlotWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteGuestStarSlotWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteGuestStarSlotParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteGuestStarSlotHTTPResponse, error)) *Api_DeleteGuestStarSlotWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVideosWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) DeleteVideosWithResponse(ctx context.Context, params *twitchApi.DeleteVideosParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.DeleteVideosHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVideosWithResponse")
	}

	var r0 *twitchApi.DeleteVideosHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteVideosParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteVideosHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.DeleteVideosParams, ...twitchApi.RequestEditorFn) *twitchApi.DeleteVideosHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.DeleteVideosHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.DeleteVideosParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_DeleteVideosWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVideosWithResponse'
type Api_DeleteVideosWithResponse_Call struct {
	*mock.Call
}

// DeleteVideosWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.DeleteVideosParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) DeleteVideosWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_DeleteVideosWithResponse_Call {
	return &Api_DeleteVideosWithResponse_Call{Call: _e.mock.On("DeleteVideosWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_DeleteVideosWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.DeleteVideosParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_DeleteVideosWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.DeleteVideosParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_DeleteVideosWithResponse_Call) Return(_a0 *twitchApi.DeleteVideosHTTPResponse, _a1 error) *Api_DeleteVideosWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_DeleteVideosWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.DeleteVideosParams, ...twitchApi.RequestEditorFn) (*twitchApi.DeleteVideosHTTPResponse, error)) *Api_DeleteVideosWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EndGuestStarSessionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) EndGuestStarSessionWithResponse(ctx context.Context, params *twitchApi.EndGuestStarSessionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.EndGuestStarSessionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndGuestStarSessionWithResponse")
	}

	var r0 *twitchApi.EndGuestStarSessionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.EndGuestStarSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.EndGuestStarSessionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.EndGuestStarSessionParams, ...twitchApi.RequestEditorFn) *twitchApi.EndGuestStarSessionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.EndGuestStarSessionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.EndGuestStarSessionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_EndGuestStarSessionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndGuestStarSessionWithResponse'
type Api_EndGuestStarSessionWithResponse_Call struct {
	*mock.Call
}

// EndGuestStarSessionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.EndGuestStarSessionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) EndGuestStarSessionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_EndGuestStarSessionWithResponse_Call {
	return &Api_EndGuestStarSessionWithResponse_Call{Call: _e.mock.On("EndGuestStarSessionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_EndGuestStarSessionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.EndGuestStarSessionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_EndGuestStarSessionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.EndGuestStarSessionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_EndGuestStarSessionWithResponse_Call) Return(_a0 *twitchApi.EndGuestStarSessionHTTPResponse, _a1 error) *Api_EndGuestStarSessionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_EndGuestStarSessionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.EndGuestStarSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.EndGuestStarSessionHTTPResponse, error)) *Api_EndGuestStarSessionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EndPollWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) EndPollWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.EndPollHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndPollWithBodyWithResponse")
	}

	var r0 *twitchApi.EndPollHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.EndPollHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.EndPollHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.EndPollHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_EndPollWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndPollWithBodyWithResponse'
type Api_EndPollWithBodyWithResponse_Call struct {
	*mock.Call
}

// EndPollWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) EndPollWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_EndPollWithBodyWithResponse_Call {
	return &Api_EndPollWithBodyWithResponse_Call{Call: _e.mock.On("EndPollWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_EndPollWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_EndPollWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_EndPollWithBodyWithResponse_Call) Return(_a0 *twitchApi.EndPollHTTPResponse, _a1 error) *Api_EndPollWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_EndPollWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.EndPollHTTPResponse, error)) *Api_EndPollWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EndPollWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) EndPollWithResponse(ctx context.Context, body twitchApi.EndPollBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.EndPollHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndPollWithResponse")
	}

	var r0 *twitchApi.EndPollHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.EndPollBody, ...twitchApi.RequestEditorFn) (*twitchApi.EndPollHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.EndPollBody, ...twitchApi.RequestEditorFn) *twitchApi.EndPollHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.EndPollHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.EndPollBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_EndPollWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndPollWithResponse'
type Api_EndPollWithResponse_Call struct {
	*mock.Call
}

// EndPollWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.EndPollBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) EndPollWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_EndPollWithResponse_Call {
	return &Api_EndPollWithResponse_Call{Call: _e.mock.On("EndPollWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_EndPollWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.EndPollBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_EndPollWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.EndPollBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_EndPollWithResponse_Call) Return(_a0 *twitchApi.EndPollHTTPResponse, _a1 error) *Api_EndPollWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_EndPollWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.EndPollBody, ...twitchApi.RequestEditorFn) (*twitchApi.EndPollHTTPResponse, error)) *Api_EndPollWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EndPredictionWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) EndPredictionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.EndPredictionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndPredictionWithBodyWithResponse")
	}

	var r0 *twitchApi.EndPredictionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.EndPredictionHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.EndPredictionHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.EndPredictionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_EndPredictionWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndPredictionWithBodyWithResponse'
type Api_EndPredictionWithBodyWithResponse_Call struct {
	*mock.Call
}

// EndPredictionWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) EndPredictionWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_EndPredictionWithBodyWithResponse_Call {
	return &Api_EndPredictionWithBodyWithResponse_Call{Call: _e.mock.On("EndPredictionWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_EndPredictionWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_EndPredictionWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_EndPredictionWithBodyWithResponse_Call) Return(_a0 *twitchApi.EndPredictionHTTPResponse, _a1 error) *Api_EndPredictionWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_EndPredictionWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.EndPredictionHTTPResponse, error)) *Api_EndPredictionWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// EndPredictionWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) EndPredictionWithResponse(ctx context.Context, body twitchApi.EndPredictionBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.EndPredictionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EndPredictionWithResponse")
	}

	var r0 *twitchApi.EndPredictionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.EndPredictionBody, ...twitchApi.RequestEditorFn) (*twitchApi.EndPredictionHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.EndPredictionBody, ...twitchApi.RequestEditorFn) *twitchApi.EndPredictionHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.EndPredictionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.EndPredictionBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_EndPredictionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndPredictionWithResponse'
type Api_EndPredictionWithResponse_Call struct {
	*mock.Call
}

// EndPredictionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.EndPredictionBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) EndPredictionWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_EndPredictionWithResponse_Call {
	return &Api_EndPredictionWithResponse_Call{Call: _e.mock.On("EndPredictionWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_EndPredictionWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.EndPredictionBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_EndPredictionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.EndPredictionBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_EndPredictionWithResponse_Call) Return(_a0 *twitchApi.EndPredictionHTTPResponse, _a1 error) *Api_EndPredictionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_EndPredictionWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.EndPredictionBody, ...twitchApi.RequestEditorFn) (*twitchApi.EndPredictionHTTPResponse, error)) *Api_EndPredictionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdScheduleWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetAdScheduleWithResponse(ctx context.Context, params *twitchApi.GetAdScheduleParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetAdScheduleHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdScheduleWithResponse")
	}

	var r0 *twitchApi.GetAdScheduleHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetAdScheduleParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetAdScheduleHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetAdScheduleParams, ...twitchApi.RequestEditorFn) *twitchApi.GetAdScheduleHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetAdScheduleHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetAdScheduleParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetAdScheduleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdScheduleWithResponse'
type Api_GetAdScheduleWithResponse_Call struct {
	*mock.Call
}

// GetAdScheduleWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetAdScheduleParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetAdScheduleWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetAdScheduleWithResponse_Call {
	return &Api_GetAdScheduleWithResponse_Call{Call: _e.mock.On("GetAdScheduleWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetAdScheduleWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetAdScheduleParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetAdScheduleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetAdScheduleParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetAdScheduleWithResponse_Call) Return(_a0 *twitchApi.GetAdScheduleHTTPResponse, _a1 error) *Api_GetAdScheduleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetAdScheduleWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetAdScheduleParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetAdScheduleHTTPResponse, error)) *Api_GetAdScheduleWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStreamTagsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetAllStreamTagsWithResponse(ctx context.Context, params *twitchApi.GetAllStreamTagsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetAllStreamTagsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStreamTagsWithResponse")
	}

	var r0 *twitchApi.GetAllStreamTagsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetAllStreamTagsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetAllStreamTagsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetAllStreamTagsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetAllStreamTagsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetAllStreamTagsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetAllStreamTagsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetAllStreamTagsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStreamTagsWithResponse'
type Api_GetAllStreamTagsWithResponse_Call struct {
	*mock.Call
}

// GetAllStreamTagsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetAllStreamTagsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetAllStreamTagsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetAllStreamTagsWithResponse_Call {
	return &Api_GetAllStreamTagsWithResponse_Call{Call: _e.mock.On("GetAllStreamTagsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetAllStreamTagsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetAllStreamTagsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetAllStreamTagsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetAllStreamTagsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetAllStreamTagsWithResponse_Call) Return(_a0 *twitchApi.GetAllStreamTagsHTTPResponse, _a1 error) *Api_GetAllStreamTagsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetAllStreamTagsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetAllStreamTagsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetAllStreamTagsHTTPResponse, error)) *Api_GetAllStreamTagsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetAutomodSettingsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetAutomodSettingsWithResponse(ctx context.Context, params *twitchApi.GetAutomodSettingsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetAutomodSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAutomodSettingsWithResponse")
	}

	var r0 *twitchApi.GetAutomodSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetAutomodSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetAutomodSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetAutomodSettingsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetAutomodSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetAutomodSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetAutomodSettingsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetAutomodSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAutomodSettingsWithResponse'
type Api_GetAutomodSettingsWithResponse_Call struct {
	*mock.Call
}

// GetAutomodSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetAutomodSettingsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetAutomodSettingsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetAutomodSettingsWithResponse_Call {
	return &Api_GetAutomodSettingsWithResponse_Call{Call: _e.mock.On("GetAutomodSettingsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetAutomodSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetAutomodSettingsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetAutomodSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetAutomodSettingsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetAutomodSettingsWithResponse_Call) Return(_a0 *twitchApi.GetAutomodSettingsHTTPResponse, _a1 error) *Api_GetAutomodSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetAutomodSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetAutomodSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetAutomodSettingsHTTPResponse, error)) *Api_GetAutomodSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetBannedUsersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetBannedUsersWithResponse(ctx context.Context, params *twitchApi.GetBannedUsersParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetBannedUsersHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBannedUsersWithResponse")
	}

	var r0 *twitchApi.GetBannedUsersHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBannedUsersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBannedUsersHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBannedUsersParams, ...twitchApi.RequestEditorFn) *twitchApi.GetBannedUsersHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetBannedUsersHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetBannedUsersParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetBannedUsersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBannedUsersWithResponse'
type Api_GetBannedUsersWithResponse_Call struct {
	*mock.Call
}

// GetBannedUsersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetBannedUsersParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetBannedUsersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetBannedUsersWithResponse_Call {
	return &Api_GetBannedUsersWithResponse_Call{Call: _e.mock.On("GetBannedUsersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetBannedUsersWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetBannedUsersParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetBannedUsersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetBannedUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetBannedUsersWithResponse_Call) Return(_a0 *twitchApi.GetBannedUsersHTTPResponse, _a1 error) *Api_GetBannedUsersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetBannedUsersWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetBannedUsersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBannedUsersHTTPResponse, error)) *Api_GetBannedUsersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetBitsLeaderboardWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetBitsLeaderboardWithResponse(ctx context.Context, params *twitchApi.GetBitsLeaderboardParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetBitsLeaderboardHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBitsLeaderboardWithResponse")
	}

	var r0 *twitchApi.GetBitsLeaderboardHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBitsLeaderboardParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBitsLeaderboardHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBitsLeaderboardParams, ...twitchApi.RequestEditorFn) *twitchApi.GetBitsLeaderboardHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetBitsLeaderboardHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetBitsLeaderboardParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetBitsLeaderboardWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBitsLeaderboardWithResponse'
type Api_GetBitsLeaderboardWithResponse_Call struct {
	*mock.Call
}

// GetBitsLeaderboardWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetBitsLeaderboardParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetBitsLeaderboardWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetBitsLeaderboardWithResponse_Call {
	return &Api_GetBitsLeaderboardWithResponse_Call{Call: _e.mock.On("GetBitsLeaderboardWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetBitsLeaderboardWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetBitsLeaderboardParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetBitsLeaderboardWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetBitsLeaderboardParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetBitsLeaderboardWithResponse_Call) Return(_a0 *twitchApi.GetBitsLeaderboardHTTPResponse, _a1 error) *Api_GetBitsLeaderboardWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetBitsLeaderboardWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetBitsLeaderboardParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBitsLeaderboardHTTPResponse, error)) *Api_GetBitsLeaderboardWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockedTermsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetBlockedTermsWithResponse(ctx context.Context, params *twitchApi.GetBlockedTermsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetBlockedTermsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockedTermsWithResponse")
	}

	var r0 *twitchApi.GetBlockedTermsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBlockedTermsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBlockedTermsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBlockedTermsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetBlockedTermsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetBlockedTermsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetBlockedTermsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetBlockedTermsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockedTermsWithResponse'
type Api_GetBlockedTermsWithResponse_Call struct {
	*mock.Call
}

// GetBlockedTermsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetBlockedTermsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetBlockedTermsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetBlockedTermsWithResponse_Call {
	return &Api_GetBlockedTermsWithResponse_Call{Call: _e.mock.On("GetBlockedTermsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetBlockedTermsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetBlockedTermsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetBlockedTermsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetBlockedTermsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetBlockedTermsWithResponse_Call) Return(_a0 *twitchApi.GetBlockedTermsHTTPResponse, _a1 error) *Api_GetBlockedTermsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetBlockedTermsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetBlockedTermsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBlockedTermsHTTPResponse, error)) *Api_GetBlockedTermsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetBroadcasterSubscriptionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetBroadcasterSubscriptionsWithResponse(ctx context.Context, params *twitchApi.GetBroadcasterSubscriptionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetBroadcasterSubscriptionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBroadcasterSubscriptionsWithResponse")
	}

	var r0 *twitchApi.GetBroadcasterSubscriptionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBroadcasterSubscriptionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBroadcasterSubscriptionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetBroadcasterSubscriptionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetBroadcasterSubscriptionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetBroadcasterSubscriptionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetBroadcasterSubscriptionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetBroadcasterSubscriptionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBroadcasterSubscriptionsWithResponse'
type Api_GetBroadcasterSubscriptionsWithResponse_Call struct {
	*mock.Call
}

// GetBroadcasterSubscriptionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetBroadcasterSubscriptionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetBroadcasterSubscriptionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetBroadcasterSubscriptionsWithResponse_Call {
	return &Api_GetBroadcasterSubscriptionsWithResponse_Call{Call: _e.mock.On("GetBroadcasterSubscriptionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetBroadcasterSubscriptionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetBroadcasterSubscriptionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetBroadcasterSubscriptionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetBroadcasterSubscriptionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetBroadcasterSubscriptionsWithResponse_Call) Return(_a0 *twitchApi.GetBroadcasterSubscriptionsHTTPResponse, _a1 error) *Api_GetBroadcasterSubscriptionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetBroadcasterSubscriptionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetBroadcasterSubscriptionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetBroadcasterSubscriptionsHTTPResponse, error)) *Api_GetBroadcasterSubscriptionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelChatBadgesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelChatBadgesWithResponse(ctx context.Context, params *twitchApi.GetChannelChatBadgesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelChatBadgesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelChatBadgesWithResponse")
	}

	var r0 *twitchApi.GetChannelChatBadgesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelChatBadgesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelChatBadgesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelChatBadgesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelChatBadgesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelChatBadgesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelChatBadgesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelChatBadgesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelChatBadgesWithResponse'
type Api_GetChannelChatBadgesWithResponse_Call struct {
	*mock.Call
}

// GetChannelChatBadgesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelChatBadgesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelChatBadgesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelChatBadgesWithResponse_Call {
	return &Api_GetChannelChatBadgesWithResponse_Call{Call: _e.mock.On("GetChannelChatBadgesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelChatBadgesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelChatBadgesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelChatBadgesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelChatBadgesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelChatBadgesWithResponse_Call) Return(_a0 *twitchApi.GetChannelChatBadgesHTTPResponse, _a1 error) *Api_GetChannelChatBadgesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelChatBadgesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelChatBadgesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelChatBadgesHTTPResponse, error)) *Api_GetChannelChatBadgesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelEditorsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelEditorsWithResponse(ctx context.Context, params *twitchApi.GetChannelEditorsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelEditorsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelEditorsWithResponse")
	}

	var r0 *twitchApi.GetChannelEditorsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelEditorsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelEditorsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelEditorsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelEditorsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelEditorsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelEditorsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelEditorsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelEditorsWithResponse'
type Api_GetChannelEditorsWithResponse_Call struct {
	*mock.Call
}

// GetChannelEditorsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelEditorsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelEditorsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelEditorsWithResponse_Call {
	return &Api_GetChannelEditorsWithResponse_Call{Call: _e.mock.On("GetChannelEditorsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelEditorsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelEditorsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelEditorsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelEditorsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelEditorsWithResponse_Call) Return(_a0 *twitchApi.GetChannelEditorsHTTPResponse, _a1 error) *Api_GetChannelEditorsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelEditorsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelEditorsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelEditorsHTTPResponse, error)) *Api_GetChannelEditorsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelEmotesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelEmotesWithResponse(ctx context.Context, params *twitchApi.GetChannelEmotesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelEmotesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelEmotesWithResponse")
	}

	var r0 *twitchApi.GetChannelEmotesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelEmotesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelEmotesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelEmotesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelEmotesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelEmotesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelEmotesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelEmotesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelEmotesWithResponse'
type Api_GetChannelEmotesWithResponse_Call struct {
	*mock.Call
}

// GetChannelEmotesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelEmotesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelEmotesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelEmotesWithResponse_Call {
	return &Api_GetChannelEmotesWithResponse_Call{Call: _e.mock.On("GetChannelEmotesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelEmotesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelEmotesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelEmotesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelEmotesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelEmotesWithResponse_Call) Return(_a0 *twitchApi.GetChannelEmotesHTTPResponse, _a1 error) *Api_GetChannelEmotesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelEmotesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelEmotesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelEmotesHTTPResponse, error)) *Api_GetChannelEmotesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelFollowersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelFollowersWithResponse(ctx context.Context, params *twitchApi.GetChannelFollowersParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelFollowersHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelFollowersWithResponse")
	}

	var r0 *twitchApi.GetChannelFollowersHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelFollowersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelFollowersHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelFollowersParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelFollowersHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelFollowersHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelFollowersParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelFollowersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelFollowersWithResponse'
type Api_GetChannelFollowersWithResponse_Call struct {
	*mock.Call
}

// GetChannelFollowersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelFollowersParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelFollowersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelFollowersWithResponse_Call {
	return &Api_GetChannelFollowersWithResponse_Call{Call: _e.mock.On("GetChannelFollowersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelFollowersWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelFollowersParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelFollowersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelFollowersParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelFollowersWithResponse_Call) Return(_a0 *twitchApi.GetChannelFollowersHTTPResponse, _a1 error) *Api_GetChannelFollowersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelFollowersWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelFollowersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelFollowersHTTPResponse, error)) *Api_GetChannelFollowersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelGuestStarSettingsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelGuestStarSettingsWithResponse(ctx context.Context, params *twitchApi.GetChannelGuestStarSettingsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelGuestStarSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelGuestStarSettingsWithResponse")
	}

	var r0 *twitchApi.GetChannelGuestStarSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelGuestStarSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelGuestStarSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelGuestStarSettingsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelGuestStarSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelGuestStarSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelGuestStarSettingsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelGuestStarSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelGuestStarSettingsWithResponse'
type Api_GetChannelGuestStarSettingsWithResponse_Call struct {
	*mock.Call
}

// GetChannelGuestStarSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelGuestStarSettingsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelGuestStarSettingsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelGuestStarSettingsWithResponse_Call {
	return &Api_GetChannelGuestStarSettingsWithResponse_Call{Call: _e.mock.On("GetChannelGuestStarSettingsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelGuestStarSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelGuestStarSettingsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelGuestStarSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelGuestStarSettingsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelGuestStarSettingsWithResponse_Call) Return(_a0 *twitchApi.GetChannelGuestStarSettingsHTTPResponse, _a1 error) *Api_GetChannelGuestStarSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelGuestStarSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelGuestStarSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelGuestStarSettingsHTTPResponse, error)) *Api_GetChannelGuestStarSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelIcalendarWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelIcalendarWithResponse(ctx context.Context, params *twitchApi.GetChannelIcalendarParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelIcalendarHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelIcalendarWithResponse")
	}

	var r0 *twitchApi.GetChannelIcalendarHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelIcalendarParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelIcalendarHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelIcalendarParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelIcalendarHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelIcalendarHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelIcalendarParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelIcalendarWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelIcalendarWithResponse'
type Api_GetChannelIcalendarWithResponse_Call struct {
	*mock.Call
}

// GetChannelIcalendarWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelIcalendarParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelIcalendarWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelIcalendarWithResponse_Call {
	return &Api_GetChannelIcalendarWithResponse_Call{Call: _e.mock.On("GetChannelIcalendarWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelIcalendarWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelIcalendarParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelIcalendarWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelIcalendarParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelIcalendarWithResponse_Call) Return(_a0 *twitchApi.GetChannelIcalendarHTTPResponse, _a1 error) *Api_GetChannelIcalendarWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelIcalendarWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelIcalendarParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelIcalendarHTTPResponse, error)) *Api_GetChannelIcalendarWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelInformationWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelInformationWithResponse(ctx context.Context, params *twitchApi.GetChannelInformationParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelInformationHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelInformationWithResponse")
	}

	var r0 *twitchApi.GetChannelInformationHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelInformationParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelInformationHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelInformationParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelInformationHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelInformationHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelInformationParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelInformationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelInformationWithResponse'
type Api_GetChannelInformationWithResponse_Call struct {
	*mock.Call
}

// GetChannelInformationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelInformationParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelInformationWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelInformationWithResponse_Call {
	return &Api_GetChannelInformationWithResponse_Call{Call: _e.mock.On("GetChannelInformationWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelInformationWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelInformationParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelInformationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelInformationParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelInformationWithResponse_Call) Return(_a0 *twitchApi.GetChannelInformationHTTPResponse, _a1 error) *Api_GetChannelInformationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelInformationWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelInformationParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelInformationHTTPResponse, error)) *Api_GetChannelInformationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelStreamScheduleWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelStreamScheduleWithResponse(ctx context.Context, params *twitchApi.GetChannelStreamScheduleParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelStreamScheduleHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelStreamScheduleWithResponse")
	}

	var r0 *twitchApi.GetChannelStreamScheduleHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelStreamScheduleHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelStreamScheduleHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelStreamScheduleHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelStreamScheduleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelStreamScheduleWithResponse'
type Api_GetChannelStreamScheduleWithResponse_Call struct {
	*mock.Call
}

// GetChannelStreamScheduleWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelStreamScheduleParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelStreamScheduleWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelStreamScheduleWithResponse_Call {
	return &Api_GetChannelStreamScheduleWithResponse_Call{Call: _e.mock.On("GetChannelStreamScheduleWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelStreamScheduleWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelStreamScheduleParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelStreamScheduleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelStreamScheduleParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelStreamScheduleWithResponse_Call) Return(_a0 *twitchApi.GetChannelStreamScheduleHTTPResponse, _a1 error) *Api_GetChannelStreamScheduleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelStreamScheduleWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelStreamScheduleHTTPResponse, error)) *Api_GetChannelStreamScheduleWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelTeamsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChannelTeamsWithResponse(ctx context.Context, params *twitchApi.GetChannelTeamsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelTeamsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelTeamsWithResponse")
	}

	var r0 *twitchApi.GetChannelTeamsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelTeamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelTeamsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChannelTeamsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChannelTeamsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChannelTeamsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChannelTeamsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChannelTeamsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelTeamsWithResponse'
type Api_GetChannelTeamsWithResponse_Call struct {
	*mock.Call
}

// GetChannelTeamsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChannelTeamsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChannelTeamsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChannelTeamsWithResponse_Call {
	return &Api_GetChannelTeamsWithResponse_Call{Call: _e.mock.On("GetChannelTeamsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChannelTeamsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChannelTeamsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChannelTeamsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChannelTeamsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChannelTeamsWithResponse_Call) Return(_a0 *twitchApi.GetChannelTeamsHTTPResponse, _a1 error) *Api_GetChannelTeamsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChannelTeamsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChannelTeamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChannelTeamsHTTPResponse, error)) *Api_GetChannelTeamsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharityCampaignDonationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetCharityCampaignDonationsWithResponse(ctx context.Context, params *twitchApi.GetCharityCampaignDonationsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetCharityCampaignDonationsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCharityCampaignDonationsWithResponse")
	}

	var r0 *twitchApi.GetCharityCampaignDonationsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCharityCampaignDonationsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCharityCampaignDonationsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCharityCampaignDonationsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetCharityCampaignDonationsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetCharityCampaignDonationsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetCharityCampaignDonationsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetCharityCampaignDonationsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharityCampaignDonationsWithResponse'
type Api_GetCharityCampaignDonationsWithResponse_Call struct {
	*mock.Call
}

// GetCharityCampaignDonationsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetCharityCampaignDonationsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetCharityCampaignDonationsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetCharityCampaignDonationsWithResponse_Call {
	return &Api_GetCharityCampaignDonationsWithResponse_Call{Call: _e.mock.On("GetCharityCampaignDonationsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetCharityCampaignDonationsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetCharityCampaignDonationsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetCharityCampaignDonationsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetCharityCampaignDonationsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetCharityCampaignDonationsWithResponse_Call) Return(_a0 *twitchApi.GetCharityCampaignDonationsHTTPResponse, _a1 error) *Api_GetCharityCampaignDonationsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetCharityCampaignDonationsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetCharityCampaignDonationsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCharityCampaignDonationsHTTPResponse, error)) *Api_GetCharityCampaignDonationsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharityCampaignWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetCharityCampaignWithResponse(ctx context.Context, params *twitchApi.GetCharityCampaignParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetCharityCampaignHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCharityCampaignWithResponse")
	}

	var r0 *twitchApi.GetCharityCampaignHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCharityCampaignParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCharityCampaignHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCharityCampaignParams, ...twitchApi.RequestEditorFn) *twitchApi.GetCharityCampaignHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetCharityCampaignHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetCharityCampaignParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetCharityCampaignWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharityCampaignWithResponse'
type Api_GetCharityCampaignWithResponse_Call struct {
	*mock.Call
}

// GetCharityCampaignWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetCharityCampaignParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetCharityCampaignWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetCharityCampaignWithResponse_Call {
	return &Api_GetCharityCampaignWithResponse_Call{Call: _e.mock.On("GetCharityCampaignWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetCharityCampaignWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetCharityCampaignParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetCharityCampaignWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetCharityCampaignParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetCharityCampaignWithResponse_Call) Return(_a0 *twitchApi.GetCharityCampaignHTTPResponse, _a1 error) *Api_GetCharityCampaignWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetCharityCampaignWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetCharityCampaignParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCharityCampaignHTTPResponse, error)) *Api_GetCharityCampaignWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatSettingsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChatSettingsWithResponse(ctx context.Context, params *twitchApi.GetChatSettingsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChatSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChatSettingsWithResponse")
	}

	var r0 *twitchApi.GetChatSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChatSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChatSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChatSettingsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChatSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChatSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChatSettingsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChatSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatSettingsWithResponse'
type Api_GetChatSettingsWithResponse_Call struct {
	*mock.Call
}

// GetChatSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChatSettingsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChatSettingsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChatSettingsWithResponse_Call {
	return &Api_GetChatSettingsWithResponse_Call{Call: _e.mock.On("GetChatSettingsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChatSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChatSettingsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChatSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChatSettingsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChatSettingsWithResponse_Call) Return(_a0 *twitchApi.GetChatSettingsHTTPResponse, _a1 error) *Api_GetChatSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChatSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChatSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChatSettingsHTTPResponse, error)) *Api_GetChatSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetChattersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetChattersWithResponse(ctx context.Context, params *twitchApi.GetChattersParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetChattersHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChattersWithResponse")
	}

	var r0 *twitchApi.GetChattersHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChattersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChattersHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetChattersParams, ...twitchApi.RequestEditorFn) *twitchApi.GetChattersHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetChattersHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetChattersParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetChattersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChattersWithResponse'
type Api_GetChattersWithResponse_Call struct {
	*mock.Call
}

// GetChattersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetChattersParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetChattersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetChattersWithResponse_Call {
	return &Api_GetChattersWithResponse_Call{Call: _e.mock.On("GetChattersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetChattersWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetChattersParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetChattersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetChattersParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetChattersWithResponse_Call) Return(_a0 *twitchApi.GetChattersHTTPResponse, _a1 error) *Api_GetChattersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetChattersWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetChattersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetChattersHTTPResponse, error)) *Api_GetChattersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheermotesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetCheermotesWithResponse(ctx context.Context, params *twitchApi.GetCheermotesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetCheermotesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCheermotesWithResponse")
	}

	var r0 *twitchApi.GetCheermotesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCheermotesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCheermotesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCheermotesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetCheermotesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetCheermotesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetCheermotesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetCheermotesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheermotesWithResponse'
type Api_GetCheermotesWithResponse_Call struct {
	*mock.Call
}

// GetCheermotesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetCheermotesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetCheermotesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetCheermotesWithResponse_Call {
	return &Api_GetCheermotesWithResponse_Call{Call: _e.mock.On("GetCheermotesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetCheermotesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetCheermotesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetCheermotesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetCheermotesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetCheermotesWithResponse_Call) Return(_a0 *twitchApi.GetCheermotesHTTPResponse, _a1 error) *Api_GetCheermotesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetCheermotesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetCheermotesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCheermotesHTTPResponse, error)) *Api_GetCheermotesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetClipsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetClipsWithResponse(ctx context.Context, params *twitchApi.GetClipsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetClipsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClipsWithResponse")
	}

	var r0 *twitchApi.GetClipsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetClipsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetClipsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetClipsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetClipsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetClipsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetClipsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetClipsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClipsWithResponse'
type Api_GetClipsWithResponse_Call struct {
	*mock.Call
}

// GetClipsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetClipsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetClipsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetClipsWithResponse_Call {
	return &Api_GetClipsWithResponse_Call{Call: _e.mock.On("GetClipsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetClipsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetClipsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetClipsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetClipsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetClipsWithResponse_Call) Return(_a0 *twitchApi.GetClipsHTTPResponse, _a1 error) *Api_GetClipsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetClipsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetClipsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetClipsHTTPResponse, error)) *Api_GetClipsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetConduitShardsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetConduitShardsWithResponse(ctx context.Context, params *twitchApi.GetConduitShardsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetConduitShardsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConduitShardsWithResponse")
	}

	var r0 *twitchApi.GetConduitShardsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetConduitShardsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetConduitShardsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetConduitShardsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetConduitShardsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetConduitShardsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetConduitShardsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetConduitShardsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConduitShardsWithResponse'
type Api_GetConduitShardsWithResponse_Call struct {
	*mock.Call
}

// GetConduitShardsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetConduitShardsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetConduitShardsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetConduitShardsWithResponse_Call {
	return &Api_GetConduitShardsWithResponse_Call{Call: _e.mock.On("GetConduitShardsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetConduitShardsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetConduitShardsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetConduitShardsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetConduitShardsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetConduitShardsWithResponse_Call) Return(_a0 *twitchApi.GetConduitShardsHTTPResponse, _a1 error) *Api_GetConduitShardsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetConduitShardsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetConduitShardsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetConduitShardsHTTPResponse, error)) *Api_GetConduitShardsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetConduitsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *Api) GetConduitsWithResponse(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetConduitsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConduitsWithResponse")
	}

	var r0 *twitchApi.GetConduitsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetConduitsHTTPResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) *twitchApi.GetConduitsHTTPResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetConduitsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetConduitsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConduitsWithResponse'
type Api_GetConduitsWithResponse_Call struct {
	*mock.Call
}

// GetConduitsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetConduitsWithResponse(ctx interface{}, reqEditors ...interface{}) *Api_GetConduitsWithResponse_Call {
	return &Api_GetConduitsWithResponse_Call{Call: _e.mock.On("GetConduitsWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *Api_GetConduitsWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetConduitsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetConduitsWithResponse_Call) Return(_a0 *twitchApi.GetConduitsHTTPResponse, _a1 error) *Api_GetConduitsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetConduitsWithResponse_Call) RunAndReturn(run func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetConduitsHTTPResponse, error)) *Api_GetConduitsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetContentClassificationLabelsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetContentClassificationLabelsWithResponse(ctx context.Context, params *twitchApi.GetContentClassificationLabelsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetContentClassificationLabelsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContentClassificationLabelsWithResponse")
	}

	var r0 *twitchApi.GetContentClassificationLabelsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetContentClassificationLabelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetContentClassificationLabelsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetContentClassificationLabelsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetContentClassificationLabelsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetContentClassificationLabelsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetContentClassificationLabelsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetContentClassificationLabelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentClassificationLabelsWithResponse'
type Api_GetContentClassificationLabelsWithResponse_Call struct {
	*mock.Call
}

// GetContentClassificationLabelsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetContentClassificationLabelsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetContentClassificationLabelsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetContentClassificationLabelsWithResponse_Call {
	return &Api_GetContentClassificationLabelsWithResponse_Call{Call: _e.mock.On("GetContentClassificationLabelsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetContentClassificationLabelsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetContentClassificationLabelsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetContentClassificationLabelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetContentClassificationLabelsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetContentClassificationLabelsWithResponse_Call) Return(_a0 *twitchApi.GetContentClassificationLabelsHTTPResponse, _a1 error) *Api_GetContentClassificationLabelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetContentClassificationLabelsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetContentClassificationLabelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetContentClassificationLabelsHTTPResponse, error)) *Api_GetContentClassificationLabelsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorGoalsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetCreatorGoalsWithResponse(ctx context.Context, params *twitchApi.GetCreatorGoalsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetCreatorGoalsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorGoalsWithResponse")
	}

	var r0 *twitchApi.GetCreatorGoalsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCreatorGoalsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCreatorGoalsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCreatorGoalsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetCreatorGoalsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetCreatorGoalsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetCreatorGoalsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetCreatorGoalsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorGoalsWithResponse'
type Api_GetCreatorGoalsWithResponse_Call struct {
	*mock.Call
}

// GetCreatorGoalsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetCreatorGoalsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetCreatorGoalsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetCreatorGoalsWithResponse_Call {
	return &Api_GetCreatorGoalsWithResponse_Call{Call: _e.mock.On("GetCreatorGoalsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetCreatorGoalsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetCreatorGoalsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetCreatorGoalsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetCreatorGoalsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetCreatorGoalsWithResponse_Call) Return(_a0 *twitchApi.GetCreatorGoalsHTTPResponse, _a1 error) *Api_GetCreatorGoalsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetCreatorGoalsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetCreatorGoalsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCreatorGoalsHTTPResponse, error)) *Api_GetCreatorGoalsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomRewardRedemptionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetCustomRewardRedemptionWithResponse(ctx context.Context, params *twitchApi.GetCustomRewardRedemptionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetCustomRewardRedemptionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomRewardRedemptionWithResponse")
	}

	var r0 *twitchApi.GetCustomRewardRedemptionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCustomRewardRedemptionParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCustomRewardRedemptionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCustomRewardRedemptionParams, ...twitchApi.RequestEditorFn) *twitchApi.GetCustomRewardRedemptionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetCustomRewardRedemptionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetCustomRewardRedemptionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetCustomRewardRedemptionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomRewardRedemptionWithResponse'
type Api_GetCustomRewardRedemptionWithResponse_Call struct {
	*mock.Call
}

// GetCustomRewardRedemptionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetCustomRewardRedemptionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetCustomRewardRedemptionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetCustomRewardRedemptionWithResponse_Call {
	return &Api_GetCustomRewardRedemptionWithResponse_Call{Call: _e.mock.On("GetCustomRewardRedemptionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetCustomRewardRedemptionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetCustomRewardRedemptionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetCustomRewardRedemptionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetCustomRewardRedemptionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetCustomRewardRedemptionWithResponse_Call) Return(_a0 *twitchApi.GetCustomRewardRedemptionHTTPResponse, _a1 error) *Api_GetCustomRewardRedemptionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetCustomRewardRedemptionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetCustomRewardRedemptionParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCustomRewardRedemptionHTTPResponse, error)) *Api_GetCustomRewardRedemptionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomRewardWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetCustomRewardWithResponse(ctx context.Context, params *twitchApi.GetCustomRewardParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetCustomRewardHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomRewardWithResponse")
	}

	var r0 *twitchApi.GetCustomRewardHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCustomRewardParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCustomRewardHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetCustomRewardParams, ...twitchApi.RequestEditorFn) *twitchApi.GetCustomRewardHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetCustomRewardHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetCustomRewardParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetCustomRewardWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomRewardWithResponse'
type Api_GetCustomRewardWithResponse_Call struct {
	*mock.Call
}

// GetCustomRewardWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetCustomRewardParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetCustomRewardWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetCustomRewardWithResponse_Call {
	return &Api_GetCustomRewardWithResponse_Call{Call: _e.mock.On("GetCustomRewardWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetCustomRewardWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetCustomRewardParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetCustomRewardWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetCustomRewardParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetCustomRewardWithResponse_Call) Return(_a0 *twitchApi.GetCustomRewardHTTPResponse, _a1 error) *Api_GetCustomRewardWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetCustomRewardWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetCustomRewardParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetCustomRewardHTTPResponse, error)) *Api_GetCustomRewardWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetDropsEntitlementsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetDropsEntitlementsWithResponse(ctx context.Context, params *twitchApi.GetDropsEntitlementsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetDropsEntitlementsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDropsEntitlementsWithResponse")
	}

	var r0 *twitchApi.GetDropsEntitlementsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetDropsEntitlementsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetDropsEntitlementsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetDropsEntitlementsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetDropsEntitlementsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetDropsEntitlementsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetDropsEntitlementsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetDropsEntitlementsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDropsEntitlementsWithResponse'
type Api_GetDropsEntitlementsWithResponse_Call struct {
	*mock.Call
}

// GetDropsEntitlementsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetDropsEntitlementsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetDropsEntitlementsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetDropsEntitlementsWithResponse_Call {
	return &Api_GetDropsEntitlementsWithResponse_Call{Call: _e.mock.On("GetDropsEntitlementsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetDropsEntitlementsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetDropsEntitlementsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetDropsEntitlementsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetDropsEntitlementsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetDropsEntitlementsWithResponse_Call) Return(_a0 *twitchApi.GetDropsEntitlementsHTTPResponse, _a1 error) *Api_GetDropsEntitlementsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetDropsEntitlementsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetDropsEntitlementsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetDropsEntitlementsHTTPResponse, error)) *Api_GetDropsEntitlementsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmoteSetsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetEmoteSetsWithResponse(ctx context.Context, params *twitchApi.GetEmoteSetsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetEmoteSetsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmoteSetsWithResponse")
	}

	var r0 *twitchApi.GetEmoteSetsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetEmoteSetsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetEmoteSetsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetEmoteSetsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetEmoteSetsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetEmoteSetsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetEmoteSetsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetEmoteSetsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmoteSetsWithResponse'
type Api_GetEmoteSetsWithResponse_Call struct {
	*mock.Call
}

// GetEmoteSetsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetEmoteSetsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetEmoteSetsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetEmoteSetsWithResponse_Call {
	return &Api_GetEmoteSetsWithResponse_Call{Call: _e.mock.On("GetEmoteSetsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetEmoteSetsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetEmoteSetsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetEmoteSetsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetEmoteSetsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetEmoteSetsWithResponse_Call) Return(_a0 *twitchApi.GetEmoteSetsHTTPResponse, _a1 error) *Api_GetEmoteSetsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetEmoteSetsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetEmoteSetsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetEmoteSetsHTTPResponse, error)) *Api_GetEmoteSetsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsubSubscriptionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetEventsubSubscriptionsWithResponse(ctx context.Context, params *twitchApi.GetEventsubSubscriptionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetEventsubSubscriptionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsubSubscriptionsWithResponse")
	}

	var r0 *twitchApi.GetEventsubSubscriptionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetEventsubSubscriptionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetEventsubSubscriptionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetEventsubSubscriptionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetEventsubSubscriptionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetEventsubSubscriptionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetEventsubSubscriptionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetEventsubSubscriptionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsubSubscriptionsWithResponse'
type Api_GetEventsubSubscriptionsWithResponse_Call struct {
	*mock.Call
}

// GetEventsubSubscriptionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetEventsubSubscriptionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetEventsubSubscriptionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetEventsubSubscriptionsWithResponse_Call {
	return &Api_GetEventsubSubscriptionsWithResponse_Call{Call: _e.mock.On("GetEventsubSubscriptionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetEventsubSubscriptionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetEventsubSubscriptionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetEventsubSubscriptionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetEventsubSubscriptionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetEventsubSubscriptionsWithResponse_Call) Return(_a0 *twitchApi.GetEventsubSubscriptionsHTTPResponse, _a1 error) *Api_GetEventsubSubscriptionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetEventsubSubscriptionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetEventsubSubscriptionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetEventsubSubscriptionsHTTPResponse, error)) *Api_GetEventsubSubscriptionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionAnalyticsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetExtensionAnalyticsWithResponse(ctx context.Context, params *twitchApi.GetExtensionAnalyticsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionAnalyticsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionAnalyticsWithResponse")
	}

	var r0 *twitchApi.GetExtensionAnalyticsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionAnalyticsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionAnalyticsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionAnalyticsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionAnalyticsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionAnalyticsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetExtensionAnalyticsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionAnalyticsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionAnalyticsWithResponse'
type Api_GetExtensionAnalyticsWithResponse_Call struct {
	*mock.Call
}

// GetExtensionAnalyticsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetExtensionAnalyticsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionAnalyticsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetExtensionAnalyticsWithResponse_Call {
	return &Api_GetExtensionAnalyticsWithResponse_Call{Call: _e.mock.On("GetExtensionAnalyticsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetExtensionAnalyticsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetExtensionAnalyticsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionAnalyticsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetExtensionAnalyticsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionAnalyticsWithResponse_Call) Return(_a0 *twitchApi.GetExtensionAnalyticsHTTPResponse, _a1 error) *Api_GetExtensionAnalyticsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionAnalyticsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetExtensionAnalyticsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionAnalyticsHTTPResponse, error)) *Api_GetExtensionAnalyticsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionBitsProductsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetExtensionBitsProductsWithResponse(ctx context.Context, params *twitchApi.GetExtensionBitsProductsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionBitsProductsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionBitsProductsWithResponse")
	}

	var r0 *twitchApi.GetExtensionBitsProductsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionBitsProductsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionBitsProductsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionBitsProductsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionBitsProductsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionBitsProductsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetExtensionBitsProductsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionBitsProductsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionBitsProductsWithResponse'
type Api_GetExtensionBitsProductsWithResponse_Call struct {
	*mock.Call
}

// GetExtensionBitsProductsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetExtensionBitsProductsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionBitsProductsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetExtensionBitsProductsWithResponse_Call {
	return &Api_GetExtensionBitsProductsWithResponse_Call{Call: _e.mock.On("GetExtensionBitsProductsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetExtensionBitsProductsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetExtensionBitsProductsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionBitsProductsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetExtensionBitsProductsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionBitsProductsWithResponse_Call) Return(_a0 *twitchApi.GetExtensionBitsProductsHTTPResponse, _a1 error) *Api_GetExtensionBitsProductsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionBitsProductsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetExtensionBitsProductsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionBitsProductsHTTPResponse, error)) *Api_GetExtensionBitsProductsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionConfigurationSegmentWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetExtensionConfigurationSegmentWithResponse(ctx context.Context, params *twitchApi.GetExtensionConfigurationSegmentParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionConfigurationSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionConfigurationSegmentWithResponse")
	}

	var r0 *twitchApi.GetExtensionConfigurationSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionConfigurationSegmentParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionConfigurationSegmentHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionConfigurationSegmentParams, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionConfigurationSegmentHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionConfigurationSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetExtensionConfigurationSegmentParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionConfigurationSegmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionConfigurationSegmentWithResponse'
type Api_GetExtensionConfigurationSegmentWithResponse_Call struct {
	*mock.Call
}

// GetExtensionConfigurationSegmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetExtensionConfigurationSegmentParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionConfigurationSegmentWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetExtensionConfigurationSegmentWithResponse_Call {
	return &Api_GetExtensionConfigurationSegmentWithResponse_Call{Call: _e.mock.On("GetExtensionConfigurationSegmentWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetExtensionConfigurationSegmentWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetExtensionConfigurationSegmentParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionConfigurationSegmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetExtensionConfigurationSegmentParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionConfigurationSegmentWithResponse_Call) Return(_a0 *twitchApi.GetExtensionConfigurationSegmentHTTPResponse, _a1 error) *Api_GetExtensionConfigurationSegmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionConfigurationSegmentWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetExtensionConfigurationSegmentParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionConfigurationSegmentHTTPResponse, error)) *Api_GetExtensionConfigurationSegmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionLiveChannelsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetExtensionLiveChannelsWithResponse(ctx context.Context, params *twitchApi.GetExtensionLiveChannelsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionLiveChannelsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionLiveChannelsWithResponse")
	}

	var r0 *twitchApi.GetExtensionLiveChannelsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionLiveChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionLiveChannelsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionLiveChannelsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionLiveChannelsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionLiveChannelsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetExtensionLiveChannelsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionLiveChannelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionLiveChannelsWithResponse'
type Api_GetExtensionLiveChannelsWithResponse_Call struct {
	*mock.Call
}

// GetExtensionLiveChannelsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetExtensionLiveChannelsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionLiveChannelsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetExtensionLiveChannelsWithResponse_Call {
	return &Api_GetExtensionLiveChannelsWithResponse_Call{Call: _e.mock.On("GetExtensionLiveChannelsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetExtensionLiveChannelsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetExtensionLiveChannelsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionLiveChannelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetExtensionLiveChannelsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionLiveChannelsWithResponse_Call) Return(_a0 *twitchApi.GetExtensionLiveChannelsHTTPResponse, _a1 error) *Api_GetExtensionLiveChannelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionLiveChannelsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetExtensionLiveChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionLiveChannelsHTTPResponse, error)) *Api_GetExtensionLiveChannelsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionSecretsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *Api) GetExtensionSecretsWithResponse(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionSecretsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionSecretsWithResponse")
	}

	var r0 *twitchApi.GetExtensionSecretsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionSecretsHTTPResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionSecretsHTTPResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionSecretsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionSecretsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionSecretsWithResponse'
type Api_GetExtensionSecretsWithResponse_Call struct {
	*mock.Call
}

// GetExtensionSecretsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionSecretsWithResponse(ctx interface{}, reqEditors ...interface{}) *Api_GetExtensionSecretsWithResponse_Call {
	return &Api_GetExtensionSecretsWithResponse_Call{Call: _e.mock.On("GetExtensionSecretsWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *Api_GetExtensionSecretsWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionSecretsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionSecretsWithResponse_Call) Return(_a0 *twitchApi.GetExtensionSecretsHTTPResponse, _a1 error) *Api_GetExtensionSecretsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionSecretsWithResponse_Call) RunAndReturn(run func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionSecretsHTTPResponse, error)) *Api_GetExtensionSecretsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionTransactionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetExtensionTransactionsWithResponse(ctx context.Context, params *twitchApi.GetExtensionTransactionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionTransactionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionTransactionsWithResponse")
	}

	var r0 *twitchApi.GetExtensionTransactionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionTransactionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionTransactionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionTransactionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionTransactionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionTransactionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetExtensionTransactionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionTransactionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionTransactionsWithResponse'
type Api_GetExtensionTransactionsWithResponse_Call struct {
	*mock.Call
}

// GetExtensionTransactionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetExtensionTransactionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionTransactionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetExtensionTransactionsWithResponse_Call {
	return &Api_GetExtensionTransactionsWithResponse_Call{Call: _e.mock.On("GetExtensionTransactionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetExtensionTransactionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetExtensionTransactionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionTransactionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetExtensionTransactionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionTransactionsWithResponse_Call) Return(_a0 *twitchApi.GetExtensionTransactionsHTTPResponse, _a1 error) *Api_GetExtensionTransactionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionTransactionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetExtensionTransactionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionTransactionsHTTPResponse, error)) *Api_GetExtensionTransactionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtensionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetExtensionsWithResponse(ctx context.Context, params *twitchApi.GetExtensionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionsWithResponse")
	}

	var r0 *twitchApi.GetExtensionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetExtensionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetExtensionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetExtensionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetExtensionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetExtensionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtensionsWithResponse'
type Api_GetExtensionsWithResponse_Call struct {
	*mock.Call
}

// GetExtensionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetExtensionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetExtensionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetExtensionsWithResponse_Call {
	return &Api_GetExtensionsWithResponse_Call{Call: _e.mock.On("GetExtensionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetExtensionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetExtensionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetExtensionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetExtensionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetExtensionsWithResponse_Call) Return(_a0 *twitchApi.GetExtensionsHTTPResponse, _a1 error) *Api_GetExtensionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetExtensionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetExtensionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetExtensionsHTTPResponse, error)) *Api_GetExtensionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowedChannelsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetFollowedChannelsWithResponse(ctx context.Context, params *twitchApi.GetFollowedChannelsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetFollowedChannelsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowedChannelsWithResponse")
	}

	var r0 *twitchApi.GetFollowedChannelsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetFollowedChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetFollowedChannelsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetFollowedChannelsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetFollowedChannelsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetFollowedChannelsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetFollowedChannelsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetFollowedChannelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowedChannelsWithResponse'
type Api_GetFollowedChannelsWithResponse_Call struct {
	*mock.Call
}

// GetFollowedChannelsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetFollowedChannelsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetFollowedChannelsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetFollowedChannelsWithResponse_Call {
	return &Api_GetFollowedChannelsWithResponse_Call{Call: _e.mock.On("GetFollowedChannelsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetFollowedChannelsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetFollowedChannelsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetFollowedChannelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetFollowedChannelsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetFollowedChannelsWithResponse_Call) Return(_a0 *twitchApi.GetFollowedChannelsHTTPResponse, _a1 error) *Api_GetFollowedChannelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetFollowedChannelsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetFollowedChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetFollowedChannelsHTTPResponse, error)) *Api_GetFollowedChannelsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowedStreamsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetFollowedStreamsWithResponse(ctx context.Context, params *twitchApi.GetFollowedStreamsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetFollowedStreamsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowedStreamsWithResponse")
	}

	var r0 *twitchApi.GetFollowedStreamsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetFollowedStreamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetFollowedStreamsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetFollowedStreamsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetFollowedStreamsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetFollowedStreamsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetFollowedStreamsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetFollowedStreamsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowedStreamsWithResponse'
type Api_GetFollowedStreamsWithResponse_Call struct {
	*mock.Call
}

// GetFollowedStreamsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetFollowedStreamsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetFollowedStreamsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetFollowedStreamsWithResponse_Call {
	return &Api_GetFollowedStreamsWithResponse_Call{Call: _e.mock.On("GetFollowedStreamsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetFollowedStreamsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetFollowedStreamsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetFollowedStreamsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetFollowedStreamsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetFollowedStreamsWithResponse_Call) Return(_a0 *twitchApi.GetFollowedStreamsHTTPResponse, _a1 error) *Api_GetFollowedStreamsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetFollowedStreamsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetFollowedStreamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetFollowedStreamsHTTPResponse, error)) *Api_GetFollowedStreamsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameAnalyticsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetGameAnalyticsWithResponse(ctx context.Context, params *twitchApi.GetGameAnalyticsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetGameAnalyticsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGameAnalyticsWithResponse")
	}

	var r0 *twitchApi.GetGameAnalyticsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGameAnalyticsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGameAnalyticsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGameAnalyticsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetGameAnalyticsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetGameAnalyticsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetGameAnalyticsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetGameAnalyticsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameAnalyticsWithResponse'
type Api_GetGameAnalyticsWithResponse_Call struct {
	*mock.Call
}

// GetGameAnalyticsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetGameAnalyticsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetGameAnalyticsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetGameAnalyticsWithResponse_Call {
	return &Api_GetGameAnalyticsWithResponse_Call{Call: _e.mock.On("GetGameAnalyticsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetGameAnalyticsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetGameAnalyticsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetGameAnalyticsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetGameAnalyticsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetGameAnalyticsWithResponse_Call) Return(_a0 *twitchApi.GetGameAnalyticsHTTPResponse, _a1 error) *Api_GetGameAnalyticsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetGameAnalyticsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetGameAnalyticsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGameAnalyticsHTTPResponse, error)) *Api_GetGameAnalyticsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetGamesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetGamesWithResponse(ctx context.Context, params *twitchApi.GetGamesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetGamesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGamesWithResponse")
	}

	var r0 *twitchApi.GetGamesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGamesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGamesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGamesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetGamesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetGamesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetGamesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetGamesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGamesWithResponse'
type Api_GetGamesWithResponse_Call struct {
	*mock.Call
}

// GetGamesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetGamesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetGamesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetGamesWithResponse_Call {
	return &Api_GetGamesWithResponse_Call{Call: _e.mock.On("GetGamesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetGamesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetGamesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetGamesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetGamesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetGamesWithResponse_Call) Return(_a0 *twitchApi.GetGamesHTTPResponse, _a1 error) *Api_GetGamesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetGamesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetGamesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGamesHTTPResponse, error)) *Api_GetGamesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalChatBadgesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *Api) GetGlobalChatBadgesWithResponse(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetGlobalChatBadgesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalChatBadgesWithResponse")
	}

	var r0 *twitchApi.GetGlobalChatBadgesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetGlobalChatBadgesHTTPResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) *twitchApi.GetGlobalChatBadgesHTTPResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetGlobalChatBadgesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetGlobalChatBadgesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalChatBadgesWithResponse'
type Api_GetGlobalChatBadgesWithResponse_Call struct {
	*mock.Call
}

// GetGlobalChatBadgesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetGlobalChatBadgesWithResponse(ctx interface{}, reqEditors ...interface{}) *Api_GetGlobalChatBadgesWithResponse_Call {
	return &Api_GetGlobalChatBadgesWithResponse_Call{Call: _e.mock.On("GetGlobalChatBadgesWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *Api_GetGlobalChatBadgesWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetGlobalChatBadgesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetGlobalChatBadgesWithResponse_Call) Return(_a0 *twitchApi.GetGlobalChatBadgesHTTPResponse, _a1 error) *Api_GetGlobalChatBadgesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetGlobalChatBadgesWithResponse_Call) RunAndReturn(run func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetGlobalChatBadgesHTTPResponse, error)) *Api_GetGlobalChatBadgesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalEmotesWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *Api) GetGlobalEmotesWithResponse(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetGlobalEmotesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalEmotesWithResponse")
	}

	var r0 *twitchApi.GetGlobalEmotesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetGlobalEmotesHTTPResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) *twitchApi.GetGlobalEmotesHTTPResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetGlobalEmotesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetGlobalEmotesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalEmotesWithResponse'
type Api_GetGlobalEmotesWithResponse_Call struct {
	*mock.Call
}

// GetGlobalEmotesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetGlobalEmotesWithResponse(ctx interface{}, reqEditors ...interface{}) *Api_GetGlobalEmotesWithResponse_Call {
	return &Api_GetGlobalEmotesWithResponse_Call{Call: _e.mock.On("GetGlobalEmotesWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *Api_GetGlobalEmotesWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetGlobalEmotesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetGlobalEmotesWithResponse_Call) Return(_a0 *twitchApi.GetGlobalEmotesHTTPResponse, _a1 error) *Api_GetGlobalEmotesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetGlobalEmotesWithResponse_Call) RunAndReturn(run func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetGlobalEmotesHTTPResponse, error)) *Api_GetGlobalEmotesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetGuestStarInvitesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetGuestStarInvitesWithResponse(ctx context.Context, params *twitchApi.GetGuestStarInvitesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetGuestStarInvitesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestStarInvitesWithResponse")
	}

	var r0 *twitchApi.GetGuestStarInvitesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGuestStarInvitesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGuestStarInvitesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGuestStarInvitesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetGuestStarInvitesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetGuestStarInvitesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetGuestStarInvitesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetGuestStarInvitesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGuestStarInvitesWithResponse'
type Api_GetGuestStarInvitesWithResponse_Call struct {
	*mock.Call
}

// GetGuestStarInvitesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetGuestStarInvitesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetGuestStarInvitesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetGuestStarInvitesWithResponse_Call {
	return &Api_GetGuestStarInvitesWithResponse_Call{Call: _e.mock.On("GetGuestStarInvitesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetGuestStarInvitesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetGuestStarInvitesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetGuestStarInvitesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetGuestStarInvitesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetGuestStarInvitesWithResponse_Call) Return(_a0 *twitchApi.GetGuestStarInvitesHTTPResponse, _a1 error) *Api_GetGuestStarInvitesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetGuestStarInvitesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetGuestStarInvitesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGuestStarInvitesHTTPResponse, error)) *Api_GetGuestStarInvitesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetGuestStarSessionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetGuestStarSessionWithResponse(ctx context.Context, params *twitchApi.GetGuestStarSessionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetGuestStarSessionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestStarSessionWithResponse")
	}

	var r0 *twitchApi.GetGuestStarSessionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGuestStarSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGuestStarSessionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetGuestStarSessionParams, ...twitchApi.RequestEditorFn) *twitchApi.GetGuestStarSessionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetGuestStarSessionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetGuestStarSessionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetGuestStarSessionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGuestStarSessionWithResponse'
type Api_GetGuestStarSessionWithResponse_Call struct {
	*mock.Call
}

// GetGuestStarSessionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetGuestStarSessionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetGuestStarSessionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetGuestStarSessionWithResponse_Call {
	return &Api_GetGuestStarSessionWithResponse_Call{Call: _e.mock.On("GetGuestStarSessionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetGuestStarSessionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetGuestStarSessionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetGuestStarSessionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetGuestStarSessionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetGuestStarSessionWithResponse_Call) Return(_a0 *twitchApi.GetGuestStarSessionHTTPResponse, _a1 error) *Api_GetGuestStarSessionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetGuestStarSessionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetGuestStarSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetGuestStarSessionHTTPResponse, error)) *Api_GetGuestStarSessionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetHypeTrainEventsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetHypeTrainEventsWithResponse(ctx context.Context, params *twitchApi.GetHypeTrainEventsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetHypeTrainEventsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHypeTrainEventsWithResponse")
	}

	var r0 *twitchApi.GetHypeTrainEventsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetHypeTrainEventsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetHypeTrainEventsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetHypeTrainEventsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetHypeTrainEventsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetHypeTrainEventsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetHypeTrainEventsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetHypeTrainEventsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHypeTrainEventsWithResponse'
type Api_GetHypeTrainEventsWithResponse_Call struct {
	*mock.Call
}

// GetHypeTrainEventsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetHypeTrainEventsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetHypeTrainEventsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetHypeTrainEventsWithResponse_Call {
	return &Api_GetHypeTrainEventsWithResponse_Call{Call: _e.mock.On("GetHypeTrainEventsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetHypeTrainEventsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetHypeTrainEventsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetHypeTrainEventsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetHypeTrainEventsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetHypeTrainEventsWithResponse_Call) Return(_a0 *twitchApi.GetHypeTrainEventsHTTPResponse, _a1 error) *Api_GetHypeTrainEventsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetHypeTrainEventsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetHypeTrainEventsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetHypeTrainEventsHTTPResponse, error)) *Api_GetHypeTrainEventsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetModeratedChannelsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetModeratedChannelsWithResponse(ctx context.Context, params *twitchApi.GetModeratedChannelsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetModeratedChannelsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModeratedChannelsWithResponse")
	}

	var r0 *twitchApi.GetModeratedChannelsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetModeratedChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetModeratedChannelsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetModeratedChannelsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetModeratedChannelsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetModeratedChannelsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetModeratedChannelsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetModeratedChannelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModeratedChannelsWithResponse'
type Api_GetModeratedChannelsWithResponse_Call struct {
	*mock.Call
}

// GetModeratedChannelsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetModeratedChannelsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetModeratedChannelsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetModeratedChannelsWithResponse_Call {
	return &Api_GetModeratedChannelsWithResponse_Call{Call: _e.mock.On("GetModeratedChannelsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetModeratedChannelsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetModeratedChannelsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetModeratedChannelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetModeratedChannelsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetModeratedChannelsWithResponse_Call) Return(_a0 *twitchApi.GetModeratedChannelsHTTPResponse, _a1 error) *Api_GetModeratedChannelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetModeratedChannelsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetModeratedChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetModeratedChannelsHTTPResponse, error)) *Api_GetModeratedChannelsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetModeratorsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetModeratorsWithResponse(ctx context.Context, params *twitchApi.GetModeratorsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetModeratorsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModeratorsWithResponse")
	}

	var r0 *twitchApi.GetModeratorsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetModeratorsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetModeratorsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetModeratorsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetModeratorsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetModeratorsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetModeratorsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetModeratorsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModeratorsWithResponse'
type Api_GetModeratorsWithResponse_Call struct {
	*mock.Call
}

// GetModeratorsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetModeratorsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetModeratorsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetModeratorsWithResponse_Call {
	return &Api_GetModeratorsWithResponse_Call{Call: _e.mock.On("GetModeratorsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetModeratorsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetModeratorsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetModeratorsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetModeratorsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetModeratorsWithResponse_Call) Return(_a0 *twitchApi.GetModeratorsHTTPResponse, _a1 error) *Api_GetModeratorsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetModeratorsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetModeratorsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetModeratorsHTTPResponse, error)) *Api_GetModeratorsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetPollsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetPollsWithResponse(ctx context.Context, params *twitchApi.GetPollsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetPollsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPollsWithResponse")
	}

	var r0 *twitchApi.GetPollsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetPollsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetPollsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetPollsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetPollsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetPollsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetPollsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetPollsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPollsWithResponse'
type Api_GetPollsWithResponse_Call struct {
	*mock.Call
}

// GetPollsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetPollsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetPollsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetPollsWithResponse_Call {
	return &Api_GetPollsWithResponse_Call{Call: _e.mock.On("GetPollsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetPollsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetPollsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetPollsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetPollsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetPollsWithResponse_Call) Return(_a0 *twitchApi.GetPollsHTTPResponse, _a1 error) *Api_GetPollsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetPollsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetPollsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetPollsHTTPResponse, error)) *Api_GetPollsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetPredictionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetPredictionsWithResponse(ctx context.Context, params *twitchApi.GetPredictionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetPredictionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPredictionsWithResponse")
	}

	var r0 *twitchApi.GetPredictionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetPredictionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetPredictionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetPredictionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetPredictionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetPredictionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetPredictionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetPredictionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPredictionsWithResponse'
type Api_GetPredictionsWithResponse_Call struct {
	*mock.Call
}

// GetPredictionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetPredictionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetPredictionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetPredictionsWithResponse_Call {
	return &Api_GetPredictionsWithResponse_Call{Call: _e.mock.On("GetPredictionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetPredictionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetPredictionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetPredictionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetPredictionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetPredictionsWithResponse_Call) Return(_a0 *twitchApi.GetPredictionsHTTPResponse, _a1 error) *Api_GetPredictionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetPredictionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetPredictionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetPredictionsHTTPResponse, error)) *Api_GetPredictionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleasedExtensionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetReleasedExtensionsWithResponse(ctx context.Context, params *twitchApi.GetReleasedExtensionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetReleasedExtensionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReleasedExtensionsWithResponse")
	}

	var r0 *twitchApi.GetReleasedExtensionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetReleasedExtensionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetReleasedExtensionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetReleasedExtensionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetReleasedExtensionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetReleasedExtensionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetReleasedExtensionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetReleasedExtensionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleasedExtensionsWithResponse'
type Api_GetReleasedExtensionsWithResponse_Call struct {
	*mock.Call
}

// GetReleasedExtensionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetReleasedExtensionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetReleasedExtensionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetReleasedExtensionsWithResponse_Call {
	return &Api_GetReleasedExtensionsWithResponse_Call{Call: _e.mock.On("GetReleasedExtensionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetReleasedExtensionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetReleasedExtensionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetReleasedExtensionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetReleasedExtensionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetReleasedExtensionsWithResponse_Call) Return(_a0 *twitchApi.GetReleasedExtensionsHTTPResponse, _a1 error) *Api_GetReleasedExtensionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetReleasedExtensionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetReleasedExtensionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetReleasedExtensionsHTTPResponse, error)) *Api_GetReleasedExtensionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetSharedChatSessionWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetSharedChatSessionWithResponse(ctx context.Context, params *twitchApi.GetSharedChatSessionParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetSharedChatSessionHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSharedChatSessionWithResponse")
	}

	var r0 *twitchApi.GetSharedChatSessionHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetSharedChatSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetSharedChatSessionHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetSharedChatSessionParams, ...twitchApi.RequestEditorFn) *twitchApi.GetSharedChatSessionHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetSharedChatSessionHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetSharedChatSessionParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetSharedChatSessionWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSharedChatSessionWithResponse'
type Api_GetSharedChatSessionWithResponse_Call struct {
	*mock.Call
}

// GetSharedChatSessionWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetSharedChatSessionParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetSharedChatSessionWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetSharedChatSessionWithResponse_Call {
	return &Api_GetSharedChatSessionWithResponse_Call{Call: _e.mock.On("GetSharedChatSessionWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetSharedChatSessionWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetSharedChatSessionParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetSharedChatSessionWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetSharedChatSessionParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetSharedChatSessionWithResponse_Call) Return(_a0 *twitchApi.GetSharedChatSessionHTTPResponse, _a1 error) *Api_GetSharedChatSessionWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetSharedChatSessionWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetSharedChatSessionParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetSharedChatSessionHTTPResponse, error)) *Api_GetSharedChatSessionWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetShieldModeStatusWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetShieldModeStatusWithResponse(ctx context.Context, params *twitchApi.GetShieldModeStatusParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetShieldModeStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetShieldModeStatusWithResponse")
	}

	var r0 *twitchApi.GetShieldModeStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetShieldModeStatusParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetShieldModeStatusHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetShieldModeStatusParams, ...twitchApi.RequestEditorFn) *twitchApi.GetShieldModeStatusHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetShieldModeStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetShieldModeStatusParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetShieldModeStatusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShieldModeStatusWithResponse'
type Api_GetShieldModeStatusWithResponse_Call struct {
	*mock.Call
}

// GetShieldModeStatusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetShieldModeStatusParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetShieldModeStatusWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetShieldModeStatusWithResponse_Call {
	return &Api_GetShieldModeStatusWithResponse_Call{Call: _e.mock.On("GetShieldModeStatusWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetShieldModeStatusWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetShieldModeStatusParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetShieldModeStatusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetShieldModeStatusParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetShieldModeStatusWithResponse_Call) Return(_a0 *twitchApi.GetShieldModeStatusHTTPResponse, _a1 error) *Api_GetShieldModeStatusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetShieldModeStatusWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetShieldModeStatusParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetShieldModeStatusHTTPResponse, error)) *Api_GetShieldModeStatusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamKeyWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetStreamKeyWithResponse(ctx context.Context, params *twitchApi.GetStreamKeyParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamKeyHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamKeyWithResponse")
	}

	var r0 *twitchApi.GetStreamKeyHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamKeyParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamKeyHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamKeyParams, ...twitchApi.RequestEditorFn) *twitchApi.GetStreamKeyHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetStreamKeyHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetStreamKeyParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetStreamKeyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamKeyWithResponse'
type Api_GetStreamKeyWithResponse_Call struct {
	*mock.Call
}

// GetStreamKeyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetStreamKeyParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetStreamKeyWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetStreamKeyWithResponse_Call {
	return &Api_GetStreamKeyWithResponse_Call{Call: _e.mock.On("GetStreamKeyWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetStreamKeyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetStreamKeyParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetStreamKeyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetStreamKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetStreamKeyWithResponse_Call) Return(_a0 *twitchApi.GetStreamKeyHTTPResponse, _a1 error) *Api_GetStreamKeyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetStreamKeyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetStreamKeyParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamKeyHTTPResponse, error)) *Api_GetStreamKeyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamMarkersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetStreamMarkersWithResponse(ctx context.Context, params *twitchApi.GetStreamMarkersParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamMarkersHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamMarkersWithResponse")
	}

	var r0 *twitchApi.GetStreamMarkersHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamMarkersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamMarkersHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamMarkersParams, ...twitchApi.RequestEditorFn) *twitchApi.GetStreamMarkersHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetStreamMarkersHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetStreamMarkersParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetStreamMarkersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamMarkersWithResponse'
type Api_GetStreamMarkersWithResponse_Call struct {
	*mock.Call
}

// GetStreamMarkersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetStreamMarkersParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetStreamMarkersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetStreamMarkersWithResponse_Call {
	return &Api_GetStreamMarkersWithResponse_Call{Call: _e.mock.On("GetStreamMarkersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetStreamMarkersWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetStreamMarkersParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetStreamMarkersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetStreamMarkersParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetStreamMarkersWithResponse_Call) Return(_a0 *twitchApi.GetStreamMarkersHTTPResponse, _a1 error) *Api_GetStreamMarkersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetStreamMarkersWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetStreamMarkersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamMarkersHTTPResponse, error)) *Api_GetStreamMarkersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamTagsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetStreamTagsWithResponse(ctx context.Context, params *twitchApi.GetStreamTagsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamTagsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamTagsWithResponse")
	}

	var r0 *twitchApi.GetStreamTagsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamTagsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamTagsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamTagsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetStreamTagsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetStreamTagsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetStreamTagsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetStreamTagsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamTagsWithResponse'
type Api_GetStreamTagsWithResponse_Call struct {
	*mock.Call
}

// GetStreamTagsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetStreamTagsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetStreamTagsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetStreamTagsWithResponse_Call {
	return &Api_GetStreamTagsWithResponse_Call{Call: _e.mock.On("GetStreamTagsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetStreamTagsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetStreamTagsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetStreamTagsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetStreamTagsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetStreamTagsWithResponse_Call) Return(_a0 *twitchApi.GetStreamTagsHTTPResponse, _a1 error) *Api_GetStreamTagsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetStreamTagsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetStreamTagsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamTagsHTTPResponse, error)) *Api_GetStreamTagsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetStreamsWithResponse(ctx context.Context, params *twitchApi.GetStreamsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamsWithResponse")
	}

	var r0 *twitchApi.GetStreamsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetStreamsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetStreamsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetStreamsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetStreamsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetStreamsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamsWithResponse'
type Api_GetStreamsWithResponse_Call struct {
	*mock.Call
}

// GetStreamsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetStreamsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetStreamsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetStreamsWithResponse_Call {
	return &Api_GetStreamsWithResponse_Call{Call: _e.mock.On("GetStreamsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetStreamsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetStreamsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetStreamsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetStreamsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetStreamsWithResponse_Call) Return(_a0 *twitchApi.GetStreamsHTTPResponse, _a1 error) *Api_GetStreamsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetStreamsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetStreamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetStreamsHTTPResponse, error)) *Api_GetStreamsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetTeamsWithResponse(ctx context.Context, params *twitchApi.GetTeamsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetTeamsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsWithResponse")
	}

	var r0 *twitchApi.GetTeamsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetTeamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetTeamsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetTeamsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetTeamsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetTeamsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetTeamsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetTeamsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsWithResponse'
type Api_GetTeamsWithResponse_Call struct {
	*mock.Call
}

// GetTeamsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetTeamsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetTeamsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetTeamsWithResponse_Call {
	return &Api_GetTeamsWithResponse_Call{Call: _e.mock.On("GetTeamsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetTeamsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetTeamsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetTeamsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetTeamsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetTeamsWithResponse_Call) Return(_a0 *twitchApi.GetTeamsHTTPResponse, _a1 error) *Api_GetTeamsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetTeamsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetTeamsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetTeamsHTTPResponse, error)) *Api_GetTeamsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopGamesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetTopGamesWithResponse(ctx context.Context, params *twitchApi.GetTopGamesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetTopGamesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTopGamesWithResponse")
	}

	var r0 *twitchApi.GetTopGamesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetTopGamesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetTopGamesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetTopGamesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetTopGamesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetTopGamesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetTopGamesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetTopGamesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopGamesWithResponse'
type Api_GetTopGamesWithResponse_Call struct {
	*mock.Call
}

// GetTopGamesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetTopGamesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetTopGamesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetTopGamesWithResponse_Call {
	return &Api_GetTopGamesWithResponse_Call{Call: _e.mock.On("GetTopGamesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetTopGamesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetTopGamesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetTopGamesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetTopGamesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetTopGamesWithResponse_Call) Return(_a0 *twitchApi.GetTopGamesHTTPResponse, _a1 error) *Api_GetTopGamesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetTopGamesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetTopGamesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetTopGamesHTTPResponse, error)) *Api_GetTopGamesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnbanRequestsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetUnbanRequestsWithResponse(ctx context.Context, params *twitchApi.GetUnbanRequestsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUnbanRequestsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUnbanRequestsWithResponse")
	}

	var r0 *twitchApi.GetUnbanRequestsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUnbanRequestsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUnbanRequestsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUnbanRequestsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetUnbanRequestsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUnbanRequestsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetUnbanRequestsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUnbanRequestsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnbanRequestsWithResponse'
type Api_GetUnbanRequestsWithResponse_Call struct {
	*mock.Call
}

// GetUnbanRequestsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetUnbanRequestsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUnbanRequestsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetUnbanRequestsWithResponse_Call {
	return &Api_GetUnbanRequestsWithResponse_Call{Call: _e.mock.On("GetUnbanRequestsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetUnbanRequestsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetUnbanRequestsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUnbanRequestsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetUnbanRequestsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUnbanRequestsWithResponse_Call) Return(_a0 *twitchApi.GetUnbanRequestsHTTPResponse, _a1 error) *Api_GetUnbanRequestsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUnbanRequestsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetUnbanRequestsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUnbanRequestsHTTPResponse, error)) *Api_GetUnbanRequestsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserActiveExtensionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetUserActiveExtensionsWithResponse(ctx context.Context, params *twitchApi.GetUserActiveExtensionsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUserActiveExtensionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserActiveExtensionsWithResponse")
	}

	var r0 *twitchApi.GetUserActiveExtensionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserActiveExtensionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserActiveExtensionsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserActiveExtensionsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetUserActiveExtensionsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUserActiveExtensionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetUserActiveExtensionsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUserActiveExtensionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserActiveExtensionsWithResponse'
type Api_GetUserActiveExtensionsWithResponse_Call struct {
	*mock.Call
}

// GetUserActiveExtensionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetUserActiveExtensionsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUserActiveExtensionsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetUserActiveExtensionsWithResponse_Call {
	return &Api_GetUserActiveExtensionsWithResponse_Call{Call: _e.mock.On("GetUserActiveExtensionsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetUserActiveExtensionsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetUserActiveExtensionsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUserActiveExtensionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetUserActiveExtensionsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUserActiveExtensionsWithResponse_Call) Return(_a0 *twitchApi.GetUserActiveExtensionsHTTPResponse, _a1 error) *Api_GetUserActiveExtensionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUserActiveExtensionsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetUserActiveExtensionsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserActiveExtensionsHTTPResponse, error)) *Api_GetUserActiveExtensionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBlockListWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetUserBlockListWithResponse(ctx context.Context, params *twitchApi.GetUserBlockListParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUserBlockListHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBlockListWithResponse")
	}

	var r0 *twitchApi.GetUserBlockListHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserBlockListParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserBlockListHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserBlockListParams, ...twitchApi.RequestEditorFn) *twitchApi.GetUserBlockListHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUserBlockListHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetUserBlockListParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUserBlockListWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBlockListWithResponse'
type Api_GetUserBlockListWithResponse_Call struct {
	*mock.Call
}

// GetUserBlockListWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetUserBlockListParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUserBlockListWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetUserBlockListWithResponse_Call {
	return &Api_GetUserBlockListWithResponse_Call{Call: _e.mock.On("GetUserBlockListWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetUserBlockListWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetUserBlockListParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUserBlockListWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetUserBlockListParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUserBlockListWithResponse_Call) Return(_a0 *twitchApi.GetUserBlockListHTTPResponse, _a1 error) *Api_GetUserBlockListWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUserBlockListWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetUserBlockListParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserBlockListHTTPResponse, error)) *Api_GetUserBlockListWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserChatColorWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetUserChatColorWithResponse(ctx context.Context, params *twitchApi.GetUserChatColorParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUserChatColorHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChatColorWithResponse")
	}

	var r0 *twitchApi.GetUserChatColorHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserChatColorParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserChatColorHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserChatColorParams, ...twitchApi.RequestEditorFn) *twitchApi.GetUserChatColorHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUserChatColorHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetUserChatColorParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUserChatColorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserChatColorWithResponse'
type Api_GetUserChatColorWithResponse_Call struct {
	*mock.Call
}

// GetUserChatColorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetUserChatColorParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUserChatColorWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetUserChatColorWithResponse_Call {
	return &Api_GetUserChatColorWithResponse_Call{Call: _e.mock.On("GetUserChatColorWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetUserChatColorWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetUserChatColorParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUserChatColorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetUserChatColorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUserChatColorWithResponse_Call) Return(_a0 *twitchApi.GetUserChatColorHTTPResponse, _a1 error) *Api_GetUserChatColorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUserChatColorWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetUserChatColorParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserChatColorHTTPResponse, error)) *Api_GetUserChatColorWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserEmotesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetUserEmotesWithResponse(ctx context.Context, params *twitchApi.GetUserEmotesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUserEmotesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEmotesWithResponse")
	}

	var r0 *twitchApi.GetUserEmotesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserEmotesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserEmotesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUserEmotesParams, ...twitchApi.RequestEditorFn) *twitchApi.GetUserEmotesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUserEmotesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetUserEmotesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUserEmotesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserEmotesWithResponse'
type Api_GetUserEmotesWithResponse_Call struct {
	*mock.Call
}

// GetUserEmotesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetUserEmotesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUserEmotesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetUserEmotesWithResponse_Call {
	return &Api_GetUserEmotesWithResponse_Call{Call: _e.mock.On("GetUserEmotesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetUserEmotesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetUserEmotesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUserEmotesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetUserEmotesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUserEmotesWithResponse_Call) Return(_a0 *twitchApi.GetUserEmotesHTTPResponse, _a1 error) *Api_GetUserEmotesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUserEmotesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetUserEmotesParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserEmotesHTTPResponse, error)) *Api_GetUserEmotesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserExtensionsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *Api) GetUserExtensionsWithResponse(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUserExtensionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserExtensionsWithResponse")
	}

	var r0 *twitchApi.GetUserExtensionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserExtensionsHTTPResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...twitchApi.RequestEditorFn) *twitchApi.GetUserExtensionsHTTPResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUserExtensionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUserExtensionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserExtensionsWithResponse'
type Api_GetUserExtensionsWithResponse_Call struct {
	*mock.Call
}

// GetUserExtensionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUserExtensionsWithResponse(ctx interface{}, reqEditors ...interface{}) *Api_GetUserExtensionsWithResponse_Call {
	return &Api_GetUserExtensionsWithResponse_Call{Call: _e.mock.On("GetUserExtensionsWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *Api_GetUserExtensionsWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUserExtensionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUserExtensionsWithResponse_Call) Return(_a0 *twitchApi.GetUserExtensionsHTTPResponse, _a1 error) *Api_GetUserExtensionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUserExtensionsWithResponse_Call) RunAndReturn(run func(context.Context, ...twitchApi.RequestEditorFn) (*twitchApi.GetUserExtensionsHTTPResponse, error)) *Api_GetUserExtensionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetUsersWithResponse(ctx context.Context, params *twitchApi.GetUsersParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetUsersHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersWithResponse")
	}

	var r0 *twitchApi.GetUsersHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUsersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUsersHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetUsersParams, ...twitchApi.RequestEditorFn) *twitchApi.GetUsersHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetUsersHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetUsersParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetUsersWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithResponse'
type Api_GetUsersWithResponse_Call struct {
	*mock.Call
}

// GetUsersWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetUsersParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetUsersWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetUsersWithResponse_Call {
	return &Api_GetUsersWithResponse_Call{Call: _e.mock.On("GetUsersWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetUsersWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetUsersParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetUsersWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetUsersWithResponse_Call) Return(_a0 *twitchApi.GetUsersHTTPResponse, _a1 error) *Api_GetUsersWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetUsersWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetUsersParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetUsersHTTPResponse, error)) *Api_GetUsersWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideosWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetVideosWithResponse(ctx context.Context, params *twitchApi.GetVideosParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetVideosHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVideosWithResponse")
	}

	var r0 *twitchApi.GetVideosHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetVideosParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetVideosHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetVideosParams, ...twitchApi.RequestEditorFn) *twitchApi.GetVideosHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetVideosHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetVideosParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetVideosWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideosWithResponse'
type Api_GetVideosWithResponse_Call struct {
	*mock.Call
}

// GetVideosWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetVideosParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetVideosWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetVideosWithResponse_Call {
	return &Api_GetVideosWithResponse_Call{Call: _e.mock.On("GetVideosWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetVideosWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetVideosParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetVideosWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetVideosParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetVideosWithResponse_Call) Return(_a0 *twitchApi.GetVideosHTTPResponse, _a1 error) *Api_GetVideosWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetVideosWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetVideosParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetVideosHTTPResponse, error)) *Api_GetVideosWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetVipsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) GetVipsWithResponse(ctx context.Context, params *twitchApi.GetVipsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.GetVipsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVipsWithResponse")
	}

	var r0 *twitchApi.GetVipsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetVipsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetVipsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.GetVipsParams, ...twitchApi.RequestEditorFn) *twitchApi.GetVipsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.GetVipsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.GetVipsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_GetVipsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVipsWithResponse'
type Api_GetVipsWithResponse_Call struct {
	*mock.Call
}

// GetVipsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.GetVipsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) GetVipsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_GetVipsWithResponse_Call {
	return &Api_GetVipsWithResponse_Call{Call: _e.mock.On("GetVipsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_GetVipsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.GetVipsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_GetVipsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.GetVipsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_GetVipsWithResponse_Call) Return(_a0 *twitchApi.GetVipsHTTPResponse, _a1 error) *Api_GetVipsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_GetVipsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.GetVipsParams, ...twitchApi.RequestEditorFn) (*twitchApi.GetVipsHTTPResponse, error)) *Api_GetVipsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ManageHeldAutomodMessagesWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) ManageHeldAutomodMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.ManageHeldAutomodMessagesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ManageHeldAutomodMessagesWithBodyWithResponse")
	}

	var r0 *twitchApi.ManageHeldAutomodMessagesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.ManageHeldAutomodMessagesHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.ManageHeldAutomodMessagesHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.ManageHeldAutomodMessagesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManageHeldAutomodMessagesWithBodyWithResponse'
type Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call struct {
	*mock.Call
}

// ManageHeldAutomodMessagesWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) ManageHeldAutomodMessagesWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call {
	return &Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call{Call: _e.mock.On("ManageHeldAutomodMessagesWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call) Return(_a0 *twitchApi.ManageHeldAutomodMessagesHTTPResponse, _a1 error) *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.ManageHeldAutomodMessagesHTTPResponse, error)) *Api_ManageHeldAutomodMessagesWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ManageHeldAutomodMessagesWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) ManageHeldAutomodMessagesWithResponse(ctx context.Context, body twitchApi.ManageHeldAutoModMessagesBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.ManageHeldAutomodMessagesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ManageHeldAutomodMessagesWithResponse")
	}

	var r0 *twitchApi.ManageHeldAutomodMessagesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.ManageHeldAutoModMessagesBody, ...twitchApi.RequestEditorFn) (*twitchApi.ManageHeldAutomodMessagesHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.ManageHeldAutoModMessagesBody, ...twitchApi.RequestEditorFn) *twitchApi.ManageHeldAutomodMessagesHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.ManageHeldAutomodMessagesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.ManageHeldAutoModMessagesBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_ManageHeldAutomodMessagesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManageHeldAutomodMessagesWithResponse'
type Api_ManageHeldAutomodMessagesWithResponse_Call struct {
	*mock.Call
}

// ManageHeldAutomodMessagesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.ManageHeldAutoModMessagesBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) ManageHeldAutomodMessagesWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_ManageHeldAutomodMessagesWithResponse_Call {
	return &Api_ManageHeldAutomodMessagesWithResponse_Call{Call: _e.mock.On("ManageHeldAutomodMessagesWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_ManageHeldAutomodMessagesWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.ManageHeldAutoModMessagesBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_ManageHeldAutomodMessagesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.ManageHeldAutoModMessagesBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_ManageHeldAutomodMessagesWithResponse_Call) Return(_a0 *twitchApi.ManageHeldAutomodMessagesHTTPResponse, _a1 error) *Api_ManageHeldAutomodMessagesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_ManageHeldAutomodMessagesWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.ManageHeldAutoModMessagesBody, ...twitchApi.RequestEditorFn) (*twitchApi.ManageHeldAutomodMessagesHTTPResponse, error)) *Api_ManageHeldAutomodMessagesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyChannelInformationWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) ModifyChannelInformationWithBodyWithResponse(ctx context.Context, params *twitchApi.ModifyChannelInformationParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.ModifyChannelInformationHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyChannelInformationWithBodyWithResponse")
	}

	var r0 *twitchApi.ModifyChannelInformationHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.ModifyChannelInformationParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.ModifyChannelInformationHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.ModifyChannelInformationParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.ModifyChannelInformationHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.ModifyChannelInformationHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.ModifyChannelInformationParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_ModifyChannelInformationWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyChannelInformationWithBodyWithResponse'
type Api_ModifyChannelInformationWithBodyWithResponse_Call struct {
	*mock.Call
}

// ModifyChannelInformationWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.ModifyChannelInformationParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) ModifyChannelInformationWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_ModifyChannelInformationWithBodyWithResponse_Call {
	return &Api_ModifyChannelInformationWithBodyWithResponse_Call{Call: _e.mock.On("ModifyChannelInformationWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_ModifyChannelInformationWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.ModifyChannelInformationParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_ModifyChannelInformationWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.ModifyChannelInformationParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_ModifyChannelInformationWithBodyWithResponse_Call) Return(_a0 *twitchApi.ModifyChannelInformationHTTPResponse, _a1 error) *Api_ModifyChannelInformationWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_ModifyChannelInformationWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.ModifyChannelInformationParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.ModifyChannelInformationHTTPResponse, error)) *Api_ModifyChannelInformationWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyChannelInformationWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) ModifyChannelInformationWithResponse(ctx context.Context, params *twitchApi.ModifyChannelInformationParams, body twitchApi.ModifyChannelInformationBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.ModifyChannelInformationHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyChannelInformationWithResponse")
	}

	var r0 *twitchApi.ModifyChannelInformationHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.ModifyChannelInformationParams, twitchApi.ModifyChannelInformationBody, ...twitchApi.RequestEditorFn) (*twitchApi.ModifyChannelInformationHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.ModifyChannelInformationParams, twitchApi.ModifyChannelInformationBody, ...twitchApi.RequestEditorFn) *twitchApi.ModifyChannelInformationHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.ModifyChannelInformationHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.ModifyChannelInformationParams, twitchApi.ModifyChannelInformationBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_ModifyChannelInformationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyChannelInformationWithResponse'
type Api_ModifyChannelInformationWithResponse_Call struct {
	*mock.Call
}

// ModifyChannelInformationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.ModifyChannelInformationParams
//   - body twitchApi.ModifyChannelInformationBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) ModifyChannelInformationWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_ModifyChannelInformationWithResponse_Call {
	return &Api_ModifyChannelInformationWithResponse_Call{Call: _e.mock.On("ModifyChannelInformationWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_ModifyChannelInformationWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.ModifyChannelInformationParams, body twitchApi.ModifyChannelInformationBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_ModifyChannelInformationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.ModifyChannelInformationParams), args[2].(twitchApi.ModifyChannelInformationBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_ModifyChannelInformationWithResponse_Call) Return(_a0 *twitchApi.ModifyChannelInformationHTTPResponse, _a1 error) *Api_ModifyChannelInformationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_ModifyChannelInformationWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.ModifyChannelInformationParams, twitchApi.ModifyChannelInformationBody, ...twitchApi.RequestEditorFn) (*twitchApi.ModifyChannelInformationHTTPResponse, error)) *Api_ModifyChannelInformationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveBlockedTermWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) RemoveBlockedTermWithResponse(ctx context.Context, params *twitchApi.RemoveBlockedTermParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.RemoveBlockedTermHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBlockedTermWithResponse")
	}

	var r0 *twitchApi.RemoveBlockedTermHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.RemoveBlockedTermParams, ...twitchApi.RequestEditorFn) (*twitchApi.RemoveBlockedTermHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.RemoveBlockedTermParams, ...twitchApi.RequestEditorFn) *twitchApi.RemoveBlockedTermHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.RemoveBlockedTermHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.RemoveBlockedTermParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_RemoveBlockedTermWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveBlockedTermWithResponse'
type Api_RemoveBlockedTermWithResponse_Call struct {
	*mock.Call
}

// RemoveBlockedTermWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.RemoveBlockedTermParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) RemoveBlockedTermWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_RemoveBlockedTermWithResponse_Call {
	return &Api_RemoveBlockedTermWithResponse_Call{Call: _e.mock.On("RemoveBlockedTermWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_RemoveBlockedTermWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.RemoveBlockedTermParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_RemoveBlockedTermWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.RemoveBlockedTermParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_RemoveBlockedTermWithResponse_Call) Return(_a0 *twitchApi.RemoveBlockedTermHTTPResponse, _a1 error) *Api_RemoveBlockedTermWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_RemoveBlockedTermWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.RemoveBlockedTermParams, ...twitchApi.RequestEditorFn) (*twitchApi.RemoveBlockedTermHTTPResponse, error)) *Api_RemoveBlockedTermWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelModeratorWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) RemoveChannelModeratorWithResponse(ctx context.Context, params *twitchApi.RemoveChannelModeratorParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.RemoveChannelModeratorHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelModeratorWithResponse")
	}

	var r0 *twitchApi.RemoveChannelModeratorHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.RemoveChannelModeratorParams, ...twitchApi.RequestEditorFn) (*twitchApi.RemoveChannelModeratorHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.RemoveChannelModeratorParams, ...twitchApi.RequestEditorFn) *twitchApi.RemoveChannelModeratorHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.RemoveChannelModeratorHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.RemoveChannelModeratorParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_RemoveChannelModeratorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelModeratorWithResponse'
type Api_RemoveChannelModeratorWithResponse_Call struct {
	*mock.Call
}

// RemoveChannelModeratorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.RemoveChannelModeratorParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) RemoveChannelModeratorWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_RemoveChannelModeratorWithResponse_Call {
	return &Api_RemoveChannelModeratorWithResponse_Call{Call: _e.mock.On("RemoveChannelModeratorWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_RemoveChannelModeratorWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.RemoveChannelModeratorParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_RemoveChannelModeratorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.RemoveChannelModeratorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_RemoveChannelModeratorWithResponse_Call) Return(_a0 *twitchApi.RemoveChannelModeratorHTTPResponse, _a1 error) *Api_RemoveChannelModeratorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_RemoveChannelModeratorWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.RemoveChannelModeratorParams, ...twitchApi.RequestEditorFn) (*twitchApi.RemoveChannelModeratorHTTPResponse, error)) *Api_RemoveChannelModeratorWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannelVipWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) RemoveChannelVipWithResponse(ctx context.Context, params *twitchApi.RemoveChannelVipParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.RemoveChannelVipHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelVipWithResponse")
	}

	var r0 *twitchApi.RemoveChannelVipHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.RemoveChannelVipParams, ...twitchApi.RequestEditorFn) (*twitchApi.RemoveChannelVipHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.RemoveChannelVipParams, ...twitchApi.RequestEditorFn) *twitchApi.RemoveChannelVipHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.RemoveChannelVipHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.RemoveChannelVipParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_RemoveChannelVipWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannelVipWithResponse'
type Api_RemoveChannelVipWithResponse_Call struct {
	*mock.Call
}

// RemoveChannelVipWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.RemoveChannelVipParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) RemoveChannelVipWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_RemoveChannelVipWithResponse_Call {
	return &Api_RemoveChannelVipWithResponse_Call{Call: _e.mock.On("RemoveChannelVipWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_RemoveChannelVipWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.RemoveChannelVipParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_RemoveChannelVipWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.RemoveChannelVipParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_RemoveChannelVipWithResponse_Call) Return(_a0 *twitchApi.RemoveChannelVipHTTPResponse, _a1 error) *Api_RemoveChannelVipWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_RemoveChannelVipWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.RemoveChannelVipParams, ...twitchApi.RequestEditorFn) (*twitchApi.RemoveChannelVipHTTPResponse, error)) *Api_RemoveChannelVipWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveUnbanRequestsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) ResolveUnbanRequestsWithResponse(ctx context.Context, params *twitchApi.ResolveUnbanRequestsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.ResolveUnbanRequestsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResolveUnbanRequestsWithResponse")
	}

	var r0 *twitchApi.ResolveUnbanRequestsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.ResolveUnbanRequestsParams, ...twitchApi.RequestEditorFn) (*twitchApi.ResolveUnbanRequestsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.ResolveUnbanRequestsParams, ...twitchApi.RequestEditorFn) *twitchApi.ResolveUnbanRequestsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.ResolveUnbanRequestsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.ResolveUnbanRequestsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_ResolveUnbanRequestsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveUnbanRequestsWithResponse'
type Api_ResolveUnbanRequestsWithResponse_Call struct {
	*mock.Call
}

// ResolveUnbanRequestsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.ResolveUnbanRequestsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) ResolveUnbanRequestsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_ResolveUnbanRequestsWithResponse_Call {
	return &Api_ResolveUnbanRequestsWithResponse_Call{Call: _e.mock.On("ResolveUnbanRequestsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_ResolveUnbanRequestsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.ResolveUnbanRequestsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_ResolveUnbanRequestsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.ResolveUnbanRequestsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_ResolveUnbanRequestsWithResponse_Call) Return(_a0 *twitchApi.ResolveUnbanRequestsHTTPResponse, _a1 error) *Api_ResolveUnbanRequestsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_ResolveUnbanRequestsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.ResolveUnbanRequestsParams, ...twitchApi.RequestEditorFn) (*twitchApi.ResolveUnbanRequestsHTTPResponse, error)) *Api_ResolveUnbanRequestsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SearchCategoriesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) SearchCategoriesWithResponse(ctx context.Context, params *twitchApi.SearchCategoriesParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SearchCategoriesHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchCategoriesWithResponse")
	}

	var r0 *twitchApi.SearchCategoriesHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SearchCategoriesParams, ...twitchApi.RequestEditorFn) (*twitchApi.SearchCategoriesHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SearchCategoriesParams, ...twitchApi.RequestEditorFn) *twitchApi.SearchCategoriesHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SearchCategoriesHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SearchCategoriesParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SearchCategoriesWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchCategoriesWithResponse'
type Api_SearchCategoriesWithResponse_Call struct {
	*mock.Call
}

// SearchCategoriesWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SearchCategoriesParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SearchCategoriesWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_SearchCategoriesWithResponse_Call {
	return &Api_SearchCategoriesWithResponse_Call{Call: _e.mock.On("SearchCategoriesWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_SearchCategoriesWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SearchCategoriesParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_SearchCategoriesWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SearchCategoriesParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_SearchCategoriesWithResponse_Call) Return(_a0 *twitchApi.SearchCategoriesHTTPResponse, _a1 error) *Api_SearchCategoriesWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SearchCategoriesWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SearchCategoriesParams, ...twitchApi.RequestEditorFn) (*twitchApi.SearchCategoriesHTTPResponse, error)) *Api_SearchCategoriesWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SearchChannelsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) SearchChannelsWithResponse(ctx context.Context, params *twitchApi.SearchChannelsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SearchChannelsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchChannelsWithResponse")
	}

	var r0 *twitchApi.SearchChannelsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SearchChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.SearchChannelsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SearchChannelsParams, ...twitchApi.RequestEditorFn) *twitchApi.SearchChannelsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SearchChannelsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SearchChannelsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SearchChannelsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchChannelsWithResponse'
type Api_SearchChannelsWithResponse_Call struct {
	*mock.Call
}

// SearchChannelsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SearchChannelsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SearchChannelsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_SearchChannelsWithResponse_Call {
	return &Api_SearchChannelsWithResponse_Call{Call: _e.mock.On("SearchChannelsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_SearchChannelsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SearchChannelsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_SearchChannelsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SearchChannelsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_SearchChannelsWithResponse_Call) Return(_a0 *twitchApi.SearchChannelsHTTPResponse, _a1 error) *Api_SearchChannelsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SearchChannelsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SearchChannelsParams, ...twitchApi.RequestEditorFn) (*twitchApi.SearchChannelsHTTPResponse, error)) *Api_SearchChannelsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendAShoutoutWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) SendAShoutoutWithResponse(ctx context.Context, params *twitchApi.SendAShoutoutParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendAShoutoutHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendAShoutoutWithResponse")
	}

	var r0 *twitchApi.SendAShoutoutHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendAShoutoutParams, ...twitchApi.RequestEditorFn) (*twitchApi.SendAShoutoutHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendAShoutoutParams, ...twitchApi.RequestEditorFn) *twitchApi.SendAShoutoutHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendAShoutoutHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendAShoutoutParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendAShoutoutWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAShoutoutWithResponse'
type Api_SendAShoutoutWithResponse_Call struct {
	*mock.Call
}

// SendAShoutoutWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendAShoutoutParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendAShoutoutWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_SendAShoutoutWithResponse_Call {
	return &Api_SendAShoutoutWithResponse_Call{Call: _e.mock.On("SendAShoutoutWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_SendAShoutoutWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendAShoutoutParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendAShoutoutWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendAShoutoutParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendAShoutoutWithResponse_Call) Return(_a0 *twitchApi.SendAShoutoutHTTPResponse, _a1 error) *Api_SendAShoutoutWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendAShoutoutWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendAShoutoutParams, ...twitchApi.RequestEditorFn) (*twitchApi.SendAShoutoutHTTPResponse, error)) *Api_SendAShoutoutWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendChatAnnouncementWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) SendChatAnnouncementWithBodyWithResponse(ctx context.Context, params *twitchApi.SendChatAnnouncementParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendChatAnnouncementHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChatAnnouncementWithBodyWithResponse")
	}

	var r0 *twitchApi.SendChatAnnouncementHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendChatAnnouncementParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatAnnouncementHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendChatAnnouncementParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SendChatAnnouncementHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendChatAnnouncementHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendChatAnnouncementParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendChatAnnouncementWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChatAnnouncementWithBodyWithResponse'
type Api_SendChatAnnouncementWithBodyWithResponse_Call struct {
	*mock.Call
}

// SendChatAnnouncementWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendChatAnnouncementParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendChatAnnouncementWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SendChatAnnouncementWithBodyWithResponse_Call {
	return &Api_SendChatAnnouncementWithBodyWithResponse_Call{Call: _e.mock.On("SendChatAnnouncementWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SendChatAnnouncementWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendChatAnnouncementParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendChatAnnouncementWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendChatAnnouncementParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendChatAnnouncementWithBodyWithResponse_Call) Return(_a0 *twitchApi.SendChatAnnouncementHTTPResponse, _a1 error) *Api_SendChatAnnouncementWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendChatAnnouncementWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendChatAnnouncementParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatAnnouncementHTTPResponse, error)) *Api_SendChatAnnouncementWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendChatAnnouncementWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) SendChatAnnouncementWithResponse(ctx context.Context, params *twitchApi.SendChatAnnouncementParams, body twitchApi.SendChatAnnouncementBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendChatAnnouncementHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChatAnnouncementWithResponse")
	}

	var r0 *twitchApi.SendChatAnnouncementHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendChatAnnouncementParams, twitchApi.SendChatAnnouncementBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatAnnouncementHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendChatAnnouncementParams, twitchApi.SendChatAnnouncementBody, ...twitchApi.RequestEditorFn) *twitchApi.SendChatAnnouncementHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendChatAnnouncementHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendChatAnnouncementParams, twitchApi.SendChatAnnouncementBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendChatAnnouncementWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChatAnnouncementWithResponse'
type Api_SendChatAnnouncementWithResponse_Call struct {
	*mock.Call
}

// SendChatAnnouncementWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendChatAnnouncementParams
//   - body twitchApi.SendChatAnnouncementBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendChatAnnouncementWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_SendChatAnnouncementWithResponse_Call {
	return &Api_SendChatAnnouncementWithResponse_Call{Call: _e.mock.On("SendChatAnnouncementWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_SendChatAnnouncementWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendChatAnnouncementParams, body twitchApi.SendChatAnnouncementBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendChatAnnouncementWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendChatAnnouncementParams), args[2].(twitchApi.SendChatAnnouncementBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendChatAnnouncementWithResponse_Call) Return(_a0 *twitchApi.SendChatAnnouncementHTTPResponse, _a1 error) *Api_SendChatAnnouncementWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendChatAnnouncementWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendChatAnnouncementParams, twitchApi.SendChatAnnouncementBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatAnnouncementHTTPResponse, error)) *Api_SendChatAnnouncementWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendChatMessageWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) SendChatMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendChatMessageHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChatMessageWithBodyWithResponse")
	}

	var r0 *twitchApi.SendChatMessageHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatMessageHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SendChatMessageHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendChatMessageHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendChatMessageWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChatMessageWithBodyWithResponse'
type Api_SendChatMessageWithBodyWithResponse_Call struct {
	*mock.Call
}

// SendChatMessageWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendChatMessageWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SendChatMessageWithBodyWithResponse_Call {
	return &Api_SendChatMessageWithBodyWithResponse_Call{Call: _e.mock.On("SendChatMessageWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SendChatMessageWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendChatMessageWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendChatMessageWithBodyWithResponse_Call) Return(_a0 *twitchApi.SendChatMessageHTTPResponse, _a1 error) *Api_SendChatMessageWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendChatMessageWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatMessageHTTPResponse, error)) *Api_SendChatMessageWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendChatMessageWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) SendChatMessageWithResponse(ctx context.Context, body twitchApi.SendChatMessageBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendChatMessageHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChatMessageWithResponse")
	}

	var r0 *twitchApi.SendChatMessageHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.SendChatMessageBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatMessageHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.SendChatMessageBody, ...twitchApi.RequestEditorFn) *twitchApi.SendChatMessageHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendChatMessageHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.SendChatMessageBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendChatMessageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChatMessageWithResponse'
type Api_SendChatMessageWithResponse_Call struct {
	*mock.Call
}

// SendChatMessageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.SendChatMessageBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendChatMessageWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_SendChatMessageWithResponse_Call {
	return &Api_SendChatMessageWithResponse_Call{Call: _e.mock.On("SendChatMessageWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_SendChatMessageWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.SendChatMessageBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendChatMessageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.SendChatMessageBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendChatMessageWithResponse_Call) Return(_a0 *twitchApi.SendChatMessageHTTPResponse, _a1 error) *Api_SendChatMessageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendChatMessageWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.SendChatMessageBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendChatMessageHTTPResponse, error)) *Api_SendChatMessageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendExtensionChatMessageWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) SendExtensionChatMessageWithBodyWithResponse(ctx context.Context, params *twitchApi.SendExtensionChatMessageParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionChatMessageHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendExtensionChatMessageWithBodyWithResponse")
	}

	var r0 *twitchApi.SendExtensionChatMessageHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendExtensionChatMessageParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionChatMessageHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendExtensionChatMessageParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SendExtensionChatMessageHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendExtensionChatMessageHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendExtensionChatMessageParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendExtensionChatMessageWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExtensionChatMessageWithBodyWithResponse'
type Api_SendExtensionChatMessageWithBodyWithResponse_Call struct {
	*mock.Call
}

// SendExtensionChatMessageWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendExtensionChatMessageParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendExtensionChatMessageWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SendExtensionChatMessageWithBodyWithResponse_Call {
	return &Api_SendExtensionChatMessageWithBodyWithResponse_Call{Call: _e.mock.On("SendExtensionChatMessageWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SendExtensionChatMessageWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendExtensionChatMessageParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendExtensionChatMessageWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendExtensionChatMessageParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendExtensionChatMessageWithBodyWithResponse_Call) Return(_a0 *twitchApi.SendExtensionChatMessageHTTPResponse, _a1 error) *Api_SendExtensionChatMessageWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendExtensionChatMessageWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendExtensionChatMessageParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionChatMessageHTTPResponse, error)) *Api_SendExtensionChatMessageWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendExtensionChatMessageWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) SendExtensionChatMessageWithResponse(ctx context.Context, params *twitchApi.SendExtensionChatMessageParams, body twitchApi.SendExtensionChatMessageBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionChatMessageHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendExtensionChatMessageWithResponse")
	}

	var r0 *twitchApi.SendExtensionChatMessageHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendExtensionChatMessageParams, twitchApi.SendExtensionChatMessageBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionChatMessageHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendExtensionChatMessageParams, twitchApi.SendExtensionChatMessageBody, ...twitchApi.RequestEditorFn) *twitchApi.SendExtensionChatMessageHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendExtensionChatMessageHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendExtensionChatMessageParams, twitchApi.SendExtensionChatMessageBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendExtensionChatMessageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExtensionChatMessageWithResponse'
type Api_SendExtensionChatMessageWithResponse_Call struct {
	*mock.Call
}

// SendExtensionChatMessageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendExtensionChatMessageParams
//   - body twitchApi.SendExtensionChatMessageBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendExtensionChatMessageWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_SendExtensionChatMessageWithResponse_Call {
	return &Api_SendExtensionChatMessageWithResponse_Call{Call: _e.mock.On("SendExtensionChatMessageWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_SendExtensionChatMessageWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendExtensionChatMessageParams, body twitchApi.SendExtensionChatMessageBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendExtensionChatMessageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendExtensionChatMessageParams), args[2].(twitchApi.SendExtensionChatMessageBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendExtensionChatMessageWithResponse_Call) Return(_a0 *twitchApi.SendExtensionChatMessageHTTPResponse, _a1 error) *Api_SendExtensionChatMessageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendExtensionChatMessageWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendExtensionChatMessageParams, twitchApi.SendExtensionChatMessageBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionChatMessageHTTPResponse, error)) *Api_SendExtensionChatMessageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendExtensionPubsubMessageWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) SendExtensionPubsubMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionPubsubMessageHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendExtensionPubsubMessageWithBodyWithResponse")
	}

	var r0 *twitchApi.SendExtensionPubsubMessageHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionPubsubMessageHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SendExtensionPubsubMessageHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendExtensionPubsubMessageHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendExtensionPubsubMessageWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExtensionPubsubMessageWithBodyWithResponse'
type Api_SendExtensionPubsubMessageWithBodyWithResponse_Call struct {
	*mock.Call
}

// SendExtensionPubsubMessageWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendExtensionPubsubMessageWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call {
	return &Api_SendExtensionPubsubMessageWithBodyWithResponse_Call{Call: _e.mock.On("SendExtensionPubsubMessageWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call) Return(_a0 *twitchApi.SendExtensionPubsubMessageHTTPResponse, _a1 error) *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionPubsubMessageHTTPResponse, error)) *Api_SendExtensionPubsubMessageWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendExtensionPubsubMessageWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) SendExtensionPubsubMessageWithResponse(ctx context.Context, body twitchApi.SendExtensionPubSubMessageBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionPubsubMessageHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendExtensionPubsubMessageWithResponse")
	}

	var r0 *twitchApi.SendExtensionPubsubMessageHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.SendExtensionPubSubMessageBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionPubsubMessageHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.SendExtensionPubSubMessageBody, ...twitchApi.RequestEditorFn) *twitchApi.SendExtensionPubsubMessageHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendExtensionPubsubMessageHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.SendExtensionPubSubMessageBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendExtensionPubsubMessageWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendExtensionPubsubMessageWithResponse'
type Api_SendExtensionPubsubMessageWithResponse_Call struct {
	*mock.Call
}

// SendExtensionPubsubMessageWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.SendExtensionPubSubMessageBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendExtensionPubsubMessageWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_SendExtensionPubsubMessageWithResponse_Call {
	return &Api_SendExtensionPubsubMessageWithResponse_Call{Call: _e.mock.On("SendExtensionPubsubMessageWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_SendExtensionPubsubMessageWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.SendExtensionPubSubMessageBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendExtensionPubsubMessageWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.SendExtensionPubSubMessageBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendExtensionPubsubMessageWithResponse_Call) Return(_a0 *twitchApi.SendExtensionPubsubMessageHTTPResponse, _a1 error) *Api_SendExtensionPubsubMessageWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendExtensionPubsubMessageWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.SendExtensionPubSubMessageBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendExtensionPubsubMessageHTTPResponse, error)) *Api_SendExtensionPubsubMessageWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendGuestStarInviteWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) SendGuestStarInviteWithResponse(ctx context.Context, params *twitchApi.SendGuestStarInviteParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendGuestStarInviteHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendGuestStarInviteWithResponse")
	}

	var r0 *twitchApi.SendGuestStarInviteHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendGuestStarInviteParams, ...twitchApi.RequestEditorFn) (*twitchApi.SendGuestStarInviteHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendGuestStarInviteParams, ...twitchApi.RequestEditorFn) *twitchApi.SendGuestStarInviteHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendGuestStarInviteHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendGuestStarInviteParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendGuestStarInviteWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGuestStarInviteWithResponse'
type Api_SendGuestStarInviteWithResponse_Call struct {
	*mock.Call
}

// SendGuestStarInviteWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendGuestStarInviteParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendGuestStarInviteWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_SendGuestStarInviteWithResponse_Call {
	return &Api_SendGuestStarInviteWithResponse_Call{Call: _e.mock.On("SendGuestStarInviteWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_SendGuestStarInviteWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendGuestStarInviteParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendGuestStarInviteWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendGuestStarInviteParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendGuestStarInviteWithResponse_Call) Return(_a0 *twitchApi.SendGuestStarInviteHTTPResponse, _a1 error) *Api_SendGuestStarInviteWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendGuestStarInviteWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendGuestStarInviteParams, ...twitchApi.RequestEditorFn) (*twitchApi.SendGuestStarInviteHTTPResponse, error)) *Api_SendGuestStarInviteWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendWhisperWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) SendWhisperWithBodyWithResponse(ctx context.Context, params *twitchApi.SendWhisperParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendWhisperHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendWhisperWithBodyWithResponse")
	}

	var r0 *twitchApi.SendWhisperHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendWhisperParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendWhisperHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendWhisperParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SendWhisperHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendWhisperHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendWhisperParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendWhisperWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWhisperWithBodyWithResponse'
type Api_SendWhisperWithBodyWithResponse_Call struct {
	*mock.Call
}

// SendWhisperWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendWhisperParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendWhisperWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SendWhisperWithBodyWithResponse_Call {
	return &Api_SendWhisperWithBodyWithResponse_Call{Call: _e.mock.On("SendWhisperWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SendWhisperWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendWhisperParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendWhisperWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendWhisperParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendWhisperWithBodyWithResponse_Call) Return(_a0 *twitchApi.SendWhisperHTTPResponse, _a1 error) *Api_SendWhisperWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendWhisperWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendWhisperParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SendWhisperHTTPResponse, error)) *Api_SendWhisperWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SendWhisperWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) SendWhisperWithResponse(ctx context.Context, params *twitchApi.SendWhisperParams, body twitchApi.SendWhisperBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SendWhisperHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendWhisperWithResponse")
	}

	var r0 *twitchApi.SendWhisperHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendWhisperParams, twitchApi.SendWhisperBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendWhisperHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SendWhisperParams, twitchApi.SendWhisperBody, ...twitchApi.RequestEditorFn) *twitchApi.SendWhisperHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SendWhisperHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SendWhisperParams, twitchApi.SendWhisperBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SendWhisperWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWhisperWithResponse'
type Api_SendWhisperWithResponse_Call struct {
	*mock.Call
}

// SendWhisperWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SendWhisperParams
//   - body twitchApi.SendWhisperBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SendWhisperWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_SendWhisperWithResponse_Call {
	return &Api_SendWhisperWithResponse_Call{Call: _e.mock.On("SendWhisperWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_SendWhisperWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SendWhisperParams, body twitchApi.SendWhisperBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SendWhisperWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SendWhisperParams), args[2].(twitchApi.SendWhisperBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SendWhisperWithResponse_Call) Return(_a0 *twitchApi.SendWhisperHTTPResponse, _a1 error) *Api_SendWhisperWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SendWhisperWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SendWhisperParams, twitchApi.SendWhisperBody, ...twitchApi.RequestEditorFn) (*twitchApi.SendWhisperHTTPResponse, error)) *Api_SendWhisperWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetExtensionConfigurationSegmentWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) SetExtensionConfigurationSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionConfigurationSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetExtensionConfigurationSegmentWithBodyWithResponse")
	}

	var r0 *twitchApi.SetExtensionConfigurationSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionConfigurationSegmentHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SetExtensionConfigurationSegmentHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SetExtensionConfigurationSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExtensionConfigurationSegmentWithBodyWithResponse'
type Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call struct {
	*mock.Call
}

// SetExtensionConfigurationSegmentWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SetExtensionConfigurationSegmentWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call {
	return &Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call{Call: _e.mock.On("SetExtensionConfigurationSegmentWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call) Return(_a0 *twitchApi.SetExtensionConfigurationSegmentHTTPResponse, _a1 error) *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionConfigurationSegmentHTTPResponse, error)) *Api_SetExtensionConfigurationSegmentWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetExtensionConfigurationSegmentWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) SetExtensionConfigurationSegmentWithResponse(ctx context.Context, body twitchApi.SetExtensionConfigurationSegmentBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionConfigurationSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetExtensionConfigurationSegmentWithResponse")
	}

	var r0 *twitchApi.SetExtensionConfigurationSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.SetExtensionConfigurationSegmentBody, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionConfigurationSegmentHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.SetExtensionConfigurationSegmentBody, ...twitchApi.RequestEditorFn) *twitchApi.SetExtensionConfigurationSegmentHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SetExtensionConfigurationSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.SetExtensionConfigurationSegmentBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SetExtensionConfigurationSegmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExtensionConfigurationSegmentWithResponse'
type Api_SetExtensionConfigurationSegmentWithResponse_Call struct {
	*mock.Call
}

// SetExtensionConfigurationSegmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.SetExtensionConfigurationSegmentBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SetExtensionConfigurationSegmentWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_SetExtensionConfigurationSegmentWithResponse_Call {
	return &Api_SetExtensionConfigurationSegmentWithResponse_Call{Call: _e.mock.On("SetExtensionConfigurationSegmentWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_SetExtensionConfigurationSegmentWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.SetExtensionConfigurationSegmentBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SetExtensionConfigurationSegmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.SetExtensionConfigurationSegmentBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SetExtensionConfigurationSegmentWithResponse_Call) Return(_a0 *twitchApi.SetExtensionConfigurationSegmentHTTPResponse, _a1 error) *Api_SetExtensionConfigurationSegmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SetExtensionConfigurationSegmentWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.SetExtensionConfigurationSegmentBody, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionConfigurationSegmentHTTPResponse, error)) *Api_SetExtensionConfigurationSegmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetExtensionRequiredConfigurationWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) SetExtensionRequiredConfigurationWithBodyWithResponse(ctx context.Context, params *twitchApi.SetExtensionRequiredConfigurationParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionRequiredConfigurationHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetExtensionRequiredConfigurationWithBodyWithResponse")
	}

	var r0 *twitchApi.SetExtensionRequiredConfigurationHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionRequiredConfigurationHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.SetExtensionRequiredConfigurationHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SetExtensionRequiredConfigurationHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExtensionRequiredConfigurationWithBodyWithResponse'
type Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call struct {
	*mock.Call
}

// SetExtensionRequiredConfigurationWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SetExtensionRequiredConfigurationParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SetExtensionRequiredConfigurationWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call {
	return &Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call{Call: _e.mock.On("SetExtensionRequiredConfigurationWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SetExtensionRequiredConfigurationParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SetExtensionRequiredConfigurationParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call) Return(_a0 *twitchApi.SetExtensionRequiredConfigurationHTTPResponse, _a1 error) *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionRequiredConfigurationHTTPResponse, error)) *Api_SetExtensionRequiredConfigurationWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetExtensionRequiredConfigurationWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) SetExtensionRequiredConfigurationWithResponse(ctx context.Context, params *twitchApi.SetExtensionRequiredConfigurationParams, body twitchApi.SetExtensionRequiredConfigurationBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionRequiredConfigurationHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetExtensionRequiredConfigurationWithResponse")
	}

	var r0 *twitchApi.SetExtensionRequiredConfigurationHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, twitchApi.SetExtensionRequiredConfigurationBody, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionRequiredConfigurationHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, twitchApi.SetExtensionRequiredConfigurationBody, ...twitchApi.RequestEditorFn) *twitchApi.SetExtensionRequiredConfigurationHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SetExtensionRequiredConfigurationHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, twitchApi.SetExtensionRequiredConfigurationBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SetExtensionRequiredConfigurationWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExtensionRequiredConfigurationWithResponse'
type Api_SetExtensionRequiredConfigurationWithResponse_Call struct {
	*mock.Call
}

// SetExtensionRequiredConfigurationWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SetExtensionRequiredConfigurationParams
//   - body twitchApi.SetExtensionRequiredConfigurationBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SetExtensionRequiredConfigurationWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_SetExtensionRequiredConfigurationWithResponse_Call {
	return &Api_SetExtensionRequiredConfigurationWithResponse_Call{Call: _e.mock.On("SetExtensionRequiredConfigurationWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_SetExtensionRequiredConfigurationWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SetExtensionRequiredConfigurationParams, body twitchApi.SetExtensionRequiredConfigurationBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_SetExtensionRequiredConfigurationWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SetExtensionRequiredConfigurationParams), args[2].(twitchApi.SetExtensionRequiredConfigurationBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_SetExtensionRequiredConfigurationWithResponse_Call) Return(_a0 *twitchApi.SetExtensionRequiredConfigurationHTTPResponse, _a1 error) *Api_SetExtensionRequiredConfigurationWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SetExtensionRequiredConfigurationWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SetExtensionRequiredConfigurationParams, twitchApi.SetExtensionRequiredConfigurationBody, ...twitchApi.RequestEditorFn) (*twitchApi.SetExtensionRequiredConfigurationHTTPResponse, error)) *Api_SetExtensionRequiredConfigurationWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SnoozeNextAdWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) SnoozeNextAdWithResponse(ctx context.Context, params *twitchApi.SnoozeNextAdParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.SnoozeNextAdHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnoozeNextAdWithResponse")
	}

	var r0 *twitchApi.SnoozeNextAdHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SnoozeNextAdParams, ...twitchApi.RequestEditorFn) (*twitchApi.SnoozeNextAdHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.SnoozeNextAdParams, ...twitchApi.RequestEditorFn) *twitchApi.SnoozeNextAdHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.SnoozeNextAdHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.SnoozeNextAdParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_SnoozeNextAdWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SnoozeNextAdWithResponse'
type Api_SnoozeNextAdWithResponse_Call struct {
	*mock.Call
}

// SnoozeNextAdWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.SnoozeNextAdParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) SnoozeNextAdWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_SnoozeNextAdWithResponse_Call {
	return &Api_SnoozeNextAdWithResponse_Call{Call: _e.mock.On("SnoozeNextAdWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_SnoozeNextAdWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.SnoozeNextAdParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_SnoozeNextAdWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.SnoozeNextAdParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_SnoozeNextAdWithResponse_Call) Return(_a0 *twitchApi.SnoozeNextAdHTTPResponse, _a1 error) *Api_SnoozeNextAdWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_SnoozeNextAdWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.SnoozeNextAdParams, ...twitchApi.RequestEditorFn) (*twitchApi.SnoozeNextAdHTTPResponse, error)) *Api_SnoozeNextAdWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// StartARaidWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) StartARaidWithResponse(ctx context.Context, params *twitchApi.StartARaidParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.StartARaidHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartARaidWithResponse")
	}

	var r0 *twitchApi.StartARaidHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.StartARaidParams, ...twitchApi.RequestEditorFn) (*twitchApi.StartARaidHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.StartARaidParams, ...twitchApi.RequestEditorFn) *twitchApi.StartARaidHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.StartARaidHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.StartARaidParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_StartARaidWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartARaidWithResponse'
type Api_StartARaidWithResponse_Call struct {
	*mock.Call
}

// StartARaidWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.StartARaidParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) StartARaidWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_StartARaidWithResponse_Call {
	return &Api_StartARaidWithResponse_Call{Call: _e.mock.On("StartARaidWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_StartARaidWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.StartARaidParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_StartARaidWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.StartARaidParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_StartARaidWithResponse_Call) Return(_a0 *twitchApi.StartARaidHTTPResponse, _a1 error) *Api_StartARaidWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_StartARaidWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.StartARaidParams, ...twitchApi.RequestEditorFn) (*twitchApi.StartARaidHTTPResponse, error)) *Api_StartARaidWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// StartCommercialWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) StartCommercialWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.StartCommercialHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCommercialWithBodyWithResponse")
	}

	var r0 *twitchApi.StartCommercialHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.StartCommercialHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.StartCommercialHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.StartCommercialHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_StartCommercialWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartCommercialWithBodyWithResponse'
type Api_StartCommercialWithBodyWithResponse_Call struct {
	*mock.Call
}

// StartCommercialWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) StartCommercialWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_StartCommercialWithBodyWithResponse_Call {
	return &Api_StartCommercialWithBodyWithResponse_Call{Call: _e.mock.On("StartCommercialWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_StartCommercialWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_StartCommercialWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_StartCommercialWithBodyWithResponse_Call) Return(_a0 *twitchApi.StartCommercialHTTPResponse, _a1 error) *Api_StartCommercialWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_StartCommercialWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.StartCommercialHTTPResponse, error)) *Api_StartCommercialWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// StartCommercialWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) StartCommercialWithResponse(ctx context.Context, body twitchApi.StartCommercialBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.StartCommercialHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCommercialWithResponse")
	}

	var r0 *twitchApi.StartCommercialHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.StartCommercialBody, ...twitchApi.RequestEditorFn) (*twitchApi.StartCommercialHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.StartCommercialBody, ...twitchApi.RequestEditorFn) *twitchApi.StartCommercialHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.StartCommercialHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.StartCommercialBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_StartCommercialWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartCommercialWithResponse'
type Api_StartCommercialWithResponse_Call struct {
	*mock.Call
}

// StartCommercialWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.StartCommercialBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) StartCommercialWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_StartCommercialWithResponse_Call {
	return &Api_StartCommercialWithResponse_Call{Call: _e.mock.On("StartCommercialWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_StartCommercialWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.StartCommercialBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_StartCommercialWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.StartCommercialBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_StartCommercialWithResponse_Call) Return(_a0 *twitchApi.StartCommercialHTTPResponse, _a1 error) *Api_StartCommercialWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_StartCommercialWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.StartCommercialBody, ...twitchApi.RequestEditorFn) (*twitchApi.StartCommercialHTTPResponse, error)) *Api_StartCommercialWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UnbanUserWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UnbanUserWithResponse(ctx context.Context, params *twitchApi.UnbanUserParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UnbanUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUserWithResponse")
	}

	var r0 *twitchApi.UnbanUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UnbanUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.UnbanUserHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UnbanUserParams, ...twitchApi.RequestEditorFn) *twitchApi.UnbanUserHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UnbanUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UnbanUserParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UnbanUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnbanUserWithResponse'
type Api_UnbanUserWithResponse_Call struct {
	*mock.Call
}

// UnbanUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UnbanUserParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UnbanUserWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UnbanUserWithResponse_Call {
	return &Api_UnbanUserWithResponse_Call{Call: _e.mock.On("UnbanUserWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UnbanUserWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UnbanUserParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UnbanUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UnbanUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UnbanUserWithResponse_Call) Return(_a0 *twitchApi.UnbanUserHTTPResponse, _a1 error) *Api_UnbanUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UnbanUserWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UnbanUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.UnbanUserHTTPResponse, error)) *Api_UnbanUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UnblockUserWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UnblockUserWithResponse(ctx context.Context, params *twitchApi.UnblockUserParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UnblockUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnblockUserWithResponse")
	}

	var r0 *twitchApi.UnblockUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UnblockUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.UnblockUserHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UnblockUserParams, ...twitchApi.RequestEditorFn) *twitchApi.UnblockUserHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UnblockUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UnblockUserParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UnblockUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnblockUserWithResponse'
type Api_UnblockUserWithResponse_Call struct {
	*mock.Call
}

// UnblockUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UnblockUserParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UnblockUserWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UnblockUserWithResponse_Call {
	return &Api_UnblockUserWithResponse_Call{Call: _e.mock.On("UnblockUserWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UnblockUserWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UnblockUserParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UnblockUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UnblockUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UnblockUserWithResponse_Call) Return(_a0 *twitchApi.UnblockUserHTTPResponse, _a1 error) *Api_UnblockUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UnblockUserWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UnblockUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.UnblockUserHTTPResponse, error)) *Api_UnblockUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAutomodSettingsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateAutomodSettingsWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateAutomodSettingsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateAutomodSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutomodSettingsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateAutomodSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateAutomodSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateAutomodSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateAutomodSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateAutomodSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateAutomodSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateAutomodSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateAutomodSettingsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAutomodSettingsWithBodyWithResponse'
type Api_UpdateAutomodSettingsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateAutomodSettingsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateAutomodSettingsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateAutomodSettingsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateAutomodSettingsWithBodyWithResponse_Call {
	return &Api_UpdateAutomodSettingsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateAutomodSettingsWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateAutomodSettingsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateAutomodSettingsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateAutomodSettingsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateAutomodSettingsParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateAutomodSettingsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateAutomodSettingsHTTPResponse, _a1 error) *Api_UpdateAutomodSettingsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateAutomodSettingsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateAutomodSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateAutomodSettingsHTTPResponse, error)) *Api_UpdateAutomodSettingsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAutomodSettingsWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateAutomodSettingsWithResponse(ctx context.Context, params *twitchApi.UpdateAutomodSettingsParams, body twitchApi.UpdateAutoModSettingsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateAutomodSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutomodSettingsWithResponse")
	}

	var r0 *twitchApi.UpdateAutomodSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateAutomodSettingsParams, twitchApi.UpdateAutoModSettingsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateAutomodSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateAutomodSettingsParams, twitchApi.UpdateAutoModSettingsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateAutomodSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateAutomodSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateAutomodSettingsParams, twitchApi.UpdateAutoModSettingsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateAutomodSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAutomodSettingsWithResponse'
type Api_UpdateAutomodSettingsWithResponse_Call struct {
	*mock.Call
}

// UpdateAutomodSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateAutomodSettingsParams
//   - body twitchApi.UpdateAutoModSettingsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateAutomodSettingsWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateAutomodSettingsWithResponse_Call {
	return &Api_UpdateAutomodSettingsWithResponse_Call{Call: _e.mock.On("UpdateAutomodSettingsWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateAutomodSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateAutomodSettingsParams, body twitchApi.UpdateAutoModSettingsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateAutomodSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateAutomodSettingsParams), args[2].(twitchApi.UpdateAutoModSettingsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateAutomodSettingsWithResponse_Call) Return(_a0 *twitchApi.UpdateAutomodSettingsHTTPResponse, _a1 error) *Api_UpdateAutomodSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateAutomodSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateAutomodSettingsParams, twitchApi.UpdateAutoModSettingsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateAutomodSettingsHTTPResponse, error)) *Api_UpdateAutomodSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelGuestStarSettingsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateChannelGuestStarSettingsWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateChannelGuestStarSettingsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelGuestStarSettingsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateChannelGuestStarSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChannelGuestStarSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelGuestStarSettingsWithBodyWithResponse'
type Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateChannelGuestStarSettingsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChannelGuestStarSettingsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChannelGuestStarSettingsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call {
	return &Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateChannelGuestStarSettingsWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChannelGuestStarSettingsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChannelGuestStarSettingsParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, _a1 error) *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, error)) *Api_UpdateChannelGuestStarSettingsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelGuestStarSettingsWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateChannelGuestStarSettingsWithResponse(ctx context.Context, params *twitchApi.UpdateChannelGuestStarSettingsParams, body twitchApi.UpdateChannelGuestStarSettingsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelGuestStarSettingsWithResponse")
	}

	var r0 *twitchApi.UpdateChannelGuestStarSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, twitchApi.UpdateChannelGuestStarSettingsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, twitchApi.UpdateChannelGuestStarSettingsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChannelGuestStarSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, twitchApi.UpdateChannelGuestStarSettingsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChannelGuestStarSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelGuestStarSettingsWithResponse'
type Api_UpdateChannelGuestStarSettingsWithResponse_Call struct {
	*mock.Call
}

// UpdateChannelGuestStarSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChannelGuestStarSettingsParams
//   - body twitchApi.UpdateChannelGuestStarSettingsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChannelGuestStarSettingsWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateChannelGuestStarSettingsWithResponse_Call {
	return &Api_UpdateChannelGuestStarSettingsWithResponse_Call{Call: _e.mock.On("UpdateChannelGuestStarSettingsWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateChannelGuestStarSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChannelGuestStarSettingsParams, body twitchApi.UpdateChannelGuestStarSettingsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChannelGuestStarSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChannelGuestStarSettingsParams), args[2].(twitchApi.UpdateChannelGuestStarSettingsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChannelGuestStarSettingsWithResponse_Call) Return(_a0 *twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, _a1 error) *Api_UpdateChannelGuestStarSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChannelGuestStarSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChannelGuestStarSettingsParams, twitchApi.UpdateChannelGuestStarSettingsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelGuestStarSettingsHTTPResponse, error)) *Api_UpdateChannelGuestStarSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelStreamScheduleSegmentWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateChannelStreamScheduleSegmentWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateChannelStreamScheduleSegmentParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelStreamScheduleSegmentWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelStreamScheduleSegmentWithBodyWithResponse'
type Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateChannelStreamScheduleSegmentWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChannelStreamScheduleSegmentParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChannelStreamScheduleSegmentWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	return &Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call{Call: _e.mock.On("UpdateChannelStreamScheduleSegmentWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChannelStreamScheduleSegmentParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChannelStreamScheduleSegmentParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, _a1 error) *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, error)) *Api_UpdateChannelStreamScheduleSegmentWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelStreamScheduleSegmentWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateChannelStreamScheduleSegmentWithResponse(ctx context.Context, params *twitchApi.UpdateChannelStreamScheduleSegmentParams, body twitchApi.UpdateChannelStreamScheduleSegmentBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelStreamScheduleSegmentWithResponse")
	}

	var r0 *twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, twitchApi.UpdateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, twitchApi.UpdateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, twitchApi.UpdateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChannelStreamScheduleSegmentWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelStreamScheduleSegmentWithResponse'
type Api_UpdateChannelStreamScheduleSegmentWithResponse_Call struct {
	*mock.Call
}

// UpdateChannelStreamScheduleSegmentWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChannelStreamScheduleSegmentParams
//   - body twitchApi.UpdateChannelStreamScheduleSegmentBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChannelStreamScheduleSegmentWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call {
	return &Api_UpdateChannelStreamScheduleSegmentWithResponse_Call{Call: _e.mock.On("UpdateChannelStreamScheduleSegmentWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChannelStreamScheduleSegmentParams, body twitchApi.UpdateChannelStreamScheduleSegmentBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChannelStreamScheduleSegmentParams), args[2].(twitchApi.UpdateChannelStreamScheduleSegmentBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call) Return(_a0 *twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, _a1 error) *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChannelStreamScheduleSegmentParams, twitchApi.UpdateChannelStreamScheduleSegmentBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleSegmentHTTPResponse, error)) *Api_UpdateChannelStreamScheduleSegmentWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChannelStreamScheduleWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UpdateChannelStreamScheduleWithResponse(ctx context.Context, params *twitchApi.UpdateChannelStreamScheduleParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelStreamScheduleWithResponse")
	}

	var r0 *twitchApi.UpdateChannelStreamScheduleHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChannelStreamScheduleHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChannelStreamScheduleHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChannelStreamScheduleWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChannelStreamScheduleWithResponse'
type Api_UpdateChannelStreamScheduleWithResponse_Call struct {
	*mock.Call
}

// UpdateChannelStreamScheduleWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChannelStreamScheduleParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChannelStreamScheduleWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UpdateChannelStreamScheduleWithResponse_Call {
	return &Api_UpdateChannelStreamScheduleWithResponse_Call{Call: _e.mock.On("UpdateChannelStreamScheduleWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UpdateChannelStreamScheduleWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChannelStreamScheduleParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChannelStreamScheduleWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChannelStreamScheduleParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChannelStreamScheduleWithResponse_Call) Return(_a0 *twitchApi.UpdateChannelStreamScheduleHTTPResponse, _a1 error) *Api_UpdateChannelStreamScheduleWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChannelStreamScheduleWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChannelStreamScheduleParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChannelStreamScheduleHTTPResponse, error)) *Api_UpdateChannelStreamScheduleWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatSettingsWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateChatSettingsWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateChatSettingsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChatSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatSettingsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateChatSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChatSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChatSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChatSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChatSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChatSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChatSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChatSettingsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatSettingsWithBodyWithResponse'
type Api_UpdateChatSettingsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateChatSettingsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChatSettingsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChatSettingsWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateChatSettingsWithBodyWithResponse_Call {
	return &Api_UpdateChatSettingsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateChatSettingsWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateChatSettingsWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChatSettingsParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChatSettingsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChatSettingsParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChatSettingsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateChatSettingsHTTPResponse, _a1 error) *Api_UpdateChatSettingsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChatSettingsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChatSettingsParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChatSettingsHTTPResponse, error)) *Api_UpdateChatSettingsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatSettingsWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateChatSettingsWithResponse(ctx context.Context, params *twitchApi.UpdateChatSettingsParams, body twitchApi.UpdateChatSettingsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChatSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatSettingsWithResponse")
	}

	var r0 *twitchApi.UpdateChatSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChatSettingsParams, twitchApi.UpdateChatSettingsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChatSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateChatSettingsParams, twitchApi.UpdateChatSettingsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateChatSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateChatSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateChatSettingsParams, twitchApi.UpdateChatSettingsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateChatSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatSettingsWithResponse'
type Api_UpdateChatSettingsWithResponse_Call struct {
	*mock.Call
}

// UpdateChatSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateChatSettingsParams
//   - body twitchApi.UpdateChatSettingsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateChatSettingsWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateChatSettingsWithResponse_Call {
	return &Api_UpdateChatSettingsWithResponse_Call{Call: _e.mock.On("UpdateChatSettingsWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateChatSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateChatSettingsParams, body twitchApi.UpdateChatSettingsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateChatSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateChatSettingsParams), args[2].(twitchApi.UpdateChatSettingsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateChatSettingsWithResponse_Call) Return(_a0 *twitchApi.UpdateChatSettingsHTTPResponse, _a1 error) *Api_UpdateChatSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateChatSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateChatSettingsParams, twitchApi.UpdateChatSettingsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateChatSettingsHTTPResponse, error)) *Api_UpdateChatSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConduitShardsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) UpdateConduitShardsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitShardsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConduitShardsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateConduitShardsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitShardsHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateConduitShardsHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateConduitShardsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateConduitShardsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConduitShardsWithBodyWithResponse'
type Api_UpdateConduitShardsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateConduitShardsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateConduitShardsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateConduitShardsWithBodyWithResponse_Call {
	return &Api_UpdateConduitShardsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateConduitShardsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateConduitShardsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateConduitShardsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateConduitShardsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateConduitShardsHTTPResponse, _a1 error) *Api_UpdateConduitShardsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateConduitShardsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitShardsHTTPResponse, error)) *Api_UpdateConduitShardsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConduitShardsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) UpdateConduitShardsWithResponse(ctx context.Context, body twitchApi.UpdateConduitShardsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitShardsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConduitShardsWithResponse")
	}

	var r0 *twitchApi.UpdateConduitShardsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateConduitShardsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitShardsHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateConduitShardsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateConduitShardsHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateConduitShardsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.UpdateConduitShardsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateConduitShardsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConduitShardsWithResponse'
type Api_UpdateConduitShardsWithResponse_Call struct {
	*mock.Call
}

// UpdateConduitShardsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.UpdateConduitShardsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateConduitShardsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateConduitShardsWithResponse_Call {
	return &Api_UpdateConduitShardsWithResponse_Call{Call: _e.mock.On("UpdateConduitShardsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_UpdateConduitShardsWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.UpdateConduitShardsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateConduitShardsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.UpdateConduitShardsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateConduitShardsWithResponse_Call) Return(_a0 *twitchApi.UpdateConduitShardsHTTPResponse, _a1 error) *Api_UpdateConduitShardsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateConduitShardsWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.UpdateConduitShardsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitShardsHTTPResponse, error)) *Api_UpdateConduitShardsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConduitsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) UpdateConduitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConduitsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateConduitsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitsHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateConduitsHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateConduitsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateConduitsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConduitsWithBodyWithResponse'
type Api_UpdateConduitsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateConduitsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateConduitsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateConduitsWithBodyWithResponse_Call {
	return &Api_UpdateConduitsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateConduitsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateConduitsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateConduitsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateConduitsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateConduitsHTTPResponse, _a1 error) *Api_UpdateConduitsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateConduitsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitsHTTPResponse, error)) *Api_UpdateConduitsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConduitsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) UpdateConduitsWithResponse(ctx context.Context, body twitchApi.UpdateConduitsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConduitsWithResponse")
	}

	var r0 *twitchApi.UpdateConduitsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateConduitsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitsHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateConduitsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateConduitsHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateConduitsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.UpdateConduitsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateConduitsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConduitsWithResponse'
type Api_UpdateConduitsWithResponse_Call struct {
	*mock.Call
}

// UpdateConduitsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.UpdateConduitsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateConduitsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateConduitsWithResponse_Call {
	return &Api_UpdateConduitsWithResponse_Call{Call: _e.mock.On("UpdateConduitsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_UpdateConduitsWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.UpdateConduitsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateConduitsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.UpdateConduitsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateConduitsWithResponse_Call) Return(_a0 *twitchApi.UpdateConduitsHTTPResponse, _a1 error) *Api_UpdateConduitsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateConduitsWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.UpdateConduitsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateConduitsHTTPResponse, error)) *Api_UpdateConduitsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomRewardWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateCustomRewardWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateCustomRewardParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateCustomRewardHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomRewardWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateCustomRewardHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateCustomRewardParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateCustomRewardHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateCustomRewardParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateCustomRewardHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateCustomRewardHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateCustomRewardParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateCustomRewardWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomRewardWithBodyWithResponse'
type Api_UpdateCustomRewardWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateCustomRewardWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateCustomRewardParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateCustomRewardWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateCustomRewardWithBodyWithResponse_Call {
	return &Api_UpdateCustomRewardWithBodyWithResponse_Call{Call: _e.mock.On("UpdateCustomRewardWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateCustomRewardWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateCustomRewardParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateCustomRewardWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateCustomRewardParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateCustomRewardWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateCustomRewardHTTPResponse, _a1 error) *Api_UpdateCustomRewardWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateCustomRewardWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateCustomRewardParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateCustomRewardHTTPResponse, error)) *Api_UpdateCustomRewardWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomRewardWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateCustomRewardWithResponse(ctx context.Context, params *twitchApi.UpdateCustomRewardParams, body twitchApi.UpdateCustomRewardBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateCustomRewardHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomRewardWithResponse")
	}

	var r0 *twitchApi.UpdateCustomRewardHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateCustomRewardParams, twitchApi.UpdateCustomRewardBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateCustomRewardHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateCustomRewardParams, twitchApi.UpdateCustomRewardBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateCustomRewardHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateCustomRewardHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateCustomRewardParams, twitchApi.UpdateCustomRewardBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateCustomRewardWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomRewardWithResponse'
type Api_UpdateCustomRewardWithResponse_Call struct {
	*mock.Call
}

// UpdateCustomRewardWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateCustomRewardParams
//   - body twitchApi.UpdateCustomRewardBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateCustomRewardWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateCustomRewardWithResponse_Call {
	return &Api_UpdateCustomRewardWithResponse_Call{Call: _e.mock.On("UpdateCustomRewardWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateCustomRewardWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateCustomRewardParams, body twitchApi.UpdateCustomRewardBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateCustomRewardWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateCustomRewardParams), args[2].(twitchApi.UpdateCustomRewardBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateCustomRewardWithResponse_Call) Return(_a0 *twitchApi.UpdateCustomRewardHTTPResponse, _a1 error) *Api_UpdateCustomRewardWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateCustomRewardWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateCustomRewardParams, twitchApi.UpdateCustomRewardBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateCustomRewardHTTPResponse, error)) *Api_UpdateCustomRewardWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDropsEntitlementsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) UpdateDropsEntitlementsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateDropsEntitlementsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDropsEntitlementsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateDropsEntitlementsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateDropsEntitlementsHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateDropsEntitlementsHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateDropsEntitlementsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateDropsEntitlementsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDropsEntitlementsWithBodyWithResponse'
type Api_UpdateDropsEntitlementsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateDropsEntitlementsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateDropsEntitlementsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call {
	return &Api_UpdateDropsEntitlementsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateDropsEntitlementsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateDropsEntitlementsHTTPResponse, _a1 error) *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateDropsEntitlementsHTTPResponse, error)) *Api_UpdateDropsEntitlementsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDropsEntitlementsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) UpdateDropsEntitlementsWithResponse(ctx context.Context, body twitchApi.UpdateDropsEntitlementsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateDropsEntitlementsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDropsEntitlementsWithResponse")
	}

	var r0 *twitchApi.UpdateDropsEntitlementsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateDropsEntitlementsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateDropsEntitlementsHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateDropsEntitlementsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateDropsEntitlementsHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateDropsEntitlementsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.UpdateDropsEntitlementsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateDropsEntitlementsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDropsEntitlementsWithResponse'
type Api_UpdateDropsEntitlementsWithResponse_Call struct {
	*mock.Call
}

// UpdateDropsEntitlementsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.UpdateDropsEntitlementsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateDropsEntitlementsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateDropsEntitlementsWithResponse_Call {
	return &Api_UpdateDropsEntitlementsWithResponse_Call{Call: _e.mock.On("UpdateDropsEntitlementsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_UpdateDropsEntitlementsWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.UpdateDropsEntitlementsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateDropsEntitlementsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.UpdateDropsEntitlementsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateDropsEntitlementsWithResponse_Call) Return(_a0 *twitchApi.UpdateDropsEntitlementsHTTPResponse, _a1 error) *Api_UpdateDropsEntitlementsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateDropsEntitlementsWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.UpdateDropsEntitlementsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateDropsEntitlementsHTTPResponse, error)) *Api_UpdateDropsEntitlementsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExtensionBitsProductWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) UpdateExtensionBitsProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateExtensionBitsProductHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExtensionBitsProductWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateExtensionBitsProductHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateExtensionBitsProductHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateExtensionBitsProductHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateExtensionBitsProductHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateExtensionBitsProductWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExtensionBitsProductWithBodyWithResponse'
type Api_UpdateExtensionBitsProductWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateExtensionBitsProductWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateExtensionBitsProductWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call {
	return &Api_UpdateExtensionBitsProductWithBodyWithResponse_Call{Call: _e.mock.On("UpdateExtensionBitsProductWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateExtensionBitsProductHTTPResponse, _a1 error) *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateExtensionBitsProductHTTPResponse, error)) *Api_UpdateExtensionBitsProductWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExtensionBitsProductWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) UpdateExtensionBitsProductWithResponse(ctx context.Context, body twitchApi.UpdateExtensionBitsProductBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateExtensionBitsProductHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExtensionBitsProductWithResponse")
	}

	var r0 *twitchApi.UpdateExtensionBitsProductHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateExtensionBitsProductBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateExtensionBitsProductHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateExtensionBitsProductBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateExtensionBitsProductHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateExtensionBitsProductHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.UpdateExtensionBitsProductBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateExtensionBitsProductWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExtensionBitsProductWithResponse'
type Api_UpdateExtensionBitsProductWithResponse_Call struct {
	*mock.Call
}

// UpdateExtensionBitsProductWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.UpdateExtensionBitsProductBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateExtensionBitsProductWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateExtensionBitsProductWithResponse_Call {
	return &Api_UpdateExtensionBitsProductWithResponse_Call{Call: _e.mock.On("UpdateExtensionBitsProductWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_UpdateExtensionBitsProductWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.UpdateExtensionBitsProductBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateExtensionBitsProductWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.UpdateExtensionBitsProductBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateExtensionBitsProductWithResponse_Call) Return(_a0 *twitchApi.UpdateExtensionBitsProductHTTPResponse, _a1 error) *Api_UpdateExtensionBitsProductWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateExtensionBitsProductWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.UpdateExtensionBitsProductBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateExtensionBitsProductHTTPResponse, error)) *Api_UpdateExtensionBitsProductWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGuestStarSlotSettingsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UpdateGuestStarSlotSettingsWithResponse(ctx context.Context, params *twitchApi.UpdateGuestStarSlotSettingsParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateGuestStarSlotSettingsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGuestStarSlotSettingsWithResponse")
	}

	var r0 *twitchApi.UpdateGuestStarSlotSettingsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateGuestStarSlotSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateGuestStarSlotSettingsHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateGuestStarSlotSettingsParams, ...twitchApi.RequestEditorFn) *twitchApi.UpdateGuestStarSlotSettingsHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateGuestStarSlotSettingsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateGuestStarSlotSettingsParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateGuestStarSlotSettingsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGuestStarSlotSettingsWithResponse'
type Api_UpdateGuestStarSlotSettingsWithResponse_Call struct {
	*mock.Call
}

// UpdateGuestStarSlotSettingsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateGuestStarSlotSettingsParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateGuestStarSlotSettingsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UpdateGuestStarSlotSettingsWithResponse_Call {
	return &Api_UpdateGuestStarSlotSettingsWithResponse_Call{Call: _e.mock.On("UpdateGuestStarSlotSettingsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UpdateGuestStarSlotSettingsWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateGuestStarSlotSettingsParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateGuestStarSlotSettingsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateGuestStarSlotSettingsParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateGuestStarSlotSettingsWithResponse_Call) Return(_a0 *twitchApi.UpdateGuestStarSlotSettingsHTTPResponse, _a1 error) *Api_UpdateGuestStarSlotSettingsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateGuestStarSlotSettingsWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateGuestStarSlotSettingsParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateGuestStarSlotSettingsHTTPResponse, error)) *Api_UpdateGuestStarSlotSettingsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGuestStarSlotWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UpdateGuestStarSlotWithResponse(ctx context.Context, params *twitchApi.UpdateGuestStarSlotParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateGuestStarSlotHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGuestStarSlotWithResponse")
	}

	var r0 *twitchApi.UpdateGuestStarSlotHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateGuestStarSlotParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateGuestStarSlotHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateGuestStarSlotParams, ...twitchApi.RequestEditorFn) *twitchApi.UpdateGuestStarSlotHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateGuestStarSlotHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateGuestStarSlotParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateGuestStarSlotWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGuestStarSlotWithResponse'
type Api_UpdateGuestStarSlotWithResponse_Call struct {
	*mock.Call
}

// UpdateGuestStarSlotWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateGuestStarSlotParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateGuestStarSlotWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UpdateGuestStarSlotWithResponse_Call {
	return &Api_UpdateGuestStarSlotWithResponse_Call{Call: _e.mock.On("UpdateGuestStarSlotWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UpdateGuestStarSlotWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateGuestStarSlotParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateGuestStarSlotWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateGuestStarSlotParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateGuestStarSlotWithResponse_Call) Return(_a0 *twitchApi.UpdateGuestStarSlotHTTPResponse, _a1 error) *Api_UpdateGuestStarSlotWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateGuestStarSlotWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateGuestStarSlotParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateGuestStarSlotHTTPResponse, error)) *Api_UpdateGuestStarSlotWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRedemptionStatusWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateRedemptionStatusWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateRedemptionStatusParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateRedemptionStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedemptionStatusWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateRedemptionStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateRedemptionStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateRedemptionStatusHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateRedemptionStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateRedemptionStatusHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateRedemptionStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateRedemptionStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateRedemptionStatusWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRedemptionStatusWithBodyWithResponse'
type Api_UpdateRedemptionStatusWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateRedemptionStatusWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateRedemptionStatusParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateRedemptionStatusWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateRedemptionStatusWithBodyWithResponse_Call {
	return &Api_UpdateRedemptionStatusWithBodyWithResponse_Call{Call: _e.mock.On("UpdateRedemptionStatusWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateRedemptionStatusWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateRedemptionStatusParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateRedemptionStatusWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateRedemptionStatusParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateRedemptionStatusWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateRedemptionStatusHTTPResponse, _a1 error) *Api_UpdateRedemptionStatusWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateRedemptionStatusWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateRedemptionStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateRedemptionStatusHTTPResponse, error)) *Api_UpdateRedemptionStatusWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRedemptionStatusWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateRedemptionStatusWithResponse(ctx context.Context, params *twitchApi.UpdateRedemptionStatusParams, body twitchApi.UpdateRedemptionStatusBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateRedemptionStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedemptionStatusWithResponse")
	}

	var r0 *twitchApi.UpdateRedemptionStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateRedemptionStatusParams, twitchApi.UpdateRedemptionStatusBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateRedemptionStatusHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateRedemptionStatusParams, twitchApi.UpdateRedemptionStatusBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateRedemptionStatusHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateRedemptionStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateRedemptionStatusParams, twitchApi.UpdateRedemptionStatusBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateRedemptionStatusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRedemptionStatusWithResponse'
type Api_UpdateRedemptionStatusWithResponse_Call struct {
	*mock.Call
}

// UpdateRedemptionStatusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateRedemptionStatusParams
//   - body twitchApi.UpdateRedemptionStatusBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateRedemptionStatusWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateRedemptionStatusWithResponse_Call {
	return &Api_UpdateRedemptionStatusWithResponse_Call{Call: _e.mock.On("UpdateRedemptionStatusWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateRedemptionStatusWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateRedemptionStatusParams, body twitchApi.UpdateRedemptionStatusBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateRedemptionStatusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateRedemptionStatusParams), args[2].(twitchApi.UpdateRedemptionStatusBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateRedemptionStatusWithResponse_Call) Return(_a0 *twitchApi.UpdateRedemptionStatusHTTPResponse, _a1 error) *Api_UpdateRedemptionStatusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateRedemptionStatusWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateRedemptionStatusParams, twitchApi.UpdateRedemptionStatusBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateRedemptionStatusHTTPResponse, error)) *Api_UpdateRedemptionStatusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShieldModeStatusWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) UpdateShieldModeStatusWithBodyWithResponse(ctx context.Context, params *twitchApi.UpdateShieldModeStatusParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateShieldModeStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShieldModeStatusWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateShieldModeStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateShieldModeStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateShieldModeStatusHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateShieldModeStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateShieldModeStatusHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateShieldModeStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateShieldModeStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateShieldModeStatusWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShieldModeStatusWithBodyWithResponse'
type Api_UpdateShieldModeStatusWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateShieldModeStatusWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateShieldModeStatusParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateShieldModeStatusWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateShieldModeStatusWithBodyWithResponse_Call {
	return &Api_UpdateShieldModeStatusWithBodyWithResponse_Call{Call: _e.mock.On("UpdateShieldModeStatusWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateShieldModeStatusWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateShieldModeStatusParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateShieldModeStatusWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateShieldModeStatusParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateShieldModeStatusWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateShieldModeStatusHTTPResponse, _a1 error) *Api_UpdateShieldModeStatusWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateShieldModeStatusWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateShieldModeStatusParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateShieldModeStatusHTTPResponse, error)) *Api_UpdateShieldModeStatusWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShieldModeStatusWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) UpdateShieldModeStatusWithResponse(ctx context.Context, params *twitchApi.UpdateShieldModeStatusParams, body twitchApi.UpdateShieldModeStatusBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateShieldModeStatusHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShieldModeStatusWithResponse")
	}

	var r0 *twitchApi.UpdateShieldModeStatusHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateShieldModeStatusParams, twitchApi.UpdateShieldModeStatusBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateShieldModeStatusHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateShieldModeStatusParams, twitchApi.UpdateShieldModeStatusBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateShieldModeStatusHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateShieldModeStatusHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateShieldModeStatusParams, twitchApi.UpdateShieldModeStatusBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateShieldModeStatusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShieldModeStatusWithResponse'
type Api_UpdateShieldModeStatusWithResponse_Call struct {
	*mock.Call
}

// UpdateShieldModeStatusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateShieldModeStatusParams
//   - body twitchApi.UpdateShieldModeStatusBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateShieldModeStatusWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateShieldModeStatusWithResponse_Call {
	return &Api_UpdateShieldModeStatusWithResponse_Call{Call: _e.mock.On("UpdateShieldModeStatusWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_UpdateShieldModeStatusWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateShieldModeStatusParams, body twitchApi.UpdateShieldModeStatusBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateShieldModeStatusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateShieldModeStatusParams), args[2].(twitchApi.UpdateShieldModeStatusBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateShieldModeStatusWithResponse_Call) Return(_a0 *twitchApi.UpdateShieldModeStatusHTTPResponse, _a1 error) *Api_UpdateShieldModeStatusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateShieldModeStatusWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateShieldModeStatusParams, twitchApi.UpdateShieldModeStatusBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateShieldModeStatusHTTPResponse, error)) *Api_UpdateShieldModeStatusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserChatColorWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UpdateUserChatColorWithResponse(ctx context.Context, params *twitchApi.UpdateUserChatColorParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserChatColorHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserChatColorWithResponse")
	}

	var r0 *twitchApi.UpdateUserChatColorHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateUserChatColorParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserChatColorHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateUserChatColorParams, ...twitchApi.RequestEditorFn) *twitchApi.UpdateUserChatColorHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateUserChatColorHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateUserChatColorParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateUserChatColorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserChatColorWithResponse'
type Api_UpdateUserChatColorWithResponse_Call struct {
	*mock.Call
}

// UpdateUserChatColorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateUserChatColorParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateUserChatColorWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UpdateUserChatColorWithResponse_Call {
	return &Api_UpdateUserChatColorWithResponse_Call{Call: _e.mock.On("UpdateUserChatColorWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UpdateUserChatColorWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateUserChatColorParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateUserChatColorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateUserChatColorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateUserChatColorWithResponse_Call) Return(_a0 *twitchApi.UpdateUserChatColorHTTPResponse, _a1 error) *Api_UpdateUserChatColorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateUserChatColorWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateUserChatColorParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserChatColorHTTPResponse, error)) *Api_UpdateUserChatColorWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserExtensionsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *Api) UpdateUserExtensionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserExtensionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserExtensionsWithBodyWithResponse")
	}

	var r0 *twitchApi.UpdateUserExtensionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserExtensionsHTTPResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.UpdateUserExtensionsHTTPResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateUserExtensionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateUserExtensionsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserExtensionsWithBodyWithResponse'
type Api_UpdateUserExtensionsWithBodyWithResponse_Call struct {
	*mock.Call
}

// UpdateUserExtensionsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateUserExtensionsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateUserExtensionsWithBodyWithResponse_Call {
	return &Api_UpdateUserExtensionsWithBodyWithResponse_Call{Call: _e.mock.On("UpdateUserExtensionsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *Api_UpdateUserExtensionsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateUserExtensionsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateUserExtensionsWithBodyWithResponse_Call) Return(_a0 *twitchApi.UpdateUserExtensionsHTTPResponse, _a1 error) *Api_UpdateUserExtensionsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateUserExtensionsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserExtensionsHTTPResponse, error)) *Api_UpdateUserExtensionsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserExtensionsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *Api) UpdateUserExtensionsWithResponse(ctx context.Context, body twitchApi.UpdateUserExtensionsBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserExtensionsHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserExtensionsWithResponse")
	}

	var r0 *twitchApi.UpdateUserExtensionsHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateUserExtensionsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserExtensionsHTTPResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitchApi.UpdateUserExtensionsBody, ...twitchApi.RequestEditorFn) *twitchApi.UpdateUserExtensionsHTTPResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateUserExtensionsHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitchApi.UpdateUserExtensionsBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateUserExtensionsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserExtensionsWithResponse'
type Api_UpdateUserExtensionsWithResponse_Call struct {
	*mock.Call
}

// UpdateUserExtensionsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body twitchApi.UpdateUserExtensionsBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateUserExtensionsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *Api_UpdateUserExtensionsWithResponse_Call {
	return &Api_UpdateUserExtensionsWithResponse_Call{Call: _e.mock.On("UpdateUserExtensionsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *Api_UpdateUserExtensionsWithResponse_Call) Run(run func(ctx context.Context, body twitchApi.UpdateUserExtensionsBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateUserExtensionsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(twitchApi.UpdateUserExtensionsBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateUserExtensionsWithResponse_Call) Return(_a0 *twitchApi.UpdateUserExtensionsHTTPResponse, _a1 error) *Api_UpdateUserExtensionsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateUserExtensionsWithResponse_Call) RunAndReturn(run func(context.Context, twitchApi.UpdateUserExtensionsBody, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserExtensionsHTTPResponse, error)) *Api_UpdateUserExtensionsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *Api) UpdateUserWithResponse(ctx context.Context, params *twitchApi.UpdateUserParams, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserWithResponse")
	}

	var r0 *twitchApi.UpdateUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserHTTPResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.UpdateUserParams, ...twitchApi.RequestEditorFn) *twitchApi.UpdateUserHTTPResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.UpdateUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.UpdateUserParams, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_UpdateUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserWithResponse'
type Api_UpdateUserWithResponse_Call struct {
	*mock.Call
}

// UpdateUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.UpdateUserParams
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) UpdateUserWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *Api_UpdateUserWithResponse_Call {
	return &Api_UpdateUserWithResponse_Call{Call: _e.mock.On("UpdateUserWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *Api_UpdateUserWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.UpdateUserParams, reqEditors ...twitchApi.RequestEditorFn)) *Api_UpdateUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.UpdateUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_UpdateUserWithResponse_Call) Return(_a0 *twitchApi.UpdateUserHTTPResponse, _a1 error) *Api_UpdateUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_UpdateUserWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.UpdateUserParams, ...twitchApi.RequestEditorFn) (*twitchApi.UpdateUserHTTPResponse, error)) *Api_UpdateUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// WarnChatUserWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) WarnChatUserWithBodyWithResponse(ctx context.Context, params *twitchApi.WarnChatUserParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.WarnChatUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WarnChatUserWithBodyWithResponse")
	}

	var r0 *twitchApi.WarnChatUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.WarnChatUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.WarnChatUserHTTPResponse, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.WarnChatUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) *twitchApi.WarnChatUserHTTPResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.WarnChatUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.WarnChatUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_WarnChatUserWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnChatUserWithBodyWithResponse'
type Api_WarnChatUserWithBodyWithResponse_Call struct {
	*mock.Call
}

// WarnChatUserWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.WarnChatUserParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) WarnChatUserWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_WarnChatUserWithBodyWithResponse_Call {
	return &Api_WarnChatUserWithBodyWithResponse_Call{Call: _e.mock.On("WarnChatUserWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_WarnChatUserWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.WarnChatUserParams, contentType string, body io.Reader, reqEditors ...twitchApi.RequestEditorFn)) *Api_WarnChatUserWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.WarnChatUserParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_WarnChatUserWithBodyWithResponse_Call) Return(_a0 *twitchApi.WarnChatUserHTTPResponse, _a1 error) *Api_WarnChatUserWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_WarnChatUserWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.WarnChatUserParams, string, io.Reader, ...twitchApi.RequestEditorFn) (*twitchApi.WarnChatUserHTTPResponse, error)) *Api_WarnChatUserWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// WarnChatUserWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) WarnChatUserWithResponse(ctx context.Context, params *twitchApi.WarnChatUserParams, body twitchApi.WarnChatUserBody, reqEditors ...twitchApi.RequestEditorFn) (*twitchApi.WarnChatUserHTTPResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WarnChatUserWithResponse")
	}

	var r0 *twitchApi.WarnChatUserHTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.WarnChatUserParams, twitchApi.WarnChatUserBody, ...twitchApi.RequestEditorFn) (*twitchApi.WarnChatUserHTTPResponse, error)); ok {
		return rf(ctx, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *twitchApi.WarnChatUserParams, twitchApi.WarnChatUserBody, ...twitchApi.RequestEditorFn) *twitchApi.WarnChatUserHTTPResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitchApi.WarnChatUserHTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *twitchApi.WarnChatUserParams, twitchApi.WarnChatUserBody, ...twitchApi.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_WarnChatUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnChatUserWithResponse'
type Api_WarnChatUserWithResponse_Call struct {
	*mock.Call
}

// WarnChatUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *twitchApi.WarnChatUserParams
//   - body twitchApi.WarnChatUserBody
//   - reqEditors ...twitchApi.RequestEditorFn
func (_e *Api_Expecter) WarnChatUserWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_WarnChatUserWithResponse_Call {
	return &Api_WarnChatUserWithResponse_Call{Call: _e.mock.On("WarnChatUserWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_WarnChatUserWithResponse_Call) Run(run func(ctx context.Context, params *twitchApi.WarnChatUserParams, body twitchApi.WarnChatUserBody, reqEditors ...twitchApi.RequestEditorFn)) *Api_WarnChatUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]twitchApi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(twitchApi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*twitchApi.WarnChatUserParams), args[2].(twitchApi.WarnChatUserBody), variadicArgs...)
	})
	return _c
}

func (_c *Api_WarnChatUserWithResponse_Call) Return(_a0 *twitchApi.WarnChatUserHTTPResponse, _a1 error) *Api_WarnChatUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Api_WarnChatUserWithResponse_Call) RunAndReturn(run func(context.Context, *twitchApi.WarnChatUserParams, twitchApi.WarnChatUserBody, ...twitchApi.RequestEditorFn) (*twitchApi.WarnChatUserHTTPResponse, error)) *Api_WarnChatUserWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewApi creates a new instance of Api. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *Api {
	mock := &Api{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
