//Generated with client-with-responses.tmpl
// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
	OkOnNon200 bool
	Tracer trace.Tracer
}

// StatusFailureError is the error returned if the response was a non-success code.
type StatusFailureError struct {
	Resp *http.Response
	Err  error
}

func (s StatusFailureError)Error() string {
	if s.Err != nil {
		return s.Err.Error()
	}
	return fmt.Sprintf("got non success response code: %d", s.Resp.StatusCode )
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling.
// When OkOnNon200 is false, all requests that return a non 200 status code will generate and return a StatusFailureError wrapping the response.
// This is useful when treating the library as a RPC client and no errors are acceptable. If the error states are important however, 
// setting OKOnNon200 to true will result in all requests that do not trigger a standard HTTP request error (such as an encoding error)
// to return with no error. This means that the error must be parsed from the response state.
func NewClientWithResponses(server string, OkOnNon200 bool, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{
		ClientInterface: client,
		OkOnNon200: OkOnNon200,
	}, nil
}

{{$clientTypeName := opts.OutputOptions.ClientTypeName -}}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *{{ $clientTypeName }}) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
{{range . -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
    // {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse request{{if .HasBody}} with any body{{end}}
    {{if gt (len .Spec.Description) 0}}
    /*
    {{.Spec.Description}}
    */{{end}}
	{{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse(ctx context.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}, reqEditors... RequestEditorFn) (*{{genResponseTypeName (print $opid "HTTP")}}, error)
    {{$spec := .Spec}}

{{range .Bodies}}
	{{if .IsSupportedByClient -}}
        {{if gt (len $spec.Description) 0}}
            /*
            {{$spec.Description}}
            */{{end}}
		{{$opid}}{{.Suffix}}WithResponse(ctx context.Context{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody, reqEditors... RequestEditorFn) (*{{genResponseTypeName (print $opid "HTTP")}}, error)
	{{end -}}
{{end}}{{/* range .Bodies */}}
{{end}}{{/* range . $opid := .OperationId */}}
}

{{range .}}{{$opid := .OperationId}}{{$op := .}}
type {{genResponseTypeName (print $opid "HTTP") | ucFirst}} struct {
	Body         []byte
	HTTPResponse *http.Response
	{{- range getResponseTypeDefinitions .}}
	{{.TypeName}} *{{.Schema.TypeDecl}}
	{{- end}}
}

// Status returns HTTPResponse.Status
func (r {{genResponseTypeName (print $opid "HTTP") | ucFirst}}) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r {{genResponseTypeName (print $opid "HTTP") | ucFirst}}) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
{{end}}


{{range .}}
{{$opid := .OperationId -}}
{{/* Generate client methods (with responses)*/}}
// {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse request{{if .HasBody}} with arbitrary body{{end}} returning *{{genResponseTypeName (print $opid "HTTP")}}
{{if gt (len .Spec.Description) 0}}
    /*
    {{.Spec.Description}}
    */{{end}}
func (c *ClientWithResponses) {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse(ctx context.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}, reqEditors... RequestEditorFn) (r *{{genResponseTypeName (print $opid "HTTP")}}, err error){
    if c.Tracer != nil {
		var span trace.Span
        ctx, span = c.Tracer.Start(ctx, "{{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse")
        defer func(span trace.Span) {
            if err != nil {
                if _, ok := err.(StatusFailureError); !ok {
                    span.SetStatus(codes.Error, err.Error())
                    span.RecordError(err)
                }
            }
            span.End()
        }(span)
    }

	rsp, err := c.{{$opid}}{{if .HasBody}}WithBody{{end}}(ctx{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}}{{if .HasBody}}, contentType, body{{end}}, reqEditors...)
	if err != nil {
		return nil, err
	}
	r,err = Parse{{genResponseTypeName (print $opid "HTTP") | ucFirst}}(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400)  {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r,err
}

{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$bodyRequired := .BodyRequired -}}
    {{$spec := .Spec}}
{{range .Bodies}}
{{if .IsSupportedByClient -}}
{{if gt (len $spec.Description) 0}}
    /*
    {{$spec.Description}}
    */{{end}}
func (c *ClientWithResponses) {{$opid}}{{.Suffix}}WithResponse(ctx context.Context{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody, reqEditors... RequestEditorFn) (r *{{genResponseTypeName (print $opid "HTTP")}}, err error) {
    if c.Tracer != nil {
		var span trace.Span
        ctx, span = c.Tracer.Start(ctx, "{{$opid}}{{.Suffix}}WithResponse")
        defer func(span trace.Span) {
            if err != nil {
                if _, ok := err.(StatusFailureError); !ok {
                    span.SetStatus(codes.Error, err.Error())
                    span.RecordError(err)
                }
            }
            span.End()
        }(span)
    }

	rsp, err := c.{{$opid}}{{.Suffix}}(ctx{{genParamNames $pathParams}}{{if $hasParams}}, params{{end}}, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r,err = Parse{{genResponseTypeName (print $opid "HTTP") | ucFirst}}(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400)  {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r,err
}
{{end}}
{{end}}

{{end}}{{/* operations */}}

{{/* Generate parse functions for responses*/}}
{{range .}}{{$opid := .OperationId}}

// Parse{{genResponseTypeName (print $opid "HTTP") | ucFirst}} parses an HTTP response from a {{$opid}}WithResponse call
func Parse{{genResponseTypeName (print $opid "HTTP") | ucFirst}}(rsp *http.Response) (*{{genResponseTypeName (print $opid "HTTP")}}, error) {
	bodyBytes, er := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if er != nil {
		return nil, er
	}

	response := {{genResponsePayload $opid | replace "Response{" "HTTPResponse{"}}

	{{genResponseUnmarshal .}}

	return response, nil
}
{{end}}{{/* range . $opid := .OperationId */}}
